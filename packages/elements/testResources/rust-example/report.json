{
  "schemaVersion": "2",
  "files": {
    "url/src/lib.rs": {
      "language": "rust",
      "mutants": [
        {
          "id": "url/src/lib.rs:2157:29:2157:31:BinaryOperator:/=",
          "duration": 4.213931974,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2157,
              "column": 29
            },
            "end": {
              "line": 2157,
              "column": 31
            }
          },
          "replacement": "/=",
          "status": "Survived",
          "description": "Replace BinaryOperator by /=",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:2846:5:2901:34:FnValue:Ok((0, Default::default()))",
          "duration": 0.101117562,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 2846,
              "column": 5
            },
            "end": {
              "line": 2901,
              "column": 34
            }
          },
          "replacement": "Ok((0, Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by Ok((0, Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:1458:9:1461:11:FnValue:Some(\"xyzzy\")",
          "duration": 0.7027112,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1458,
              "column": 9
            },
            "end": {
              "line": 1461,
              "column": 11
            }
          },
          "replacement": "Some(\"xyzzy\")",
          "status": "Killed",
          "description": "Replace FnValue by Some(\"xyzzy\")",
          "statusReason": "thread 'test_fragment' panicked at url/tests/unit.rs:724:5:\nassertion `left == right` failed\n  left: Some(\"xyzzy\")\n right: Some(\"fragment\")\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_fragment",
            "test_make_relative"
          ]
        },
        {
          "id": "url/src/lib.rs:1391:45:1391:46:BinaryOperator:-",
          "duration": 9.723365213000001,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1391,
              "column": 45
            },
            "end": {
              "line": 1391,
              "column": 46
            }
          },
          "replacement": "-",
          "status": "Killed",
          "description": "Replace BinaryOperator by -",
          "statusReason": "thread 'test_make_relative' panicked at url/tests/unit.rs:1193:9:\nassertion `left == right` failed: base: http://127.0.0.1:8080/, uri: http://127.0.0.1:8080/?foo=bar#123, relative: ?foo=bar#123\n  left: \"?/?foo=bar#123\"\n right: \"?foo=bar#123\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_make_relative",
            "test_query"
          ]
        },
        {
          "id": "url/src/lib.rs:2604:59:2604:61:BinaryOperator:!=",
          "duration": 11.980610906999999,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2604,
              "column": 59
            },
            "end": {
              "line": 2604,
              "column": 61
            }
          },
          "replacement": "!=",
          "status": "Survived",
          "description": "Replace BinaryOperator by !=",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:2020:20:2020:22:BinaryOperator:+=",
          "duration": 3.972865171,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2020,
              "column": 20
            },
            "end": {
              "line": 2020,
              "column": 22
            }
          },
          "replacement": "+=",
          "status": "Survived",
          "description": "Replace BinaryOperator by +=",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:1465:9:1468:15:FnValue:Default::default()",
          "duration": 0.251868705,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1465,
              "column": 9
            },
            "end": {
              "line": 1468,
              "column": 15
            }
          },
          "replacement": "Default::default()",
          "status": "CompileError",
          "description": "Replace FnValue by Default::default()",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:986:72:986:73:BinaryOperator:*",
          "duration": 2.669519557,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 986,
              "column": 72
            },
            "end": {
              "line": 986,
              "column": 73
            }
          },
          "replacement": "*",
          "status": "Killed",
          "description": "Replace BinaryOperator by *",
          "statusReason": "thread 'test_set_empty_hostname' panicked at url/tests/unit.rs:95:5:\nsetting an empty hostname to a url with a username should fail\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_set_empty_hostname"
          ]
        },
        {
          "id": "url/src/lib.rs:2209:46:2209:47:BinaryOperator:-",
          "duration": 1.5787122740000001,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2209,
              "column": 46
            },
            "end": {
              "line": 2209,
              "column": 47
            }
          },
          "replacement": "-",
          "status": "Killed",
          "description": "Replace BinaryOperator by -",
          "statusReason": "thread 'test_set_empty_host' panicked at url/src/lib.rs:2736:11:\nbegin <= end (3 <= 0) when slicing `moz://foo:bar@servo/baz`\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_set_empty_host",
            "test_set_empty_username_and_password"
          ]
        },
        {
          "id": "url/src/lib.rs:2964:26:2964:27:BinaryOperator:-",
          "duration": 0.221680773,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2964,
              "column": 26
            },
            "end": {
              "line": 2964,
              "column": 27
            }
          },
          "replacement": "-",
          "status": "CompileError",
          "description": "Replace BinaryOperator by -",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:1512:9:1517:11:FnValue:None",
          "duration": 4.3936033519999995,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1512,
              "column": 9
            },
            "end": {
              "line": 1517,
              "column": 11
            }
          },
          "replacement": "None",
          "status": "Killed",
          "description": "Replace FnValue by None",
          "statusReason": "Test executable failed (exit status: 101).\n\nstderr:\nthread 'main' panicked at url/src/lib.rs:12:1:\nassertion `left == right` failed\n  left: Some(\"lang=fr\")\n right: Some(\"lang=fr&foo=bar\")\nstack backtrace:\n   0:     0x56140351be86 - std::backtrace_rs::backtrace::libunwind::trace::h5aa1f3f50fd6005d\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/../../backtrace/src/backtrace/libunwind.rs:104:5\n   1:     0x56140351be86 - std::backtrace_rs::backtrace::trace_unsynchronized::h39f759d0ceaa839b\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/../../backtrace/src/backtrace/mod.rs:66:5\n   2:     0x56140351be86 - std::sys_common::backtrace::_print_fmt::hfd4aa038a1413f7f\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:68:5\n   3:     0x56140351be86 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::ha47fba1de44cec55\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:44:22\n   4:     0x56140353979c - core::fmt::rt::Argument::fmt::h375396e1292b08cb\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/fmt/rt.rs:142:9\n   5:     0x56140353979c - core::fmt::write::h93e0b545aa9eb320\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/fmt/mod.rs:1120:17\n   6:     0x56140351a09f - std::io::Write::write_fmt::h97fad0674ecdf154\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/io/mod.rs:1854:15\n   7:     0x56140351bc34 - std::sys_common::backtrace::_print::hb7626a1b4ea382df\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:47:5\n   8:     0x56140351bc34 - std::sys_common::backtrace::print::h89f2abc5b98b82a2\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:34:9\n   9:     0x56140351d12b - std::panicking::default_hook::{{closure}}::h73fe684137831048\n  10:     0x56140351ce79 - std::panicking::default_hook::h8dfe6e62b35915a0\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:292:9\n  11:     0x56140351d5cd - std::panicking::rust_panic_with_hook::hc33e259baf535986\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:781:13\n  12:     0x56140351d4a2 - std::panicking::begin_panic_handler::{{closure}}::hcfbf8e29c9418131\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:659:13\n  13:     0x56140351c366 - std::sys_common::backtrace::__rust_end_short_backtrace::h99b80dfa4797f5b6\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:171:18\n  14:     0x56140351d1d4 - rust_begin_unwind\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:647:5\n  15:     0x5614034b6cf5 - core::panicking::panic_fmt::h96700527d99a56a9\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/panicking.rs:72:14\n  16:     0x5614034b6ffb - core::panicking::assert_failed_inner::h88ed53873568fcef\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/panicking.rs:342:17\n  17:     0x5614034b784a - core::panicking::assert_failed::hb35f7c6aa33d29e8\n  18:     0x5614034b7f98 - rust_out::main::_doctest_main_url_src_lib_rs_1581_0::run::hf577591b5dda6e41\n  19:     0x5614034b7b89 - rust_out::main::_doctest_main_url_src_lib_rs_1581_0::h86c9af5be68ec18c\n  20:     0x5614034b7b76 - rust_out::main::h11d1a6ed4289a3df\n  21:     0x5614034b75c3 - core::ops::function::FnOnce::call_once::h903f19ac3af5d648\n  22:     0x5614034b74b6 - std::sys_common::backtrace::__rust_begin_short_backtrace::ha11011b11b4aaa1f\n  23:     0x5614034b7509 - std::rt::lang_start::{{closure}}::h196360a935ed97d8\n  24:     0x5614035183a3 - core::ops::function::impls::<impl core::ops::function::FnOnce<A> for &F>::call_once::hb12a069c52b9e638\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/ops/function.rs:284:13\n  25:     0x5614035183a3 - std::panicking::try::do_call::h34ba557680a1662c\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:554:40\n  26:     0x5614035183a3 - std::panicking::try::hb88778117e3deeb6\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:518:19\n  27:     0x5614035183a3 - std::panic::catch_unwind::hbd3c1fafc0d9693e\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panic.rs:142:14\n  28:     0x5614035183a3 - std::rt::lang_start_internal::{{closure}}::h0b81b8de0028b6f3\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/rt.rs:148:48\n  29:     0x5614035183a3 - std::panicking::try::do_call::hbbb521b5391ac872\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:554:40\n  30:     0x5614035183a3 - std::panicking::try::hf108a0b7deb842f7\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:518:19\n  31:     0x5614035183a3 - std::panic::catch_unwind::h6451f9c53324fd81\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panic.rs:142:14\n  32:     0x5614035183a3 - std::rt::lang_start_internal::hc6ad905f9af5ea03\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/rt.rs:148:20\n  33:     0x5614034b74e7 - std::rt::lang_start::h4d1167809e102347\n  34:     0x5614034b8305 - main\n  35:     0x7fc031c4acd0 - <unknown>\n  36:     0x7fc031c4ad8a - __libc_start_main\n  37:     0x5614034b7315 - _start\n  38:                0x0 - <unknown>\n\n",
          "killedBy": [
            "url/src/lib.rs - Url::query_pairs_mut (line 1581)"
          ]
        },
        {
          "id": "url/src/lib.rs:1354:9:1355:69:FnValue:Some(Split::from_iter([Default::default()]))",
          "duration": 0.663464113,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1354,
              "column": 9
            },
            "end": {
              "line": 1355,
              "column": 69
            }
          },
          "replacement": "Some(Split::from_iter([Default::default()]))",
          "status": "CompileError",
          "description": "Replace FnValue by Some(Split::from_iter([Default::default()]))",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:1980:24:1980:26:BinaryOperator:+=",
          "duration": 3.236296588,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1980,
              "column": 24
            },
            "end": {
              "line": 1980,
              "column": 26
            }
          },
          "replacement": "+=",
          "status": "Survived",
          "description": "Replace BinaryOperator by +=",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:2374:77:2374:79:BinaryOperator:&&",
          "duration": 1.267089927,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2374,
              "column": 77
            },
            "end": {
              "line": 2374,
              "column": 79
            }
          },
          "replacement": "&&",
          "status": "Killed",
          "description": "Replace BinaryOperator by &&",
          "statusReason": "thread 'test_set_scheme_to_file_with_host' panicked at url/tests/unit.rs:983:5:\nassertion `left == right` failed\n  left: \"file://localhost:6767/foo/bar\"\n right: \"http://localhost:6767/foo/bar\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_set_scheme_to_file_with_host"
          ]
        },
        {
          "id": "url/src/lib.rs:2931:20:2931:21:BinaryOperator:==",
          "duration": 1.1181271560000001,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2931,
              "column": 20
            },
            "end": {
              "line": 2931,
              "column": 21
            }
          },
          "replacement": "==",
          "status": "Killed",
          "description": "Replace BinaryOperator by ==",
          "statusReason": "thread 'test_url_from_file_path' panicked at url/tests/unit.rs:940:5:\nassertion `left == right` failed\n  left: \"/c:/\"\n right: \"/c:\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_url_from_file_path"
          ]
        },
        {
          "id": "url/src/lib.rs:2071:9:2080:15:FnValue:Ok(())",
          "duration": 2.469234059,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 2071,
              "column": 9
            },
            "end": {
              "line": 2080,
              "column": 15
            }
          },
          "replacement": "Ok(())",
          "status": "Killed",
          "description": "Replace FnValue by Ok(())",
          "statusReason": "thread 'test_no_base_url' panicked at url/tests/unit.rs:667:5:\nassertion failed: no_base_url.set_ip_host(\"127.0.0.1\".parse().unwrap()).is_err()\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_no_base_url",
            "test_set_ip_host"
          ]
        },
        {
          "id": "url/src/lib.rs:331:9:337:12:FnValue:Ok(Default::default())",
          "duration": 0.464036882,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 331,
              "column": 9
            },
            "end": {
              "line": 337,
              "column": 12
            }
          },
          "replacement": "Ok(Default::default())",
          "status": "CompileError",
          "description": "Replace FnValue by Ok(Default::default())",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:584:9:584:28:FnValue:\"\"",
          "duration": 2.380845334,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 584,
              "column": 9
            },
            "end": {
              "line": 584,
              "column": 28
            }
          },
          "replacement": "\"\"",
          "status": "Killed",
          "description": "Replace FnValue by \"\"",
          "statusReason": "thread 'issue_197' panicked at url/src/lib.rs:722:47:\nFailed to parse myself?: RelativeUrlWithoutBase\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "issue_197",
            "extend_query_pairs_then_mutate",
            "issue_61",
            "parse_with_params",
            "append_empty_segment_then_mutate",
            "path_backslash_fun",
            "test_make_relative",
            "append_trailing_slash",
            "test_set_empty_hostname",
            "test_set_host",
            "test_non_special_path3",
            "test_non_special_path",
            "test_relative_empty",
            "test_relative",
            "test_serialization",
            "test_set_empty_host",
            "test_strip_trailing_spaces_from_opaque_path",
            "test_null_host_with_leading_empty_path_segment",
            "test_set_empty_password",
            "test_options_reuse",
            "test_set_empty_query",
            "test_set_empty_username_and_password",
            "test_non_special_path2"
          ]
        },
        {
          "id": "url/src/lib.rs:2484:9:2488:16:FnValue:Ok(Default::default())",
          "duration": 0.206712371,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 2484,
              "column": 9
            },
            "end": {
              "line": 2488,
              "column": 16
            }
          },
          "replacement": "Ok(Default::default())",
          "status": "CompileError",
          "description": "Replace FnValue by Ok(Default::default())",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:608:9:608:20:FnValue:\"xyzzy\".into()",
          "duration": 3.019710328,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 608,
              "column": 9
            },
            "end": {
              "line": 608,
              "column": 20
            }
          },
          "replacement": "\"xyzzy\".into()",
          "status": "Survived",
          "description": "Replace FnValue by \"xyzzy\".into()",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:2240:20:2240:22:BinaryOperator:/=",
          "duration": 1.920443018,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2240,
              "column": 20
            },
            "end": {
              "line": 2240,
              "column": 22
            }
          },
          "replacement": "/=",
          "status": "Killed",
          "description": "Replace BinaryOperator by /=",
          "statusReason": "thread 'test_set_empty_host' panicked at url/src/lib.rs:1963:13:\nassertion failed: self.byte_at(self.path_start) == b'/'\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_set_empty_host",
            "test_set_empty_username_and_password"
          ]
        },
        {
          "id": "url/src/lib.rs:2145:50:2145:51:BinaryOperator:*",
          "duration": 1.523072744,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2145,
              "column": 50
            },
            "end": {
              "line": 2145,
              "column": 51
            }
          },
          "replacement": "*",
          "status": "Killed",
          "description": "Replace BinaryOperator by *",
          "statusReason": "thread 'test_set_empty_password' panicked at url/tests/unit.rs:85:5:\nassertion `left == right` failed\n  left: \"moz://fooservo/baz\"\n right: \"moz://foo@servo/baz\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_set_empty_password",
            "test_set_empty_username_and_password"
          ]
        },
        {
          "id": "url/src/lib.rs:814:9:814:33:FnValue:Default::default()",
          "duration": 0.152434591,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 814,
              "column": 9
            },
            "end": {
              "line": 814,
              "column": 33
            }
          },
          "replacement": "Default::default()",
          "status": "CompileError",
          "description": "Replace FnValue by Default::default()",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:2156:27:2156:29:BinaryOperator:/=",
          "duration": 3.092839112,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2156,
              "column": 27
            },
            "end": {
              "line": 2156,
              "column": 29
            }
          },
          "replacement": "/=",
          "status": "Killed",
          "description": "Replace BinaryOperator by /=",
          "statusReason": "thread 'test_set_empty_username_and_password' panicked at url/src/lib.rs:2736:11:\nbegin <= end (6 <= 3) when slicing `moz://servo/baz`\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_set_empty_username_and_password",
            "test_set_empty_password"
          ]
        },
        {
          "id": "url/src/lib.rs:2668:9:2679:22:FnValue:Ok(Default::default())",
          "duration": 4.571871827,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 2668,
              "column": 9
            },
            "end": {
              "line": 2679,
              "column": 22
            }
          },
          "replacement": "Ok(Default::default())",
          "status": "Survived",
          "description": "Replace FnValue by Ok(Default::default())",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:254:9:255:13:FnValue:Default::default()",
          "duration": 1.01442119,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 254,
              "column": 9
            },
            "end": {
              "line": 255,
              "column": 13
            }
          },
          "replacement": "Default::default()",
          "status": "CompileError",
          "description": "Replace FnValue by Default::default()",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:2372:76:2372:78:BinaryOperator:&&",
          "duration": 4.225607844,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2372,
              "column": 76
            },
            "end": {
              "line": 2372,
              "column": 78
            }
          },
          "replacement": "&&",
          "status": "Killed",
          "description": "Replace BinaryOperator by &&",
          "statusReason": "Test executable failed (exit status: 101).\n\nstderr:\nthread 'main' panicked at url/src/lib.rs:11:1:\nassertion `left == right` failed\n  left: \"https://example.net\"\n right: \"foo://example.net\"\nstack backtrace:\n   0:     0x55cc50ccbde6 - std::backtrace_rs::backtrace::libunwind::trace::h5aa1f3f50fd6005d\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/../../backtrace/src/backtrace/libunwind.rs:104:5\n   1:     0x55cc50ccbde6 - std::backtrace_rs::backtrace::trace_unsynchronized::h39f759d0ceaa839b\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/../../backtrace/src/backtrace/mod.rs:66:5\n   2:     0x55cc50ccbde6 - std::sys_common::backtrace::_print_fmt::hfd4aa038a1413f7f\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:68:5\n   3:     0x55cc50ccbde6 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::ha47fba1de44cec55\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:44:22\n   4:     0x55cc50ce96fc - core::fmt::rt::Argument::fmt::h375396e1292b08cb\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/fmt/rt.rs:142:9\n   5:     0x55cc50ce96fc - core::fmt::write::h93e0b545aa9eb320\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/fmt/mod.rs:1120:17\n   6:     0x55cc50cc9fff - std::io::Write::write_fmt::h97fad0674ecdf154\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/io/mod.rs:1854:15\n   7:     0x55cc50ccbb94 - std::sys_common::backtrace::_print::hb7626a1b4ea382df\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:47:5\n   8:     0x55cc50ccbb94 - std::sys_common::backtrace::print::h89f2abc5b98b82a2\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:34:9\n   9:     0x55cc50ccd08b - std::panicking::default_hook::{{closure}}::h73fe684137831048\n  10:     0x55cc50cccdd9 - std::panicking::default_hook::h8dfe6e62b35915a0\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:292:9\n  11:     0x55cc50ccd52d - std::panicking::rust_panic_with_hook::hc33e259baf535986\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:781:13\n  12:     0x55cc50ccd402 - std::panicking::begin_panic_handler::{{closure}}::hcfbf8e29c9418131\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:659:13\n  13:     0x55cc50ccc2c6 - std::sys_common::backtrace::__rust_end_short_backtrace::h99b80dfa4797f5b6\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:171:18\n  14:     0x55cc50ccd134 - rust_begin_unwind\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:647:5\n  15:     0x55cc50c67cf5 - core::panicking::panic_fmt::h96700527d99a56a9\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/panicking.rs:72:14\n  16:     0x55cc50c67ffb - core::panicking::assert_failed_inner::h88ed53873568fcef\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/panicking.rs:342:17\n  17:     0x55cc50c685ca - core::panicking::assert_failed::h03f34daddd0b0bf6\n  18:     0x55cc50c68a51 - rust_out::main::_doctest_main_url_src_lib_rs_2337_0::run::haa216b572b7f7a15\n  19:     0x55cc50c687a9 - rust_out::main::_doctest_main_url_src_lib_rs_2337_0::hd91b6473691fa973\n  20:     0x55cc50c68796 - rust_out::main::h11d1a6ed4289a3df\n  21:     0x55cc50c684f3 - core::ops::function::FnOnce::call_once::h903f19ac3af5d648\n  22:     0x55cc50c683f6 - std::sys_common::backtrace::__rust_begin_short_backtrace::ha11011b11b4aaa1f\n  23:     0x55cc50c68449 - std::rt::lang_start::{{closure}}::h196360a935ed97d8\n  24:     0x55cc50cc8303 - core::ops::function::impls::<impl core::ops::function::FnOnce<A> for &F>::call_once::hb12a069c52b9e638\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/ops/function.rs:284:13\n  25:     0x55cc50cc8303 - std::panicking::try::do_call::h34ba557680a1662c\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:554:40\n  26:     0x55cc50cc8303 - std::panicking::try::hb88778117e3deeb6\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:518:19\n  27:     0x55cc50cc8303 - std::panic::catch_unwind::hbd3c1fafc0d9693e\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panic.rs:142:14\n  28:     0x55cc50cc8303 - std::rt::lang_start_internal::{{closure}}::h0b81b8de0028b6f3\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/rt.rs:148:48\n  29:     0x55cc50cc8303 - std::panicking::try::do_call::hbbb521b5391ac872\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:554:40\n  30:     0x55cc50cc8303 - std::panicking::try::hf108a0b7deb842f7\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:518:19\n  31:     0x55cc50cc8303 - std::panic::catch_unwind::h6451f9c53324fd81\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panic.rs:142:14\n  32:     0x55cc50cc8303 - std::rt::lang_start_internal::hc6ad905f9af5ea03\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/rt.rs:148:20\n  33:     0x55cc50c68427 - std::rt::lang_start::h4d1167809e102347\n  34:     0x55cc50c68ae5 - main\n  35:     0x7fb654ed8cd0 - <unknown>\n  36:     0x7fb654ed8d8a - __libc_start_main\n  37:     0x55cc50c68315 - _start\n  38:                0x0 - <unknown>\n\n",
          "killedBy": [
            "url/src/lib.rs - Url::set_scheme (line 2337)",
            "url/src/lib.rs - Url::set_scheme (line 2352)"
          ]
        },
        {
          "id": "url/src/lib.rs:2807:5:2829:39:FnValue:Ok((1, Default::default()))",
          "duration": 0.151753971,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 2807,
              "column": 5
            },
            "end": {
              "line": 2829,
              "column": 39
            }
          },
          "replacement": "Ok((1, Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by Ok((1, Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:1512:9:1517:11:FnValue:Some(\"xyzzy\".into())",
          "duration": 1.667603953,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1512,
              "column": 9
            },
            "end": {
              "line": 1517,
              "column": 11
            }
          },
          "replacement": "Some(\"xyzzy\".into())",
          "status": "Killed",
          "description": "Replace FnValue by Some(\"xyzzy\".into())",
          "statusReason": "thread 'extend_query_pairs_then_mutate' panicked at url/tests/unit.rs:478:5:\nassertion `left == right` failed\n  left: \"http://localhost:6767/foo/bar?auth=my-token#xyzzy\"\n right: \"http://localhost:6767/foo/bar?auth=my-token\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "extend_query_pairs_then_mutate",
            "parse_with_params",
            "test_set_empty_query",
            "test_strip_trailing_spaces_from_opaque_path"
          ]
        },
        {
          "id": "url/src/lib.rs:1022:13:1022:15:BinaryOperator:||",
          "duration": 1.8765945880000001,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1022,
              "column": 13
            },
            "end": {
              "line": 1022,
              "column": 15
            }
          },
          "replacement": "||",
          "status": "Killed",
          "description": "Replace BinaryOperator by ||",
          "statusReason": "thread 'test_set_empty_hostname' panicked at url/src/lib.rs:1024:13:\nassertion failed: self.byte_at(self.host_start - 1) == b'@'\n",
          "killedBy": [
            "test_set_empty_hostname",
            "issue_864"
          ]
        },
        {
          "id": "url/src/lib.rs:220:9:221:13:FnValue:Default::default()",
          "duration": 0.807421152,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 220,
              "column": 9
            },
            "end": {
              "line": 221,
              "column": 13
            }
          },
          "replacement": "Default::default()",
          "status": "CompileError",
          "description": "Replace FnValue by Default::default()",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:2374:44:2374:46:BinaryOperator:||",
          "duration": 2.524243261,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2374,
              "column": 44
            },
            "end": {
              "line": 2374,
              "column": 46
            }
          },
          "replacement": "||",
          "status": "Killed",
          "description": "Replace BinaryOperator by ||",
          "statusReason": "thread 'issue_61' panicked at url/tests/unit.rs:435:29:\ncalled `Result::unwrap()` on an `Err` value: ()\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "issue_61"
          ]
        },
        {
          "id": "url/src/lib.rs:986:72:986:73:BinaryOperator:-",
          "duration": 3.7206686700000002,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 986,
              "column": 72
            },
            "end": {
              "line": 986,
              "column": 73
            }
          },
          "replacement": "-",
          "status": "Survived",
          "description": "Replace BinaryOperator by -",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:2982:70:2982:72:BinaryOperator:==",
          "duration": 3.467143123,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2982,
              "column": 70
            },
            "end": {
              "line": 2982,
              "column": 72
            }
          },
          "replacement": "==",
          "status": "Survived",
          "description": "Replace BinaryOperator by ==",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:652:39:652:40:BinaryOperator:*",
          "duration": 2.473021195,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 652,
              "column": 39
            },
            "end": {
              "line": 652,
              "column": 40
            }
          },
          "replacement": "*",
          "status": "Killed",
          "description": "Replace BinaryOperator by *",
          "statusReason": "thread 'append_trailing_slash' panicked at url/tests/unit.rs:465:28:\ncalled `Result::unwrap()` on an `Err` value: \"7 != 5 (self.username_end != self.scheme_end + 1) for URL \\\"http://localhost:6767/foo/bar?a=b\\\"\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "append_trailing_slash",
            "append_empty_segment_then_mutate",
            "extend_query_pairs_then_mutate",
            "issue_197",
            "issue_61"
          ]
        },
        {
          "id": "url/src/lib.rs:1391:45:1391:46:BinaryOperator:*",
          "duration": 0.867469504,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1391,
              "column": 45
            },
            "end": {
              "line": 1391,
              "column": 46
            }
          },
          "replacement": "*",
          "status": "Killed",
          "description": "Replace BinaryOperator by *",
          "statusReason": "thread 'test_query' panicked at url/tests/unit.rs:690:5:\nassertion `left == right` failed\n  left: Some(\"?page=2\")\n right: Some(\"page=2\")\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_query",
            "test_make_relative"
          ]
        },
        {
          "id": "url/src/lib.rs:1129:9:1134:10:FnValue:Some(Host::from_iter([\"\"]))",
          "duration": 1.011407335,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1129,
              "column": 9
            },
            "end": {
              "line": 1134,
              "column": 10
            }
          },
          "replacement": "Some(Host::from_iter([\"\"]))",
          "status": "CompileError",
          "description": "Replace FnValue by Some(Host::from_iter([\"\"]))",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:402:9:402:57:FnValue:Ok(Default::default())",
          "duration": 0.912347429,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 402,
              "column": 9
            },
            "end": {
              "line": 402,
              "column": 57
            }
          },
          "replacement": "Ok(Default::default())",
          "status": "CompileError",
          "description": "Replace FnValue by Ok(Default::default())",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:1387:45:1387:46:BinaryOperator:*",
          "duration": 2.617945197,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1387,
              "column": 45
            },
            "end": {
              "line": 1387,
              "column": 46
            }
          },
          "replacement": "*",
          "status": "Killed",
          "description": "Replace BinaryOperator by *",
          "statusReason": "thread 'test_query' panicked at url/tests/unit.rs:701:5:\nassertion `left == right` failed\n  left: Some(\"?country=espa%C3%B1ol\")\n right: Some(\"country=espa%C3%B1ol\")\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_query"
          ]
        },
        {
          "id": "url/src/lib.rs:1025:68:1025:69:BinaryOperator:/",
          "duration": 3.422500218,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1025,
              "column": 68
            },
            "end": {
              "line": 1025,
              "column": 69
            }
          },
          "replacement": "/",
          "status": "Killed",
          "description": "Replace BinaryOperator by /",
          "statusReason": "Test executable failed (exit status: 101).\n\nstderr:\nthread 'main' panicked at url/src/lib.rs:10:1:\nassertion `left == right` failed\n  left: Some(\"secret123@\")\n right: Some(\"secret123\")\nstack backtrace:\n   0:     0x55a14d651fd6 - std::backtrace_rs::backtrace::libunwind::trace::h5aa1f3f50fd6005d\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/../../backtrace/src/backtrace/libunwind.rs:104:5\n   1:     0x55a14d651fd6 - std::backtrace_rs::backtrace::trace_unsynchronized::h39f759d0ceaa839b\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/../../backtrace/src/backtrace/mod.rs:66:5\n   2:     0x55a14d651fd6 - std::sys_common::backtrace::_print_fmt::hfd4aa038a1413f7f\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:68:5\n   3:     0x55a14d651fd6 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::ha47fba1de44cec55\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:44:22\n   4:     0x55a14d66f8ec - core::fmt::rt::Argument::fmt::h375396e1292b08cb\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/fmt/rt.rs:142:9\n   5:     0x55a14d66f8ec - core::fmt::write::h93e0b545aa9eb320\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/fmt/mod.rs:1120:17\n   6:     0x55a14d6501ef - std::io::Write::write_fmt::h97fad0674ecdf154\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/io/mod.rs:1854:15\n   7:     0x55a14d651d84 - std::sys_common::backtrace::_print::hb7626a1b4ea382df\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:47:5\n   8:     0x55a14d651d84 - std::sys_common::backtrace::print::h89f2abc5b98b82a2\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:34:9\n   9:     0x55a14d65327b - std::panicking::default_hook::{{closure}}::h73fe684137831048\n  10:     0x55a14d652fc9 - std::panicking::default_hook::h8dfe6e62b35915a0\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:292:9\n  11:     0x55a14d65371d - std::panicking::rust_panic_with_hook::hc33e259baf535986\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:781:13\n  12:     0x55a14d6535f2 - std::panicking::begin_panic_handler::{{closure}}::hcfbf8e29c9418131\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:659:13\n  13:     0x55a14d6524b6 - std::sys_common::backtrace::__rust_end_short_backtrace::h99b80dfa4797f5b6\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:171:18\n  14:     0x55a14d653324 - rust_begin_unwind\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:647:5\n  15:     0x55a14d5eecf5 - core::panicking::panic_fmt::h96700527d99a56a9\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/panicking.rs:72:14\n  16:     0x55a14d5eeffb - core::panicking::assert_failed_inner::h88ed53873568fcef\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/panicking.rs:342:17\n  17:     0x55a14d5ef5ba - core::panicking::assert_failed::hb35f7c6aa33d29e8\n  18:     0x55a14d5efa6b - rust_out::main::_doctest_main_url_src_lib_rs_997_0::run::hbefe8b0e3735a1e3\n  19:     0x55a14d5ef7b9 - rust_out::main::_doctest_main_url_src_lib_rs_997_0::ha7bc18b5917175da\n  20:     0x55a14d5ef7a6 - rust_out::main::h11d1a6ed4289a3df\n  21:     0x55a14d5ef4f3 - core::ops::function::FnOnce::call_once::h903f19ac3af5d648\n  22:     0x55a14d5ef3f6 - std::sys_common::backtrace::__rust_begin_short_backtrace::ha11011b11b4aaa1f\n  23:     0x55a14d5ef449 - std::rt::lang_start::{{closure}}::h196360a935ed97d8\n  24:     0x55a14d64e4f3 - core::ops::function::impls::<impl core::ops::function::FnOnce<A> for &F>::call_once::hb12a069c52b9e638\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/ops/function.rs:284:13\n  25:     0x55a14d64e4f3 - std::panicking::try::do_call::h34ba557680a1662c\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:554:40\n  26:     0x55a14d64e4f3 - std::panicking::try::hb88778117e3deeb6\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:518:19\n  27:     0x55a14d64e4f3 - std::panic::catch_unwind::hbd3c1fafc0d9693e\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panic.rs:142:14\n  28:     0x55a14d64e4f3 - std::rt::lang_start_internal::{{closure}}::h0b81b8de0028b6f3\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/rt.rs:148:48\n  29:     0x55a14d64e4f3 - std::panicking::try::do_call::hbbb521b5391ac872\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:554:40\n  30:     0x55a14d64e4f3 - std::panicking::try::hf108a0b7deb842f7\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:518:19\n  31:     0x55a14d64e4f3 - std::panic::catch_unwind::h6451f9c53324fd81\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panic.rs:142:14\n  32:     0x55a14d64e4f3 - std::rt::lang_start_internal::hc6ad905f9af5ea03\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/rt.rs:148:20\n  33:     0x55a14d5ef427 - std::rt::lang_start::h4d1167809e102347\n  34:     0x55a14d5f01f5 - main\n  35:     0x7fb423051cd0 - <unknown>\n  36:     0x7fb423051d8a - __libc_start_main\n  37:     0x55a14d5ef315 - _start\n  38:                0x0 - <unknown>\n\n",
          "killedBy": [
            "url/src/lib.rs - Url::password (line 997)",
            "url/src/lib.rs - Url::set_password (line 2089)"
          ]
        },
        {
          "id": "url/src/lib.rs:2226:31:2226:33:BinaryOperator:-=",
          "duration": 3.6830774909999997,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2226,
              "column": 31
            },
            "end": {
              "line": 2226,
              "column": 33
            }
          },
          "replacement": "-=",
          "status": "Survived",
          "description": "Replace BinaryOperator by -=",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:1816:28:1816:30:BinaryOperator:+=",
          "duration": 5.1875501669999995,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1816,
              "column": 28
            },
            "end": {
              "line": 1816,
              "column": 30
            }
          },
          "replacement": "+=",
          "status": "Survived",
          "description": "Replace BinaryOperator by +=",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:2954:5:2954:57:FnValue:Ok(Default::default())",
          "duration": 4.7315202020000005,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 2954,
              "column": 5
            },
            "end": {
              "line": 2954,
              "column": 57
            }
          },
          "replacement": "Ok(Default::default())",
          "status": "Survived",
          "description": "Replace FnValue by Ok(Default::default())",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:925:52:925:53:BinaryOperator:<",
          "duration": 3.624351067,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 925,
              "column": 52
            },
            "end": {
              "line": 925,
              "column": 53
            }
          },
          "replacement": "<",
          "status": "Killed",
          "description": "Replace BinaryOperator by <",
          "statusReason": "thread 'test_authority' panicked at url/tests/unit.rs:1244:5:\nassertion `left == right` failed\n  left: \"\"\n right: \"example.com\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_authority"
          ]
        },
        {
          "id": "url/src/lib.rs:1090:9:1094:10:FnValue:Some(\"xyzzy\")",
          "duration": 2.417515795,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1090,
              "column": 9
            },
            "end": {
              "line": 1094,
              "column": 10
            }
          },
          "replacement": "Some(\"xyzzy\")",
          "status": "Killed",
          "description": "Replace FnValue by Some(\"xyzzy\")",
          "statusReason": "thread 'host_serialization' panicked at url/tests/unit.rs:344:5:\nassertion `left == right` failed\n  left: Some(\"xyzzy\")\n right: Some(\"[::2]\")\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host_serialization",
            "test_set_ip_host"
          ]
        },
        {
          "id": "url/src/lib.rs:463:13:469:14:FnValue:(\"\", \"\")",
          "duration": 2.467660369,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 463,
              "column": 13
            },
            "end": {
              "line": 469,
              "column": 14
            }
          },
          "replacement": "(\"\", \"\")",
          "status": "Killed",
          "description": "Replace FnValue by (\"\", \"\")",
          "statusReason": "thread 'test_make_relative' panicked at url/tests/unit.rs:1193:9:\nassertion `left == right` failed: base: http://127.0.0.1:8080/test, uri: http://127.0.0.1:8080/test/, relative: test/\n  left: \"\"\n right: \"test/\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_make_relative"
          ]
        },
        {
          "id": "url/src/lib.rs:2964:26:2964:27:BinaryOperator:*",
          "duration": 0.151740917,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2964,
              "column": 26
            },
            "end": {
              "line": 2964,
              "column": 27
            }
          },
          "replacement": "*",
          "status": "CompileError",
          "description": "Replace BinaryOperator by *",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:508:33:508:35:BinaryOperator:&&",
          "duration": 0.705189414,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 508,
              "column": 33
            },
            "end": {
              "line": 508,
              "column": 35
            }
          },
          "replacement": "&&",
          "status": "Killed",
          "description": "Replace BinaryOperator by &&",
          "statusReason": "thread 'test_make_relative' panicked at url/tests/unit.rs:1193:9:\nassertion `left == right` failed: base: http://127.0.0.1:8080/test/, uri: http://127.0.0.1:8080/test/video, relative: video\n  left: \"\"\n right: \"video\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_make_relative"
          ]
        },
        {
          "id": "url/src/lib.rs:1720:20:1720:22:BinaryOperator:*=",
          "duration": 0.854804654,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1720,
              "column": 20
            },
            "end": {
              "line": 1720,
              "column": 22
            }
          },
          "replacement": "*=",
          "status": "Killed",
          "description": "Replace BinaryOperator by *=",
          "statusReason": "thread 'append_empty_segment_then_mutate' panicked at url/tests/unit.rs:496:28:\ncalled `Result::unwrap()` on an `Err` value: \"!( start >= self.path_start ) for URL \\\"http://localhost:6767/foo/bar?a=b\\\"\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "append_empty_segment_then_mutate",
            "extend_query_pairs_then_mutate",
            "append_trailing_slash"
          ]
        },
        {
          "id": "url/src/lib.rs:2155:29:2155:31:BinaryOperator:+=",
          "duration": 1.066967701,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2155,
              "column": 29
            },
            "end": {
              "line": 2155,
              "column": 31
            }
          },
          "replacement": "+=",
          "status": "Killed",
          "description": "Replace BinaryOperator by +=",
          "statusReason": "thread 'test_set_empty_username_and_password' panicked at url/src/lib.rs:2736:11:\nbyte index 16 is out of bounds of `moz://servo/baz`\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_set_empty_username_and_password",
            "test_set_empty_password"
          ]
        },
        {
          "id": "url/src/lib.rs:1829:28:1829:30:BinaryOperator:*=",
          "duration": 2.012274606,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1829,
              "column": 28
            },
            "end": {
              "line": 1829,
              "column": 30
            }
          },
          "replacement": "*=",
          "status": "Survived",
          "description": "Replace BinaryOperator by *=",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:1968:33:1968:34:BinaryOperator:*",
          "duration": 1.3611809419999998,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1968,
              "column": 33
            },
            "end": {
              "line": 1968,
              "column": 34
            }
          },
          "replacement": "*",
          "status": "Killed",
          "description": "Replace BinaryOperator by *",
          "statusReason": "thread 'test_set_empty_host' panicked at url/tests/unit.rs:54:5:\nassertion `left == right` failed\n  left: \"moz/baz\"\n right: \"moz:/baz\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_set_empty_host",
            "test_set_host"
          ]
        },
        {
          "id": "url/src/lib.rs:834:9:834:38:FnValue:\"xyzzy\"",
          "duration": 0.654752434,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 834,
              "column": 9
            },
            "end": {
              "line": 834,
              "column": 38
            }
          },
          "replacement": "\"xyzzy\"",
          "status": "Killed",
          "description": "Replace FnValue by \"xyzzy\"",
          "statusReason": "thread 'issue_61' panicked at url/tests/unit.rs:435:29:\ncalled `Result::unwrap()` on an `Err` value: ()\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "issue_61",
            "path_backslash_fun",
            "test_file_with_drive",
            "test_options_reuse",
            "test_origin_blob_equality",
            "test_make_relative",
            "test_origin_unicode_serialization",
            "test_set_empty_host",
            "test_set_host",
            "test_socket_addrs"
          ]
        },
        {
          "id": "url/src/lib.rs:2241:20:2241:22:BinaryOperator:*=",
          "duration": 0.653938525,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2241,
              "column": 20
            },
            "end": {
              "line": 2241,
              "column": 22
            }
          },
          "replacement": "*=",
          "status": "Killed",
          "description": "Replace BinaryOperator by *=",
          "statusReason": "thread 'test_set_empty_host' panicked at url/src/lib.rs:2627:9:\nindex out of bounds: the len is 20 but the index is 60\n",
          "killedBy": [
            "test_set_empty_host",
            "test_set_empty_username_and_password"
          ]
        },
        {
          "id": "url/src/lib.rs:684:57:684:58:BinaryOperator:*",
          "duration": 0.8623997809999999,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 684,
              "column": 57
            },
            "end": {
              "line": 684,
              "column": 58
            }
          },
          "replacement": "*",
          "status": "Killed",
          "description": "Replace BinaryOperator by *",
          "statusReason": "thread 'extend_query_pairs_then_mutate' panicked at url/src/lib.rs:687:50:\nCouldn't parse port?: ParseIntError { kind: InvalidDigit }\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "extend_query_pairs_then_mutate",
            "append_empty_segment_then_mutate",
            "append_trailing_slash"
          ]
        },
        {
          "id": "url/src/lib.rs:1193:9:1193:18:FnValue:Some(0)",
          "duration": 0.96287489,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1193,
              "column": 9
            },
            "end": {
              "line": 1193,
              "column": 18
            }
          },
          "replacement": "Some(0)",
          "status": "Killed",
          "description": "Replace FnValue by Some(0)",
          "statusReason": "thread 'test_make_relative' panicked at url/tests/unit.rs:1219:9:\nassertion `left == right` failed: base: http://127.0.0.1:8080/, uri: http://127.0.0.1:8081/test/\n  left: Some(\"test/\")\n right: None\n",
          "killedBy": [
            "test_make_relative",
            "issue_61",
            "test_syntax_violation_callback_lifetimes",
            "test_syntax_violation_callback"
          ]
        },
        {
          "id": "url/src/lib.rs:2604:42:2604:44:BinaryOperator:||",
          "duration": 2.7105418009999998,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2604,
              "column": 42
            },
            "end": {
              "line": 2604,
              "column": 44
            }
          },
          "replacement": "||",
          "status": "Survived",
          "description": "Replace BinaryOperator by ||",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:985:9:990:10:FnValue:\"xyzzy\"",
          "duration": 2.860888085,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 985,
              "column": 9
            },
            "end": {
              "line": 990,
              "column": 10
            }
          },
          "replacement": "\"xyzzy\"",
          "status": "Killed",
          "description": "Replace FnValue by \"xyzzy\"",
          "statusReason": "thread 'no_panic' panicked at url/tests/unit.rs:990:79:\ncalled `Result::unwrap()` on an `Err` value: ()\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "no_panic",
            "test_set_empty_hostname"
          ]
        },
        {
          "id": "url/src/lib.rs:1980:24:1980:26:BinaryOperator:/=",
          "duration": 3.219949299,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1980,
              "column": 24
            },
            "end": {
              "line": 1980,
              "column": 26
            }
          },
          "replacement": "/=",
          "status": "Survived",
          "description": "Replace BinaryOperator by /=",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:2970:83:2970:85:BinaryOperator:==",
          "duration": 4.034215069,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2970,
              "column": 83
            },
            "end": {
              "line": 2970,
              "column": 85
            }
          },
          "replacement": "==",
          "status": "Survived",
          "description": "Replace BinaryOperator by ==",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:1161:9:1164:10:FnValue:Some(\"\")",
          "duration": 2.727428104,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1161,
              "column": 9
            },
            "end": {
              "line": 1164,
              "column": 10
            }
          },
          "replacement": "Some(\"\")",
          "status": "Killed",
          "description": "Replace FnValue by Some(\"\")",
          "statusReason": "thread 'test_domain' panicked at url/tests/unit.rs:678:5:\nassertion `left == right` failed\n  left: Some(\"\")\n right: None\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_domain",
            "test_leading_dots"
          ]
        },
        {
          "id": "url/src/lib.rs:2145:50:2145:51:BinaryOperator:-",
          "duration": 3.1773122700000003,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2145,
              "column": 50
            },
            "end": {
              "line": 2145,
              "column": 51
            }
          },
          "replacement": "-",
          "status": "Killed",
          "description": "Replace BinaryOperator by -",
          "statusReason": "thread 'test_set_empty_username_and_password' panicked at url/tests/unit.rs:74:5:\nassertion `left == right` failed\n  left: \"moz://@servo/baz\"\n right: \"moz://servo/baz\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_set_empty_username_and_password"
          ]
        },
        {
          "id": "url/src/lib.rs:2233:29:2233:31:BinaryOperator:*=",
          "duration": 4.888307104,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2233,
              "column": 29
            },
            "end": {
              "line": 2233,
              "column": 31
            }
          },
          "replacement": "*=",
          "status": "Survived",
          "description": "Replace BinaryOperator by *=",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:2503:9:2530:35:FnValue:Ok(Default::default())",
          "duration": 4.929436933,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 2503,
              "column": 9
            },
            "end": {
              "line": 2530,
              "column": 35
            }
          },
          "replacement": "Ok(Default::default())",
          "status": "Survived",
          "description": "Replace FnValue by Ok(Default::default())",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:2622:9:2622:44:FnValue:\"xyzzy\"",
          "duration": 2.77384385,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 2622,
              "column": 9
            },
            "end": {
              "line": 2622,
              "column": 44
            }
          },
          "replacement": "\"xyzzy\"",
          "status": "Killed",
          "description": "Replace FnValue by \"xyzzy\"",
          "statusReason": "thread 'append_empty_segment_then_mutate' panicked at url/tests/unit.rs:494:28:\ncalled `Result::unwrap()` on an `Err` value: \"7 != 5 (self.username_end != self.scheme_end + 1) for URL \\\"http://localhost:6767/foo/bar?a=b\\\"\"\n",
          "killedBy": [
            "append_empty_segment_then_mutate",
            "append_trailing_slash",
            "host",
            "extend_query_pairs_then_mutate",
            "host_serialization",
            "issue_124",
            "issue_197",
            "issue_61",
            "new_directory_paths",
            "new_file_paths",
            "new_path_bad_utf8",
            "no_panic",
            "path_backslash_fun",
            "pop_if_empty_in_bounds",
            "test_authority",
            "test_domain",
            "test_file_with_drive",
            "test_file_with_drive_and_path",
            "test_fragment",
            "test_has_authority",
            "test_idna",
            "test_leading_dots",
            "test_make_relative",
            "test_no_base_url",
            "test_non_special_path2",
            "test_non_special_path3",
            "test_options_reuse",
            "test_non_special_path",
            "test_origin_blob_equality",
            "test_origin_unicode_serialization",
            "test_query",
            "test_relative",
            "test_relative_empty",
            "test_set_empty_host",
            "test_set_empty_hostname",
            "test_set_empty_username_and_password",
            "test_set_host",
            "test_set_ip_host",
            "test_slicing",
            "test_socket_addrs",
            "test_syntax_violation_callback_lifetimes",
            "test_url_from_file_path"
          ]
        },
        {
          "id": "url/src/lib.rs:652:39:652:40:BinaryOperator:-",
          "duration": 1.342073336,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 652,
              "column": 39
            },
            "end": {
              "line": 652,
              "column": 40
            }
          },
          "replacement": "-",
          "status": "Killed",
          "description": "Replace BinaryOperator by -",
          "statusReason": "thread 'append_empty_segment_then_mutate' panicked at url/tests/unit.rs:494:28:\ncalled `Result::unwrap()` on an `Err` value: \"7 != 5 (self.username_end != self.scheme_end + 1) for URL \\\"http://localhost:6767/foo/bar?a=b\\\"\"\n",
          "killedBy": [
            "append_empty_segment_then_mutate",
            "append_trailing_slash",
            "extend_query_pairs_then_mutate",
            "issue_197",
            "issue_61"
          ]
        },
        {
          "id": "url/src/lib.rs:2931:20:2931:21:BinaryOperator:<",
          "duration": 0.704953956,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2931,
              "column": 20
            },
            "end": {
              "line": 2931,
              "column": 21
            }
          },
          "replacement": "<",
          "status": "Killed",
          "description": "Replace BinaryOperator by <",
          "statusReason": "thread 'test_url_from_file_path' panicked at url/tests/unit.rs:940:5:\nassertion `left == right` failed\n  left: \"/c:/\"\n right: \"/c:\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_url_from_file_path"
          ]
        },
        {
          "id": "url/src/lib.rs:1458:9:1461:11:FnValue:Some(\"\")",
          "duration": 1.012175582,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1458,
              "column": 9
            },
            "end": {
              "line": 1461,
              "column": 11
            }
          },
          "replacement": "Some(\"\")",
          "status": "Killed",
          "description": "Replace FnValue by Some(\"\")",
          "statusReason": "thread 'test_fragment' panicked at url/tests/unit.rs:724:5:\nassertion `left == right` failed\n  left: Some(\"\")\n right: Some(\"fragment\")\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_fragment",
            "test_make_relative"
          ]
        },
        {
          "id": "url/src/lib.rs:1020:9:1028:10:FnValue:Some(\"\")",
          "duration": 2.4636640250000004,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1020,
              "column": 9
            },
            "end": {
              "line": 1028,
              "column": 10
            }
          },
          "replacement": "Some(\"\")",
          "status": "Killed",
          "description": "Replace FnValue by Some(\"\")",
          "statusReason": "thread 'test_set_empty_hostname' panicked at url/tests/unit.rs:100:5:\nsetting an empty hostname to a url with a password should fail\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_set_empty_hostname"
          ]
        },
        {
          "id": "url/src/lib.rs:1966:33:1966:34:BinaryOperator:-",
          "duration": 2.04582027,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1966,
              "column": 33
            },
            "end": {
              "line": 1966,
              "column": 34
            }
          },
          "replacement": "-",
          "status": "Killed",
          "description": "Replace BinaryOperator by -",
          "statusReason": "thread 'test_set_empty_host' panicked at url/tests/unit.rs:60:5:\nassertion `left == right` failed\n  left: \"f/share/foo/bar\"\n right: \"file:///share/foo/bar\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_set_empty_host"
          ]
        },
        {
          "id": "url/src/lib.rs:2389:20:2389:22:BinaryOperator:-=",
          "duration": 1.570344353,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2389,
              "column": 20
            },
            "end": {
              "line": 2389,
              "column": 22
            }
          },
          "replacement": "-=",
          "status": "Killed",
          "description": "Replace BinaryOperator by -=",
          "statusReason": "thread 'issue_61' panicked at url/src/lib.rs:2389:13:\nattempt to subtract with overflow\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "issue_61"
          ]
        },
        {
          "id": "url/src/lib.rs:2004:29:2004:31:BinaryOperator:*=",
          "duration": 3.373830985,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2004,
              "column": 29
            },
            "end": {
              "line": 2004,
              "column": 31
            }
          },
          "replacement": "*=",
          "status": "Survived",
          "description": "Replace BinaryOperator by *=",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:1225:9:1225:66:FnValue:Some(0)",
          "duration": 1.562164493,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1225,
              "column": 9
            },
            "end": {
              "line": 1225,
              "column": 66
            }
          },
          "replacement": "Some(0)",
          "status": "Killed",
          "description": "Replace FnValue by Some(0)",
          "statusReason": "thread 'test_origin_unicode_serialization' panicked at url/tests/unit.rs:599:9:\nassertion `left == right` failed\n  left: \"http://😅.com:0\"\n right: \"http://😅.com\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_origin_unicode_serialization",
            "issue_61",
            "test_socket_addrs"
          ]
        },
        {
          "id": "url/src/lib.rs:959:37:959:38:BinaryOperator:*",
          "duration": 1.9863266030000002,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 959,
              "column": 37
            },
            "end": {
              "line": 959,
              "column": 38
            }
          },
          "replacement": "*",
          "status": "Killed",
          "description": "Replace BinaryOperator by *",
          "statusReason": "thread 'test_file_with_drive' panicked at url/tests/unit.rs:1285:49:\ncalled `Result::unwrap()` on an `Err` value: RelativeUrlWithCannotBeABaseBase\n",
          "killedBy": [
            "test_file_with_drive",
            "pop_if_empty_in_bounds",
            "path_backslash_fun",
            "append_trailing_slash",
            "test_file_with_drive_and_path",
            "extend_query_pairs_then_mutate",
            "no_panic",
            "append_empty_segment_then_mutate",
            "test_make_relative",
            "issue_197",
            "test_non_special_path",
            "test_non_special_path2",
            "test_relative",
            "test_set_host",
            "test_options_reuse",
            "test_set_empty_host",
            "test_set_empty_hostname",
            "test_non_special_path3",
            "test_set_ip_host",
            "test_relative_empty"
          ]
        },
        {
          "id": "url/src/lib.rs:959:9:959:60:FnValue:true",
          "duration": 2.0617411399999996,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 959,
              "column": 9
            },
            "end": {
              "line": 959,
              "column": 60
            }
          },
          "replacement": "true",
          "status": "Killed",
          "description": "Replace FnValue by true",
          "statusReason": "thread 'append_empty_segment_then_mutate' panicked at url/tests/unit.rs:495:29:\ncalled `Result::unwrap()` on an `Err` value: ()\n",
          "killedBy": [
            "append_empty_segment_then_mutate",
            "append_trailing_slash",
            "extend_query_pairs_then_mutate",
            "issue_197",
            "no_panic",
            "path_backslash_fun",
            "pop_if_empty_in_bounds",
            "test_file_with_drive",
            "test_file_with_drive_and_path",
            "test_make_relative",
            "test_non_special_path",
            "test_non_special_path2",
            "test_non_special_path3",
            "test_options_reuse",
            "test_relative",
            "test_relative_empty",
            "test_set_empty_host",
            "test_set_empty_hostname",
            "test_set_host",
            "test_set_ip_host"
          ]
        },
        {
          "id": "url/src/lib.rs:2206:29:2206:31:BinaryOperator:&&",
          "duration": 3.3811530640000003,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2206,
              "column": 29
            },
            "end": {
              "line": 2206,
              "column": 31
            }
          },
          "replacement": "&&",
          "status": "Killed",
          "description": "Replace BinaryOperator by &&",
          "statusReason": "Test executable failed (exit status: 101).\n\nstderr:\nthread 'main' panicked at url/src/lib.rs:2210:9:\nassertion failed: self.slice(self.scheme_end..username_start) == \"://\"\nstack backtrace:\n   0:     0x562615a3b416 - std::backtrace_rs::backtrace::libunwind::trace::h5aa1f3f50fd6005d\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/../../backtrace/src/backtrace/libunwind.rs:104:5\n   1:     0x562615a3b416 - std::backtrace_rs::backtrace::trace_unsynchronized::h39f759d0ceaa839b\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/../../backtrace/src/backtrace/mod.rs:66:5\n   2:     0x562615a3b416 - std::sys_common::backtrace::_print_fmt::hfd4aa038a1413f7f\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:68:5\n   3:     0x562615a3b416 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::ha47fba1de44cec55\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:44:22\n   4:     0x562615a58d2c - core::fmt::rt::Argument::fmt::h375396e1292b08cb\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/fmt/rt.rs:142:9\n   5:     0x562615a58d2c - core::fmt::write::h93e0b545aa9eb320\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/fmt/mod.rs:1120:17\n   6:     0x562615a3962f - std::io::Write::write_fmt::h97fad0674ecdf154\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/io/mod.rs:1854:15\n   7:     0x562615a3b1c4 - std::sys_common::backtrace::_print::hb7626a1b4ea382df\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:47:5\n   8:     0x562615a3b1c4 - std::sys_common::backtrace::print::h89f2abc5b98b82a2\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:34:9\n   9:     0x562615a3c6bb - std::panicking::default_hook::{{closure}}::h73fe684137831048\n  10:     0x562615a3c409 - std::panicking::default_hook::h8dfe6e62b35915a0\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:292:9\n  11:     0x562615a3cb5d - std::panicking::rust_panic_with_hook::hc33e259baf535986\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:781:13\n  12:     0x562615a3c9f9 - std::panicking::begin_panic_handler::{{closure}}::hcfbf8e29c9418131\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:651:13\n  13:     0x562615a3b8f6 - std::sys_common::backtrace::__rust_end_short_backtrace::h99b80dfa4797f5b6\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:171:18\n  14:     0x562615a3c764 - rust_begin_unwind\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:647:5\n  15:     0x5626159d7cf5 - core::panicking::panic_fmt::h96700527d99a56a9\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/panicking.rs:72:14\n  16:     0x5626159d7db3 - core::panicking::panic::h7546f881b5ccb4b7\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/panicking.rs:144:5\n  17:     0x5626159d9be8 - url::Url::set_username::h7d271363f6ea1c1c\n                               at /tmp/cargo-mutants-rust-url-BwtvY2.tmp/url/src/lib.rs:2210:9\n  18:     0x5626159d893b - rust_out::main::_doctest_main_url_src_lib_rs_2175_0::run::hf99955e0ccbbbaf1\n  19:     0x5626159d87a9 - rust_out::main::_doctest_main_url_src_lib_rs_2175_0::hbf792a0e486eae00\n  20:     0x5626159d8796 - rust_out::main::h11d1a6ed4289a3df\n  21:     0x5626159d84f3 - core::ops::function::FnOnce::call_once::h903f19ac3af5d648\n  22:     0x5626159d83f6 - std::sys_common::backtrace::__rust_begin_short_backtrace::ha11011b11b4aaa1f\n  23:     0x5626159d8449 - std::rt::lang_start::{{closure}}::h196360a935ed97d8\n  24:     0x562615a37933 - core::ops::function::impls::<impl core::ops::function::FnOnce<A> for &F>::call_once::hb12a069c52b9e638\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/ops/function.rs:284:13\n  25:     0x562615a37933 - std::panicking::try::do_call::h34ba557680a1662c\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:554:40\n  26:     0x562615a37933 - std::panicking::try::hb88778117e3deeb6\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:518:19\n  27:     0x562615a37933 - std::panic::catch_unwind::hbd3c1fafc0d9693e\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panic.rs:142:14\n  28:     0x562615a37933 - std::rt::lang_start_internal::{{closure}}::h0b81b8de0028b6f3\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/rt.rs:148:48\n  29:     0x562615a37933 - std::panicking::try::do_call::hbbb521b5391ac872\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:554:40\n  30:     0x562615a37933 - std::panicking::try::hf108a0b7deb842f7\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:518:19\n  31:     0x562615a37933 - std::panic::catch_unwind::h6451f9c53324fd81\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panic.rs:142:14\n  32:     0x562615a37933 - std::rt::lang_start_internal::hc6ad905f9af5ea03\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/rt.rs:148:20\n  33:     0x5626159d8427 - std::rt::lang_start::h4d1167809e102347\n  34:     0x5626159d8ae5 - main\n  35:     0x7f07bd326cd0 - <unknown>\n  36:     0x7f07bd326d8a - __libc_start_main\n  37:     0x5626159d8315 - _start\n  38:                0x0 - <unknown>\n\n",
          "killedBy": [
            "url/src/lib.rs - Url::set_username (line 2175)"
          ]
        },
        {
          "id": "url/src/lib.rs:2127:24:2127:26:BinaryOperator:/=",
          "duration": 3.3178075060000003,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2127,
              "column": 24
            },
            "end": {
              "line": 2127,
              "column": 26
            }
          },
          "replacement": "/=",
          "status": "Survived",
          "description": "Replace BinaryOperator by /=",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:854:9:855:33:FnValue:false",
          "duration": 3.916034576,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 854,
              "column": 9
            },
            "end": {
              "line": 855,
              "column": 33
            }
          },
          "replacement": "false",
          "status": "Killed",
          "description": "Replace FnValue by false",
          "statusReason": "Test executable failed (exit status: 101).\n\nstderr:\nthread 'main' panicked at url/src/lib.rs:9:1:\nassertion failed: Url::parse(\"http:///tmp/foo\")?.is_special()\nstack backtrace:\n   0:     0x55c76746a776 - std::backtrace_rs::backtrace::libunwind::trace::h5aa1f3f50fd6005d\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/../../backtrace/src/backtrace/libunwind.rs:104:5\n   1:     0x55c76746a776 - std::backtrace_rs::backtrace::trace_unsynchronized::h39f759d0ceaa839b\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/../../backtrace/src/backtrace/mod.rs:66:5\n   2:     0x55c76746a776 - std::sys_common::backtrace::_print_fmt::hfd4aa038a1413f7f\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:68:5\n   3:     0x55c76746a776 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::ha47fba1de44cec55\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:44:22\n   4:     0x55c76748808c - core::fmt::rt::Argument::fmt::h375396e1292b08cb\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/fmt/rt.rs:142:9\n   5:     0x55c76748808c - core::fmt::write::h93e0b545aa9eb320\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/fmt/mod.rs:1120:17\n   6:     0x55c76746898f - std::io::Write::write_fmt::h97fad0674ecdf154\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/io/mod.rs:1854:15\n   7:     0x55c76746a524 - std::sys_common::backtrace::_print::hb7626a1b4ea382df\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:47:5\n   8:     0x55c76746a524 - std::sys_common::backtrace::print::h89f2abc5b98b82a2\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:34:9\n   9:     0x55c76746ba1b - std::panicking::default_hook::{{closure}}::h73fe684137831048\n  10:     0x55c76746b769 - std::panicking::default_hook::h8dfe6e62b35915a0\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:292:9\n  11:     0x55c76746bebd - std::panicking::rust_panic_with_hook::hc33e259baf535986\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:781:13\n  12:     0x55c76746bd59 - std::panicking::begin_panic_handler::{{closure}}::hcfbf8e29c9418131\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:651:13\n  13:     0x55c76746ac56 - std::sys_common::backtrace::__rust_end_short_backtrace::h99b80dfa4797f5b6\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:171:18\n  14:     0x55c76746bac4 - rust_begin_unwind\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:647:5\n  15:     0x55c767407cf5 - core::panicking::panic_fmt::h96700527d99a56a9\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/panicking.rs:72:14\n  16:     0x55c767407db3 - core::panicking::panic::h7546f881b5ccb4b7\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/panicking.rs:144:5\n  17:     0x55c76740888e - rust_out::main::_doctest_main_url_src_lib_rs_841_0::run::h42906a69aff30c7d\n  18:     0x55c767408699 - rust_out::main::_doctest_main_url_src_lib_rs_841_0::h21fe41c50f8038f4\n  19:     0x55c767408686 - rust_out::main::h11d1a6ed4289a3df\n  20:     0x55c7674084c3 - core::ops::function::FnOnce::call_once::h903f19ac3af5d648\n  21:     0x55c7674083f6 - std::sys_common::backtrace::__rust_begin_short_backtrace::ha11011b11b4aaa1f\n  22:     0x55c767408449 - std::rt::lang_start::{{closure}}::h196360a935ed97d8\n  23:     0x55c767466c93 - core::ops::function::impls::<impl core::ops::function::FnOnce<A> for &F>::call_once::hb12a069c52b9e638\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/ops/function.rs:284:13\n  24:     0x55c767466c93 - std::panicking::try::do_call::h34ba557680a1662c\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:554:40\n  25:     0x55c767466c93 - std::panicking::try::hb88778117e3deeb6\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:518:19\n  26:     0x55c767466c93 - std::panic::catch_unwind::hbd3c1fafc0d9693e\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panic.rs:142:14\n  27:     0x55c767466c93 - std::rt::lang_start_internal::{{closure}}::h0b81b8de0028b6f3\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/rt.rs:148:48\n  28:     0x55c767466c93 - std::panicking::try::do_call::hbbb521b5391ac872\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:554:40\n  29:     0x55c767466c93 - std::panicking::try::hf108a0b7deb842f7\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:518:19\n  30:     0x55c767466c93 - std::panic::catch_unwind::h6451f9c53324fd81\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panic.rs:142:14\n  31:     0x55c767466c93 - std::rt::lang_start_internal::hc6ad905f9af5ea03\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/rt.rs:148:20\n  32:     0x55c767408427 - std::rt::lang_start::h4d1167809e102347\n  33:     0x55c767408c55 - main\n  34:     0x7f22ce74ecd0 - <unknown>\n  35:     0x7f22ce74ed8a - __libc_start_main\n  36:     0x55c767408315 - _start\n  37:                0x0 - <unknown>\n\n",
          "killedBy": [
            "url/src/lib.rs - Url::is_special (line 841)"
          ]
        },
        {
          "id": "url/src/lib.rs:2128:24:2128:26:BinaryOperator:-=",
          "duration": 4.128902699999999,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2128,
              "column": 24
            },
            "end": {
              "line": 2128,
              "column": 26
            }
          },
          "replacement": "-=",
          "status": "Killed",
          "description": "Replace BinaryOperator by -=",
          "statusReason": "Test executable failed (exit status: 101).\n\nstderr:\nthread 'main' panicked at url/src/lib.rs:2128:17:\nattempt to subtract with overflow\nstack backtrace:\n   0:     0x5615da2acd06 - std::backtrace_rs::backtrace::libunwind::trace::h5aa1f3f50fd6005d\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/../../backtrace/src/backtrace/libunwind.rs:104:5\n   1:     0x5615da2acd06 - std::backtrace_rs::backtrace::trace_unsynchronized::h39f759d0ceaa839b\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/../../backtrace/src/backtrace/mod.rs:66:5\n   2:     0x5615da2acd06 - std::sys_common::backtrace::_print_fmt::hfd4aa038a1413f7f\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:68:5\n   3:     0x5615da2acd06 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::ha47fba1de44cec55\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:44:22\n   4:     0x5615da2ca61c - core::fmt::rt::Argument::fmt::h375396e1292b08cb\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/fmt/rt.rs:142:9\n   5:     0x5615da2ca61c - core::fmt::write::h93e0b545aa9eb320\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/fmt/mod.rs:1120:17\n   6:     0x5615da2aaf1f - std::io::Write::write_fmt::h97fad0674ecdf154\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/io/mod.rs:1854:15\n   7:     0x5615da2acab4 - std::sys_common::backtrace::_print::hb7626a1b4ea382df\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:47:5\n   8:     0x5615da2acab4 - std::sys_common::backtrace::print::h89f2abc5b98b82a2\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:34:9\n   9:     0x5615da2adfab - std::panicking::default_hook::{{closure}}::h73fe684137831048\n  10:     0x5615da2adcf9 - std::panicking::default_hook::h8dfe6e62b35915a0\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:292:9\n  11:     0x5615da2ae44d - std::panicking::rust_panic_with_hook::hc33e259baf535986\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:781:13\n  12:     0x5615da2ae2e9 - std::panicking::begin_panic_handler::{{closure}}::hcfbf8e29c9418131\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:651:13\n  13:     0x5615da2ad1e6 - std::sys_common::backtrace::__rust_end_short_backtrace::h99b80dfa4797f5b6\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:171:18\n  14:     0x5615da2ae054 - rust_begin_unwind\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:647:5\n  15:     0x5615da248cf5 - core::panicking::panic_fmt::h96700527d99a56a9\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/panicking.rs:72:14\n  16:     0x5615da248db3 - core::panicking::panic::h7546f881b5ccb4b7\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/panicking.rs:144:5\n  17:     0x5615da265123 - url::Url::set_password::{{closure}}::h636b21e36c86e3eb\n                               at /tmp/cargo-mutants-rust-url-BwtvY2.tmp/url/src/lib.rs:2128:17\n  18:     0x5615da24b48a - url::Url::set_password::h4826a6d26a116197\n                               at /tmp/cargo-mutants-rust-url-BwtvY2.tmp/url/src/lib.rs:2131:13\n  19:     0x5615da249ba0 - rust_out::main::_doctest_main_url_src_lib_rs_2089_0::run::h0992009814c957b3\n  20:     0x5615da2497f9 - rust_out::main::_doctest_main_url_src_lib_rs_2089_0::hb33324d073b7cdb7\n  21:     0x5615da2497e6 - rust_out::main::h11d1a6ed4289a3df\n  22:     0x5615da2494f3 - core::ops::function::FnOnce::call_once::h903f19ac3af5d648\n  23:     0x5615da2493f6 - std::sys_common::backtrace::__rust_begin_short_backtrace::ha11011b11b4aaa1f\n  24:     0x5615da249449 - std::rt::lang_start::{{closure}}::h196360a935ed97d8\n  25:     0x5615da2a9223 - core::ops::function::impls::<impl core::ops::function::FnOnce<A> for &F>::call_once::hb12a069c52b9e638\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/ops/function.rs:284:13\n  26:     0x5615da2a9223 - std::panicking::try::do_call::h34ba557680a1662c\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:554:40\n  27:     0x5615da2a9223 - std::panicking::try::hb88778117e3deeb6\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:518:19\n  28:     0x5615da2a9223 - std::panic::catch_unwind::hbd3c1fafc0d9693e\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panic.rs:142:14\n  29:     0x5615da2a9223 - std::rt::lang_start_internal::{{closure}}::h0b81b8de0028b6f3\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/rt.rs:148:48\n  30:     0x5615da2a9223 - std::panicking::try::do_call::hbbb521b5391ac872\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:554:40\n  31:     0x5615da2a9223 - std::panicking::try::hf108a0b7deb842f7\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:518:19\n  32:     0x5615da2a9223 - std::panic::catch_unwind::h6451f9c53324fd81\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panic.rs:142:14\n  33:     0x5615da2a9223 - std::rt::lang_start_internal::hc6ad905f9af5ea03\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/rt.rs:148:20\n  34:     0x5615da249427 - std::rt::lang_start::h4d1167809e102347\n  35:     0x5615da24a015 - main\n  36:     0x7f798d80acd0 - <unknown>\n  37:     0x7f798d80ad8a - __libc_start_main\n  38:     0x5615da249315 - _start\n  39:                0x0 - <unknown>\n\n",
          "killedBy": [
            "url/src/lib.rs - Url::set_password (line 2089)"
          ]
        },
        {
          "id": "url/src/lib.rs:2894:28:2894:29:BinaryOperator:==",
          "duration": 4.338684193,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2894,
              "column": 28
            },
            "end": {
              "line": 2894,
              "column": 29
            }
          },
          "replacement": "==",
          "status": "Survived",
          "description": "Replace BinaryOperator by ==",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:959:9:959:60:FnValue:false",
          "duration": 2.947478641,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 959,
              "column": 9
            },
            "end": {
              "line": 959,
              "column": 60
            }
          },
          "replacement": "false",
          "status": "Killed",
          "description": "Replace FnValue by false",
          "statusReason": "thread 'test_make_relative' panicked at url/tests/unit.rs:1219:9:\nassertion `left == right` failed: base: mailto:a@example.com, uri: mailto:b@example.com\n  left: Some(\"\")\n right: None\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_make_relative",
            "test_no_base_url",
            "test_strip_trailing_spaces_from_opaque_path"
          ]
        },
        {
          "id": "url/src/lib.rs:2159:24:2159:26:BinaryOperator:/=",
          "duration": 4.530200289,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2159,
              "column": 24
            },
            "end": {
              "line": 2159,
              "column": 26
            }
          },
          "replacement": "/=",
          "status": "Survived",
          "description": "Replace BinaryOperator by /=",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:1129:9:1134:10:FnValue:None",
          "duration": 4.0873451649999994,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1129,
              "column": 9
            },
            "end": {
              "line": 1134,
              "column": 10
            }
          },
          "replacement": "None",
          "status": "Killed",
          "description": "Replace FnValue by None",
          "statusReason": "thread 'host' panicked at url/tests/unit.rs:301:9:\nassertion `left == right` failed\n  left: None\n right: Some(Domain(\"www.mozilla.org\"))\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host",
            "test_idna",
            "test_make_relative",
            "test_origin_hash",
            "test_origin_blob_equality",
            "test_origin_unicode_serialization",
            "test_socket_addrs"
          ]
        },
        {
          "id": "url/src/lib.rs:358:32:358:34:BinaryOperator:!=",
          "duration": 0.759519687,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 358,
              "column": 32
            },
            "end": {
              "line": 358,
              "column": 34
            }
          },
          "replacement": "!=",
          "status": "Killed",
          "description": "Replace BinaryOperator by !=",
          "statusReason": "thread 'test_strip_trailing_spaces_from_opaque_path' panicked at url/tests/unit.rs:41:5:\nassertion `left == right` failed\n  left: \"data:space   \"\n right: \"data:space\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_strip_trailing_spaces_from_opaque_path"
          ]
        },
        {
          "id": "url/src/lib.rs:2743:9:2743:34:FnValue:\"xyzzy\"",
          "duration": 0.806953501,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 2743,
              "column": 9
            },
            "end": {
              "line": 2743,
              "column": 34
            }
          },
          "replacement": "\"xyzzy\"",
          "status": "Killed",
          "description": "Replace FnValue by \"xyzzy\"",
          "statusReason": "thread 'no_panic' panicked at url/tests/unit.rs:990:79:\ncalled `Result::unwrap()` on an `Err` value: ()\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "no_panic",
            "extend_query_pairs_then_mutate",
            "issue_197",
            "pop_if_empty_in_bounds",
            "test_non_special_path2",
            "new_file_paths",
            "test_query",
            "test_file_with_drive",
            "test_file_with_drive_and_path",
            "issue_124",
            "test_fragment",
            "test_has_authority",
            "append_trailing_slash",
            "issue_61",
            "append_empty_segment_then_mutate",
            "new_directory_paths",
            "test_authority",
            "new_path_bad_utf8",
            "test_origin_blob_equality",
            "path_backslash_fun",
            "test_relative",
            "test_non_special_path3",
            "test_set_empty_host",
            "test_relative_empty",
            "test_set_scheme_to_file_with_host",
            "test_set_empty_username_and_password",
            "test_url_from_file_path",
            "test_options_reuse",
            "test_make_relative",
            "test_slicing",
            "test_no_base_url",
            "test_set_host",
            "test_set_ip_host",
            "test_set_empty_hostname",
            "test_syntax_violation_callback_lifetimes",
            "test_non_special_path"
          ]
        },
        {
          "id": "url/src/lib.rs:2736:9:2736:51:FnValue:\"xyzzy\"",
          "duration": 5.187281584,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 2736,
              "column": 9
            },
            "end": {
              "line": 2736,
              "column": 51
            }
          },
          "replacement": "\"xyzzy\"",
          "status": "Killed",
          "description": "Replace FnValue by \"xyzzy\"",
          "statusReason": "thread 'append_empty_segment_then_mutate' panicked at url/src/lib.rs:687:50:\nCouldn't parse port?: ParseIntError { kind: InvalidDigit }\n",
          "killedBy": [
            "append_empty_segment_then_mutate",
            "extend_query_pairs_then_mutate",
            "append_trailing_slash",
            "host",
            "host_serialization",
            "issue_197",
            "no_panic",
            "test_authority",
            "test_domain",
            "test_file_with_drive",
            "test_file_with_drive_and_path",
            "test_idna",
            "test_leading_dots",
            "test_make_relative",
            "test_origin_unicode_serialization",
            "test_query",
            "test_set_empty_username_and_password",
            "test_set_ip_host",
            "test_set_empty_host",
            "test_socket_addrs"
          ]
        },
        {
          "id": "url/src/lib.rs:1354:9:1355:69:FnValue:None",
          "duration": 2.287351292,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1354,
              "column": 9
            },
            "end": {
              "line": 1355,
              "column": 69
            }
          },
          "replacement": "None",
          "status": "Killed",
          "description": "Replace FnValue by None",
          "statusReason": "thread 'new_file_paths' panicked at url/tests/unit.rs:146:9:\nassertion `left == right` failed\n  left: Err(())\n right: Ok(\"/foo/bar\")\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "new_file_paths",
            "new_path_bad_utf8",
            "test_url_from_file_path"
          ]
        },
        {
          "id": "url/src/lib.rs:1933:60:1933:62:BinaryOperator:||",
          "duration": 1.6680417580000002,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1933,
              "column": 60
            },
            "end": {
              "line": 1933,
              "column": 62
            }
          },
          "replacement": "||",
          "status": "Killed",
          "description": "Replace BinaryOperator by ||",
          "statusReason": "thread 'test_set_empty_host' panicked at url/tests/unit.rs:55:34:\ncalled `Result::unwrap()` on an `Err` value: EmptyHost\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_set_empty_host",
            "test_set_host"
          ]
        },
        {
          "id": "url/src/lib.rs:1354:9:1355:69:FnValue:Some(Split::new())",
          "duration": 0.611048523,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1354,
              "column": 9
            },
            "end": {
              "line": 1355,
              "column": 69
            }
          },
          "replacement": "Some(Split::new())",
          "status": "CompileError",
          "description": "Replace FnValue by Some(Split::new())",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:1512:9:1517:11:FnValue:Some(String::new())",
          "duration": 1.716450385,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1512,
              "column": 9
            },
            "end": {
              "line": 1517,
              "column": 11
            }
          },
          "replacement": "Some(String::new())",
          "status": "Killed",
          "description": "Replace FnValue by Some(String::new())",
          "statusReason": "thread 'extend_query_pairs_then_mutate' panicked at url/tests/unit.rs:478:5:\nassertion `left == right` failed\n  left: \"http://localhost:6767/foo/bar?auth=my-token#\"\n right: \"http://localhost:6767/foo/bar?auth=my-token\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "extend_query_pairs_then_mutate",
            "parse_with_params",
            "test_set_empty_query",
            "test_strip_trailing_spaces_from_opaque_path"
          ]
        },
        {
          "id": "url/src/lib.rs:2717:9:2717:53:FnValue:()",
          "duration": 4.068912712,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 2717,
              "column": 9
            },
            "end": {
              "line": 2717,
              "column": 53
            }
          },
          "replacement": "()",
          "status": "Survived",
          "description": "Replace FnValue by ()",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:2784:17:2784:68:FnValue:Ok(Default::default())",
          "duration": 4.266127966,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 2784,
              "column": 17
            },
            "end": {
              "line": 2784,
              "column": 68
            }
          },
          "replacement": "Ok(Default::default())",
          "status": "Survived",
          "description": "Replace FnValue by Ok(Default::default())",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:3033:9:3035:12:FnValue:Box::leak(Box::new(Default::default()))",
          "duration": 0.151311505,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 3033,
              "column": 9
            },
            "end": {
              "line": 3035,
              "column": 12
            }
          },
          "replacement": "Box::leak(Box::new(Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by Box::leak(Box::new(Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:2112:29:2112:31:BinaryOperator:&&",
          "duration": 4.282546848,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2112,
              "column": 29
            },
            "end": {
              "line": 2112,
              "column": 31
            }
          },
          "replacement": "&&",
          "status": "Killed",
          "description": "Replace BinaryOperator by &&",
          "statusReason": "Test executable failed (exit status: 101).\n\nstderr:\nthread 'main' panicked at url/src/lib.rs:10:1:\nassertion failed: result.is_err()\nstack backtrace:\n   0:     0x555d43d36cf6 - std::backtrace_rs::backtrace::libunwind::trace::h5aa1f3f50fd6005d\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/../../backtrace/src/backtrace/libunwind.rs:104:5\n   1:     0x555d43d36cf6 - std::backtrace_rs::backtrace::trace_unsynchronized::h39f759d0ceaa839b\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/../../backtrace/src/backtrace/mod.rs:66:5\n   2:     0x555d43d36cf6 - std::sys_common::backtrace::_print_fmt::hfd4aa038a1413f7f\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:68:5\n   3:     0x555d43d36cf6 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::ha47fba1de44cec55\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:44:22\n   4:     0x555d43d5460c - core::fmt::rt::Argument::fmt::h375396e1292b08cb\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/fmt/rt.rs:142:9\n   5:     0x555d43d5460c - core::fmt::write::h93e0b545aa9eb320\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/fmt/mod.rs:1120:17\n   6:     0x555d43d34f0f - std::io::Write::write_fmt::h97fad0674ecdf154\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/io/mod.rs:1854:15\n   7:     0x555d43d36aa4 - std::sys_common::backtrace::_print::hb7626a1b4ea382df\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:47:5\n   8:     0x555d43d36aa4 - std::sys_common::backtrace::print::h89f2abc5b98b82a2\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:34:9\n   9:     0x555d43d37f9b - std::panicking::default_hook::{{closure}}::h73fe684137831048\n  10:     0x555d43d37ce9 - std::panicking::default_hook::h8dfe6e62b35915a0\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:292:9\n  11:     0x555d43d3843d - std::panicking::rust_panic_with_hook::hc33e259baf535986\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:781:13\n  12:     0x555d43d382d9 - std::panicking::begin_panic_handler::{{closure}}::hcfbf8e29c9418131\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:651:13\n  13:     0x555d43d371d6 - std::sys_common::backtrace::__rust_end_short_backtrace::h99b80dfa4797f5b6\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:171:18\n  14:     0x555d43d38044 - rust_begin_unwind\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:647:5\n  15:     0x555d43cd2cf5 - core::panicking::panic_fmt::h96700527d99a56a9\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/panicking.rs:72:14\n  16:     0x555d43cd2db3 - core::panicking::panic::h7546f881b5ccb4b7\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/panicking.rs:144:5\n  17:     0x555d43cd3a43 - rust_out::main::_doctest_main_url_src_lib_rs_2089_0::run::h0992009814c957b3\n  18:     0x555d43cd37f9 - rust_out::main::_doctest_main_url_src_lib_rs_2089_0::hb33324d073b7cdb7\n  19:     0x555d43cd37e6 - rust_out::main::h11d1a6ed4289a3df\n  20:     0x555d43cd34f3 - core::ops::function::FnOnce::call_once::h903f19ac3af5d648\n  21:     0x555d43cd33f6 - std::sys_common::backtrace::__rust_begin_short_backtrace::ha11011b11b4aaa1f\n  22:     0x555d43cd3449 - std::rt::lang_start::{{closure}}::h196360a935ed97d8\n  23:     0x555d43d33213 - core::ops::function::impls::<impl core::ops::function::FnOnce<A> for &F>::call_once::hb12a069c52b9e638\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/ops/function.rs:284:13\n  24:     0x555d43d33213 - std::panicking::try::do_call::h34ba557680a1662c\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:554:40\n  25:     0x555d43d33213 - std::panicking::try::hb88778117e3deeb6\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:518:19\n  26:     0x555d43d33213 - std::panic::catch_unwind::hbd3c1fafc0d9693e\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panic.rs:142:14\n  27:     0x555d43d33213 - std::rt::lang_start_internal::{{closure}}::h0b81b8de0028b6f3\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/rt.rs:148:48\n  28:     0x555d43d33213 - std::panicking::try::do_call::hbbb521b5391ac872\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:554:40\n  29:     0x555d43d33213 - std::panicking::try::hf108a0b7deb842f7\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:518:19\n  30:     0x555d43d33213 - std::panic::catch_unwind::h6451f9c53324fd81\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panic.rs:142:14\n  31:     0x555d43d33213 - std::rt::lang_start_internal::hc6ad905f9af5ea03\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/rt.rs:148:20\n  32:     0x555d43cd3427 - std::rt::lang_start::h4d1167809e102347\n  33:     0x555d43cd4015 - main\n  34:     0x7f9f76459cd0 - <unknown>\n  35:     0x7f9f76459d8a - __libc_start_main\n  36:     0x555d43cd3315 - _start\n  37:                0x0 - <unknown>\n\n",
          "killedBy": [
            "url/src/lib.rs - Url::set_password (line 2089)"
          ]
        },
        {
          "id": "url/src/lib.rs:452:57:452:59:BinaryOperator:==",
          "duration": 1.9595879539999999,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 452,
              "column": 57
            },
            "end": {
              "line": 452,
              "column": 59
            }
          },
          "replacement": "==",
          "status": "Killed",
          "description": "Replace BinaryOperator by ==",
          "statusReason": "thread 'test_make_relative' panicked at url/tests/unit.rs:1192:67:\ncalled `Option::unwrap()` on a `None` value\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_make_relative"
          ]
        },
        {
          "id": "url/src/lib.rs:1966:33:1966:34:BinaryOperator:*",
          "duration": 1.924396902,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1966,
              "column": 33
            },
            "end": {
              "line": 1966,
              "column": 34
            }
          },
          "replacement": "*",
          "status": "Killed",
          "description": "Replace BinaryOperator by *",
          "statusReason": "thread 'test_set_empty_host' panicked at url/tests/unit.rs:60:5:\nassertion `left == right` failed\n  left: \"file://serve/share/foo/bar\"\n right: \"file:///share/foo/bar\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_set_empty_host"
          ]
        },
        {
          "id": "url/src/lib.rs:1630:68:1630:69:BinaryOperator:-",
          "duration": 2.1795514729999996,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1630,
              "column": 68
            },
            "end": {
              "line": 1630,
              "column": 69
            }
          },
          "replacement": "-",
          "status": "Killed",
          "description": "Replace BinaryOperator by -",
          "statusReason": "thread 'extend_query_pairs_then_mutate' panicked at url/tests/unit.rs:478:5:\nassertion `left == right` failed\n  left: \"http://localhost:6767/foo/bar?&auth=my-token\"\n right: \"http://localhost:6767/foo/bar?auth=my-token\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "extend_query_pairs_then_mutate"
          ]
        },
        {
          "id": "url/src/lib.rs:2933:9:2933:11:BinaryOperator:||",
          "duration": 4.488810072,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2933,
              "column": 9
            },
            "end": {
              "line": 2933,
              "column": 11
            }
          },
          "replacement": "||",
          "status": "Survived",
          "description": "Replace BinaryOperator by ||",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:1090:9:1094:10:FnValue:None",
          "duration": 3.336979173,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1090,
              "column": 9
            },
            "end": {
              "line": 1094,
              "column": 10
            }
          },
          "replacement": "None",
          "status": "Killed",
          "description": "Replace FnValue by None",
          "statusReason": "thread 'host_serialization' panicked at url/tests/unit.rs:344:5:\nassertion `left == right` failed\n  left: None\n right: Some(\"[::2]\")\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host_serialization",
            "test_set_ip_host"
          ]
        },
        {
          "id": "url/src/lib.rs:479:62:479:64:BinaryOperator:!=",
          "duration": 3.681409165,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 479,
              "column": 62
            },
            "end": {
              "line": 479,
              "column": 64
            }
          },
          "replacement": "!=",
          "status": "Killed",
          "description": "Replace BinaryOperator by !=",
          "statusReason": "thread 'test_make_relative' panicked at url/tests/unit.rs:1193:9:\nassertion `left == right` failed: base: http://127.0.0.1:8080/test/, uri: http://127.0.0.1:8080/test, relative: ../test\n  left: \"test\"\n right: \"../test\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_make_relative"
          ]
        },
        {
          "id": "url/src/lib.rs:2003:31:2003:33:BinaryOperator:-=",
          "duration": 4.287429393,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2003,
              "column": 31
            },
            "end": {
              "line": 2003,
              "column": 33
            }
          },
          "replacement": "-=",
          "status": "Survived",
          "description": "Replace BinaryOperator by -=",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:1816:28:1816:30:BinaryOperator:/=",
          "duration": 4.457349155,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1816,
              "column": 28
            },
            "end": {
              "line": 1816,
              "column": 30
            }
          },
          "replacement": "/=",
          "status": "Survived",
          "description": "Replace BinaryOperator by /=",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:1550:9:1578:56:FnValue:()",
          "duration": 1.981831156,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1550,
              "column": 9
            },
            "end": {
              "line": 1578,
              "column": 56
            }
          },
          "replacement": "()",
          "status": "Killed",
          "description": "Replace FnValue by ()",
          "statusReason": "thread 'test_strip_trailing_spaces_from_opaque_path' panicked at url/tests/unit.rs:41:5:\nassertion `left == right` failed\n  left: \"data:space   ?query\"\n right: \"data:space\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_strip_trailing_spaces_from_opaque_path",
            "test_set_empty_query"
          ]
        },
        {
          "id": "url/src/lib.rs:342:9:363:44:FnValue:()",
          "duration": 3.028532191,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 342,
              "column": 9
            },
            "end": {
              "line": 363,
              "column": 44
            }
          },
          "replacement": "()",
          "status": "Killed",
          "description": "Replace FnValue by ()",
          "statusReason": "thread 'test_strip_trailing_spaces_from_opaque_path' panicked at url/tests/unit.rs:41:5:\nassertion `left == right` failed\n  left: \"data:space   \"\n right: \"data:space\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_strip_trailing_spaces_from_opaque_path"
          ]
        },
        {
          "id": "url/src/lib.rs:2159:24:2159:26:BinaryOperator:+=",
          "duration": 4.181671345,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2159,
              "column": 24
            },
            "end": {
              "line": 2159,
              "column": 26
            }
          },
          "replacement": "+=",
          "status": "Survived",
          "description": "Replace BinaryOperator by +=",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:924:9:929:10:FnValue:\"\"",
          "duration": 2.017582736,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 924,
              "column": 9
            },
            "end": {
              "line": 929,
              "column": 10
            }
          },
          "replacement": "\"\"",
          "status": "Killed",
          "description": "Replace FnValue by \"\"",
          "statusReason": "thread 'test_authority' panicked at url/tests/unit.rs:1244:5:\nassertion `left == right` failed\n  left: \"\"\n right: \"example.com\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_authority"
          ]
        },
        {
          "id": "url/src/lib.rs:1496:9:1508:10:FnValue:()",
          "duration": 3.876310025,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1496,
              "column": 9
            },
            "end": {
              "line": 1508,
              "column": 10
            }
          },
          "replacement": "()",
          "status": "Killed",
          "description": "Replace FnValue by ()",
          "statusReason": "thread 'test_strip_trailing_spaces_from_opaque_path' panicked at url/tests/unit.rs:45:5:\nassertion `left == right` failed\n  left: \"data:space   #hash\"\n right: \"data:space\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_strip_trailing_spaces_from_opaque_path"
          ]
        },
        {
          "id": "url/src/lib.rs:1829:28:1829:30:BinaryOperator:-=",
          "duration": 4.194826384,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1829,
              "column": 28
            },
            "end": {
              "line": 1829,
              "column": 30
            }
          },
          "replacement": "-=",
          "status": "Survived",
          "description": "Replace BinaryOperator by -=",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:1717:9:1728:48:FnValue:()",
          "duration": 3.094684661,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1717,
              "column": 9
            },
            "end": {
              "line": 1728,
              "column": 48
            }
          },
          "replacement": "()",
          "status": "Killed",
          "description": "Replace FnValue by ()",
          "statusReason": "thread 'append_empty_segment_then_mutate' panicked at url/src/lib.rs:2616:9:\nindex out of bounds: the len is 29 but the index is 29\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "append_empty_segment_then_mutate",
            "extend_query_pairs_then_mutate",
            "append_trailing_slash"
          ]
        },
        {
          "id": "url/src/lib.rs:2388:20:2388:22:BinaryOperator:+=",
          "duration": 2.777257236,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2388,
              "column": 20
            },
            "end": {
              "line": 2388,
              "column": 22
            }
          },
          "replacement": "+=",
          "status": "Killed",
          "description": "Replace BinaryOperator by +=",
          "statusReason": "thread 'issue_61' panicked at url/src/lib.rs:2736:11:\nbyte index 27 is out of bounds of `https://mozilla.org/`\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "issue_61"
          ]
        },
        {
          "id": "url/src/lib.rs:2982:57:2982:59:BinaryOperator:&&",
          "duration": 3.791472248,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2982,
              "column": 57
            },
            "end": {
              "line": 2982,
              "column": 59
            }
          },
          "replacement": "&&",
          "status": "Survived",
          "description": "Replace BinaryOperator by &&",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:2206:44:2206:46:BinaryOperator:!=",
          "duration": 1.170812105,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2206,
              "column": 44
            },
            "end": {
              "line": 2206,
              "column": 46
            }
          },
          "replacement": "!=",
          "status": "Killed",
          "description": "Replace BinaryOperator by !=",
          "statusReason": "thread 'test_set_empty_username_and_password' panicked at url/tests/unit.rs:70:27:\ncalled `Result::unwrap()` on an `Err` value: ()\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_set_empty_username_and_password",
            "test_set_empty_host"
          ]
        },
        {
          "id": "url/src/lib.rs:1614:9:1630:80:FnValue:Serializer::new(Default::default())",
          "duration": 1.456479397,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1614,
              "column": 9
            },
            "end": {
              "line": 1630,
              "column": 80
            }
          },
          "replacement": "Serializer::new(Default::default())",
          "status": "CompileError",
          "description": "Replace FnValue by Serializer::new(Default::default())",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:1521:9:1526:10:FnValue:()",
          "duration": 4.337093127999999,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1521,
              "column": 9
            },
            "end": {
              "line": 1526,
              "column": 10
            }
          },
          "replacement": "()",
          "status": "Killed",
          "description": "Replace FnValue by ()",
          "statusReason": "Test executable failed (exit status: 101).\n\nstderr:\nthread 'main' panicked at url/src/lib.rs:13:1:\nassertion `left == right` failed\n  left: \"https://example.net/?lang=fr&foo=bar\"\n right: \"https://example.net/?lang=fr&foo=bar#nav\"\nstack backtrace:\n   0:     0x55cc24d1bf16 - std::backtrace_rs::backtrace::libunwind::trace::h5aa1f3f50fd6005d\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/../../backtrace/src/backtrace/libunwind.rs:104:5\n   1:     0x55cc24d1bf16 - std::backtrace_rs::backtrace::trace_unsynchronized::h39f759d0ceaa839b\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/../../backtrace/src/backtrace/mod.rs:66:5\n   2:     0x55cc24d1bf16 - std::sys_common::backtrace::_print_fmt::hfd4aa038a1413f7f\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:68:5\n   3:     0x55cc24d1bf16 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::ha47fba1de44cec55\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:44:22\n   4:     0x55cc24d3982c - core::fmt::rt::Argument::fmt::h375396e1292b08cb\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/fmt/rt.rs:142:9\n   5:     0x55cc24d3982c - core::fmt::write::h93e0b545aa9eb320\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/fmt/mod.rs:1120:17\n   6:     0x55cc24d1a12f - std::io::Write::write_fmt::h97fad0674ecdf154\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/io/mod.rs:1854:15\n   7:     0x55cc24d1bcc4 - std::sys_common::backtrace::_print::hb7626a1b4ea382df\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:47:5\n   8:     0x55cc24d1bcc4 - std::sys_common::backtrace::print::h89f2abc5b98b82a2\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:34:9\n   9:     0x55cc24d1d1bb - std::panicking::default_hook::{{closure}}::h73fe684137831048\n  10:     0x55cc24d1cf09 - std::panicking::default_hook::h8dfe6e62b35915a0\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:292:9\n  11:     0x55cc24d1d65d - std::panicking::rust_panic_with_hook::hc33e259baf535986\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:781:13\n  12:     0x55cc24d1d532 - std::panicking::begin_panic_handler::{{closure}}::hcfbf8e29c9418131\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:659:13\n  13:     0x55cc24d1c3f6 - std::sys_common::backtrace::__rust_end_short_backtrace::h99b80dfa4797f5b6\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:171:18\n  14:     0x55cc24d1d264 - rust_begin_unwind\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:647:5\n  15:     0x55cc24cb6cf5 - core::panicking::panic_fmt::h96700527d99a56a9\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/panicking.rs:72:14\n  16:     0x55cc24cb6ffb - core::panicking::assert_failed_inner::h88ed53873568fcef\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/panicking.rs:342:17\n  17:     0x55cc24cb780a - core::panicking::assert_failed::h03f34daddd0b0bf6\n  18:     0x55cc24cb8062 - rust_out::main::_doctest_main_url_src_lib_rs_1581_0::run::hf577591b5dda6e41\n  19:     0x55cc24cb7b89 - rust_out::main::_doctest_main_url_src_lib_rs_1581_0::h86c9af5be68ec18c\n  20:     0x55cc24cb7b76 - rust_out::main::h11d1a6ed4289a3df\n  21:     0x55cc24cb75c3 - core::ops::function::FnOnce::call_once::h903f19ac3af5d648\n  22:     0x55cc24cb74b6 - std::sys_common::backtrace::__rust_begin_short_backtrace::ha11011b11b4aaa1f\n  23:     0x55cc24cb7509 - std::rt::lang_start::{{closure}}::h196360a935ed97d8\n  24:     0x55cc24d18433 - core::ops::function::impls::<impl core::ops::function::FnOnce<A> for &F>::call_once::hb12a069c52b9e638\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/ops/function.rs:284:13\n  25:     0x55cc24d18433 - std::panicking::try::do_call::h34ba557680a1662c\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:554:40\n  26:     0x55cc24d18433 - std::panicking::try::hb88778117e3deeb6\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:518:19\n  27:     0x55cc24d18433 - std::panic::catch_unwind::hbd3c1fafc0d9693e\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panic.rs:142:14\n  28:     0x55cc24d18433 - std::rt::lang_start_internal::{{closure}}::h0b81b8de0028b6f3\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/rt.rs:148:48\n  29:     0x55cc24d18433 - std::panicking::try::do_call::hbbb521b5391ac872\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:554:40\n  30:     0x55cc24d18433 - std::panicking::try::hf108a0b7deb842f7\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:518:19\n  31:     0x55cc24d18433 - std::panic::catch_unwind::h6451f9c53324fd81\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panic.rs:142:14\n  32:     0x55cc24d18433 - std::rt::lang_start_internal::hc6ad905f9af5ea03\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/rt.rs:148:20\n  33:     0x55cc24cb74e7 - std::rt::lang_start::h4d1167809e102347\n  34:     0x55cc24cb8305 - main\n  35:     0x7fd825220cd0 - <unknown>\n  36:     0x7fd825220d8a - __libc_start_main\n  37:     0x55cc24cb7315 - _start\n  38:                0x0 - <unknown>\n\n",
          "killedBy": [
            "url/src/lib.rs - Url::query_pairs_mut (line 1581)"
          ]
        },
        {
          "id": "url/src/lib.rs:361:46:361:47:BinaryOperator:/",
          "duration": 3.235427881,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 361,
              "column": 46
            },
            "end": {
              "line": 361,
              "column": 47
            }
          },
          "replacement": "/",
          "status": "Killed",
          "description": "Replace BinaryOperator by /",
          "statusReason": "thread 'test_strip_trailing_spaces_from_opaque_path' panicked at url/tests/unit.rs:41:5:\nassertion `left == right` failed\n  left: \"data\"\n right: \"data:space\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_strip_trailing_spaces_from_opaque_path"
          ]
        },
        {
          "id": "url/src/lib.rs:1794:70:1794:72:BinaryOperator:&&",
          "duration": 4.536997495,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1794,
              "column": 70
            },
            "end": {
              "line": 1794,
              "column": 72
            }
          },
          "replacement": "&&",
          "status": "Survived",
          "description": "Replace BinaryOperator by &&",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:1797:27:1797:29:BinaryOperator:||",
          "duration": 4.877924761,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1797,
              "column": 27
            },
            "end": {
              "line": 1797,
              "column": 29
            }
          },
          "replacement": "||",
          "status": "Killed",
          "description": "Replace BinaryOperator by ||",
          "statusReason": "Test executable failed (exit status: 101).\n\nstderr:\nthread 'main' panicked at url/src/lib.rs:12:1:\nassertion `left == right` failed\n  left: \"ssh://example.net/\"\n right: \"ssh://example.net:4096/\"\nstack backtrace:\n   0:     0x55b0518a0046 - std::backtrace_rs::backtrace::libunwind::trace::h5aa1f3f50fd6005d\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/../../backtrace/src/backtrace/libunwind.rs:104:5\n   1:     0x55b0518a0046 - std::backtrace_rs::backtrace::trace_unsynchronized::h39f759d0ceaa839b\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/../../backtrace/src/backtrace/mod.rs:66:5\n   2:     0x55b0518a0046 - std::sys_common::backtrace::_print_fmt::hfd4aa038a1413f7f\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:68:5\n   3:     0x55b0518a0046 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::ha47fba1de44cec55\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:44:22\n   4:     0x55b0518bdaec - core::fmt::rt::Argument::fmt::h375396e1292b08cb\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/fmt/rt.rs:142:9\n   5:     0x55b0518bdaec - core::fmt::write::h93e0b545aa9eb320\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/fmt/mod.rs:1120:17\n   6:     0x55b05189e25f - std::io::Write::write_fmt::h97fad0674ecdf154\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/io/mod.rs:1854:15\n   7:     0x55b05189fdf4 - std::sys_common::backtrace::_print::hb7626a1b4ea382df\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:47:5\n   8:     0x55b05189fdf4 - std::sys_common::backtrace::print::h89f2abc5b98b82a2\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:34:9\n   9:     0x55b0518a12eb - std::panicking::default_hook::{{closure}}::h73fe684137831048\n  10:     0x55b0518a1039 - std::panicking::default_hook::h8dfe6e62b35915a0\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:292:9\n  11:     0x55b0518a178d - std::panicking::rust_panic_with_hook::hc33e259baf535986\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:781:13\n  12:     0x55b0518a1662 - std::panicking::begin_panic_handler::{{closure}}::hcfbf8e29c9418131\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:659:13\n  13:     0x55b0518a0526 - std::sys_common::backtrace::__rust_end_short_backtrace::h99b80dfa4797f5b6\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:171:18\n  14:     0x55b0518a1394 - rust_begin_unwind\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:647:5\n  15:     0x55b05183bcf5 - core::panicking::panic_fmt::h96700527d99a56a9\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/panicking.rs:72:14\n  16:     0x55b05183bffb - core::panicking::assert_failed_inner::h88ed53873568fcef\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/panicking.rs:342:17\n  17:     0x55b05183c7ea - core::panicking::assert_failed::h03f34daddd0b0bf6\n  18:     0x55b05183d341 - rust_out::main::_doctest_main_url_src_lib_rs_1740_0::run::h63016975195839ca\n  19:     0x55b05183cf79 - rust_out::main::_doctest_main_url_src_lib_rs_1740_0::h4d6e77b9b542bcc6\n  20:     0x55b05183cf66 - rust_out::main::h11d1a6ed4289a3df\n  21:     0x55b05183c5b3 - core::ops::function::FnOnce::call_once::h903f19ac3af5d648\n  22:     0x55b05183c4b6 - std::sys_common::backtrace::__rust_begin_short_backtrace::ha11011b11b4aaa1f\n  23:     0x55b05183c509 - std::rt::lang_start::{{closure}}::h196360a935ed97d8\n  24:     0x55b05189c563 - core::ops::function::impls::<impl core::ops::function::FnOnce<A> for &F>::call_once::hb12a069c52b9e638\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/ops/function.rs:284:13\n  25:     0x55b05189c563 - std::panicking::try::do_call::h34ba557680a1662c\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:554:40\n  26:     0x55b05189c563 - std::panicking::try::hb88778117e3deeb6\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:518:19\n  27:     0x55b05189c563 - std::panic::catch_unwind::hbd3c1fafc0d9693e\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panic.rs:142:14\n  28:     0x55b05189c563 - std::rt::lang_start_internal::{{closure}}::h0b81b8de0028b6f3\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/rt.rs:148:48\n  29:     0x55b05189c563 - std::panicking::try::do_call::hbbb521b5391ac872\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:554:40\n  30:     0x55b05189c563 - std::panicking::try::hf108a0b7deb842f7\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:518:19\n  31:     0x55b05189c563 - std::panic::catch_unwind::h6451f9c53324fd81\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panic.rs:142:14\n  32:     0x55b05189c563 - std::rt::lang_start_internal::hc6ad905f9af5ea03\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/rt.rs:148:20\n  33:     0x55b05183c4e7 - std::rt::lang_start::h4d1167809e102347\n  34:     0x55b05183d5a5 - main\n  35:     0x7f57e67f1cd0 - <unknown>\n  36:     0x7f57e67f1d8a - __libc_start_main\n  37:     0x55b05183c315 - _start\n  38:                0x0 - <unknown>\n\n",
          "killedBy": [
            "url/src/lib.rs - Url::set_port (line 1740)"
          ]
        },
        {
          "id": "url/src/lib.rs:1053:9:1053:49:FnValue:false",
          "duration": 2.723673171,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1053,
              "column": 9
            },
            "end": {
              "line": 1053,
              "column": 49
            }
          },
          "replacement": "false",
          "status": "Killed",
          "description": "Replace FnValue by false",
          "statusReason": "thread 'host_serialization' panicked at url/tests/unit.rs:344:5:\nassertion `left == right` failed\n  left: None\n right: Some(\"[::2]\")\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host_serialization",
            "test_set_empty_host",
            "test_set_empty_password",
            "test_set_empty_username_and_password",
            "test_set_host",
            "issue_61",
            "test_set_ip_host"
          ]
        },
        {
          "id": "url/src/lib.rs:1614:9:1630:80:FnValue:Serializer::from_iter([Default::default()])",
          "duration": 0.313321593,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1614,
              "column": 9
            },
            "end": {
              "line": 1630,
              "column": 80
            }
          },
          "replacement": "Serializer::from_iter([Default::default()])",
          "status": "CompileError",
          "description": "Replace FnValue by Serializer::from_iter([Default::default()])",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:1020:9:1028:10:FnValue:Some(\"xyzzy\")",
          "duration": 2.920510933,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1020,
              "column": 9
            },
            "end": {
              "line": 1028,
              "column": 10
            }
          },
          "replacement": "Some(\"xyzzy\")",
          "status": "Killed",
          "description": "Replace FnValue by Some(\"xyzzy\")",
          "statusReason": "thread 'no_panic' panicked at url/tests/unit.rs:990:79:\ncalled `Result::unwrap()` on an `Err` value: ()\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "no_panic",
            "test_set_empty_hostname"
          ]
        },
        {
          "id": "url/src/lib.rs:2155:29:2155:31:BinaryOperator:/=",
          "duration": 3.266534482,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2155,
              "column": 29
            },
            "end": {
              "line": 2155,
              "column": 31
            }
          },
          "replacement": "/=",
          "status": "Survived",
          "description": "Replace BinaryOperator by /=",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:2725:9:2725:28:FnValue:\"\"",
          "duration": 3.420673797,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 2725,
              "column": 9
            },
            "end": {
              "line": 2725,
              "column": 28
            }
          },
          "replacement": "\"\"",
          "status": "Survived",
          "description": "Replace FnValue by \"\"",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:2750:9:2750:32:FnValue:\"\"",
          "duration": 2.185479136,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 2750,
              "column": 9
            },
            "end": {
              "line": 2750,
              "column": 32
            }
          },
          "replacement": "\"\"",
          "status": "Killed",
          "description": "Replace FnValue by \"\"",
          "statusReason": "thread 'issue_61' panicked at url/tests/unit.rs:435:29:\ncalled `Result::unwrap()` on an `Err` value: ()\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "issue_61",
            "path_backslash_fun",
            "test_file_with_drive",
            "test_options_reuse",
            "test_make_relative",
            "test_origin_blob_equality",
            "test_relative",
            "test_origin_unicode_serialization",
            "test_set_host",
            "test_socket_addrs",
            "test_set_empty_host",
            "test_file_with_drive_and_path"
          ]
        },
        {
          "id": "url/src/lib.rs:2372:42:2372:44:BinaryOperator:||",
          "duration": 1.7403257500000002,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2372,
              "column": 42
            },
            "end": {
              "line": 2372,
              "column": 44
            }
          },
          "replacement": "||",
          "status": "Killed",
          "description": "Replace BinaryOperator by ||",
          "statusReason": "thread 'issue_61' panicked at url/tests/unit.rs:435:29:\ncalled `Result::unwrap()` on an `Err` value: ()\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "issue_61"
          ]
        },
        {
          "id": "url/src/lib.rs:1025:47:1025:48:BinaryOperator:*",
          "duration": 3.3796801839999997,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1025,
              "column": 47
            },
            "end": {
              "line": 1025,
              "column": 48
            }
          },
          "replacement": "*",
          "status": "Killed",
          "description": "Replace BinaryOperator by *",
          "statusReason": "Test executable failed (exit status: 101).\n\nstderr:\nthread 'main' panicked at url/src/lib.rs:10:1:\nassertion `left == right` failed\n  left: Some(\":secret123\")\n right: Some(\"secret123\")\nstack backtrace:\n   0:     0x55a5bd0b0016 - std::backtrace_rs::backtrace::libunwind::trace::h5aa1f3f50fd6005d\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/../../backtrace/src/backtrace/libunwind.rs:104:5\n   1:     0x55a5bd0b0016 - std::backtrace_rs::backtrace::trace_unsynchronized::h39f759d0ceaa839b\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/../../backtrace/src/backtrace/mod.rs:66:5\n   2:     0x55a5bd0b0016 - std::sys_common::backtrace::_print_fmt::hfd4aa038a1413f7f\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:68:5\n   3:     0x55a5bd0b0016 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::ha47fba1de44cec55\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:44:22\n   4:     0x55a5bd0cd92c - core::fmt::rt::Argument::fmt::h375396e1292b08cb\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/fmt/rt.rs:142:9\n   5:     0x55a5bd0cd92c - core::fmt::write::h93e0b545aa9eb320\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/fmt/mod.rs:1120:17\n   6:     0x55a5bd0ae22f - std::io::Write::write_fmt::h97fad0674ecdf154\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/io/mod.rs:1854:15\n   7:     0x55a5bd0afdc4 - std::sys_common::backtrace::_print::hb7626a1b4ea382df\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:47:5\n   8:     0x55a5bd0afdc4 - std::sys_common::backtrace::print::h89f2abc5b98b82a2\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:34:9\n   9:     0x55a5bd0b12bb - std::panicking::default_hook::{{closure}}::h73fe684137831048\n  10:     0x55a5bd0b1009 - std::panicking::default_hook::h8dfe6e62b35915a0\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:292:9\n  11:     0x55a5bd0b175d - std::panicking::rust_panic_with_hook::hc33e259baf535986\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:781:13\n  12:     0x55a5bd0b1632 - std::panicking::begin_panic_handler::{{closure}}::hcfbf8e29c9418131\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:659:13\n  13:     0x55a5bd0b04f6 - std::sys_common::backtrace::__rust_end_short_backtrace::h99b80dfa4797f5b6\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:171:18\n  14:     0x55a5bd0b1364 - rust_begin_unwind\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:647:5\n  15:     0x55a5bd04ccf5 - core::panicking::panic_fmt::h96700527d99a56a9\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/panicking.rs:72:14\n  16:     0x55a5bd04cffb - core::panicking::assert_failed_inner::h88ed53873568fcef\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/panicking.rs:342:17\n  17:     0x55a5bd04d5ba - core::panicking::assert_failed::hb35f7c6aa33d29e8\n  18:     0x55a5bd04da6b - rust_out::main::_doctest_main_url_src_lib_rs_997_0::run::hbefe8b0e3735a1e3\n  19:     0x55a5bd04d7b9 - rust_out::main::_doctest_main_url_src_lib_rs_997_0::ha7bc18b5917175da\n  20:     0x55a5bd04d7a6 - rust_out::main::h11d1a6ed4289a3df\n  21:     0x55a5bd04d4f3 - core::ops::function::FnOnce::call_once::h903f19ac3af5d648\n  22:     0x55a5bd04d3f6 - std::sys_common::backtrace::__rust_begin_short_backtrace::ha11011b11b4aaa1f\n  23:     0x55a5bd04d449 - std::rt::lang_start::{{closure}}::h196360a935ed97d8\n  24:     0x55a5bd0ac533 - core::ops::function::impls::<impl core::ops::function::FnOnce<A> for &F>::call_once::hb12a069c52b9e638\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/ops/function.rs:284:13\n  25:     0x55a5bd0ac533 - std::panicking::try::do_call::h34ba557680a1662c\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:554:40\n  26:     0x55a5bd0ac533 - std::panicking::try::hb88778117e3deeb6\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:518:19\n  27:     0x55a5bd0ac533 - std::panic::catch_unwind::hbd3c1fafc0d9693e\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panic.rs:142:14\n  28:     0x55a5bd0ac533 - std::rt::lang_start_internal::{{closure}}::h0b81b8de0028b6f3\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/rt.rs:148:48\n  29:     0x55a5bd0ac533 - std::panicking::try::do_call::hbbb521b5391ac872\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:554:40\n  30:     0x55a5bd0ac533 - std::panicking::try::hf108a0b7deb842f7\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:518:19\n  31:     0x55a5bd0ac533 - std::panic::catch_unwind::h6451f9c53324fd81\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panic.rs:142:14\n  32:     0x55a5bd0ac533 - std::rt::lang_start_internal::hc6ad905f9af5ea03\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/rt.rs:148:20\n  33:     0x55a5bd04d427 - std::rt::lang_start::h4d1167809e102347\n  34:     0x55a5bd04e1f5 - main\n  35:     0x7f935f4e1cd0 - <unknown>\n  36:     0x7f935f4e1d8a - __libc_start_main\n  37:     0x55a5bd04d315 - _start\n  38:                0x0 - <unknown>\n\n",
          "killedBy": [
            "url/src/lib.rs - Url::password (line 997)",
            "url/src/lib.rs - Url::set_password (line 2089)"
          ]
        },
        {
          "id": "url/src/lib.rs:2240:20:2240:22:BinaryOperator:+=",
          "duration": 1.513238612,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2240,
              "column": 20
            },
            "end": {
              "line": 2240,
              "column": 22
            }
          },
          "replacement": "+=",
          "status": "Killed",
          "description": "Replace BinaryOperator by +=",
          "statusReason": "thread 'test_set_empty_host' panicked at url/src/lib.rs:2627:9:\nindex out of bounds: the len is 20 but the index is 34\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_set_empty_host",
            "test_set_empty_username_and_password"
          ]
        },
        {
          "id": "url/src/lib.rs:2128:24:2128:26:BinaryOperator:*=",
          "duration": 3.674057756,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2128,
              "column": 24
            },
            "end": {
              "line": 2128,
              "column": 26
            }
          },
          "replacement": "*=",
          "status": "Survived",
          "description": "Replace BinaryOperator by *=",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:1810:46:1810:47:BinaryOperator:+",
          "duration": 3.688691532,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1810,
              "column": 46
            },
            "end": {
              "line": 1810,
              "column": 47
            }
          },
          "replacement": "+",
          "status": "Survived",
          "description": "Replace BinaryOperator by +",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:2852:42:2852:43:BinaryOperator:*",
          "duration": 4.517655135,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2852,
              "column": 42
            },
            "end": {
              "line": 2852,
              "column": 43
            }
          },
          "replacement": "*",
          "status": "Survived",
          "description": "Replace BinaryOperator by *",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:608:9:608:20:FnValue:String::new()",
          "duration": 4.935656517,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 608,
              "column": 9
            },
            "end": {
              "line": 608,
              "column": 20
            }
          },
          "replacement": "String::new()",
          "status": "Survived",
          "description": "Replace FnValue by String::new()",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:447:9:534:23:FnValue:Some(\"xyzzy\".into())",
          "duration": 3.143436896,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 447,
              "column": 9
            },
            "end": {
              "line": 534,
              "column": 23
            }
          },
          "replacement": "Some(\"xyzzy\".into())",
          "status": "Killed",
          "description": "Replace FnValue by Some(\"xyzzy\".into())",
          "statusReason": "thread 'test_make_relative' panicked at url/tests/unit.rs:1193:9:\nassertion `left == right` failed: base: http://127.0.0.1:8080/test, uri: http://127.0.0.1:8080/test, relative: \n  left: \"xyzzy\"\n right: \"\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_make_relative"
          ]
        },
        {
          "id": "url/src/lib.rs:1514:45:1514:46:BinaryOperator:-",
          "duration": 5.335726678,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1514,
              "column": 45
            },
            "end": {
              "line": 1514,
              "column": 46
            }
          },
          "replacement": "-",
          "status": "Killed",
          "description": "Replace BinaryOperator by -",
          "statusReason": "Test executable failed (exit status: 101).\n\nstderr:\nthread 'main' panicked at url/src/lib.rs:13:1:\nassertion `left == right` failed\n  left: \"https://example.net/?lang=fr&foo=bar#r#nav\"\n right: \"https://example.net/?lang=fr&foo=bar#nav\"\nstack backtrace:\n   0:     0x56493efc4106 - std::backtrace_rs::backtrace::libunwind::trace::h5aa1f3f50fd6005d\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/../../backtrace/src/backtrace/libunwind.rs:104:5\n   1:     0x56493efc4106 - std::backtrace_rs::backtrace::trace_unsynchronized::h39f759d0ceaa839b\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/../../backtrace/src/backtrace/mod.rs:66:5\n   2:     0x56493efc4106 - std::sys_common::backtrace::_print_fmt::hfd4aa038a1413f7f\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:68:5\n   3:     0x56493efc4106 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::ha47fba1de44cec55\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:44:22\n   4:     0x56493efe1a1c - core::fmt::rt::Argument::fmt::h375396e1292b08cb\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/fmt/rt.rs:142:9\n   5:     0x56493efe1a1c - core::fmt::write::h93e0b545aa9eb320\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/fmt/mod.rs:1120:17\n   6:     0x56493efc231f - std::io::Write::write_fmt::h97fad0674ecdf154\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/io/mod.rs:1854:15\n   7:     0x56493efc3eb4 - std::sys_common::backtrace::_print::hb7626a1b4ea382df\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:47:5\n   8:     0x56493efc3eb4 - std::sys_common::backtrace::print::h89f2abc5b98b82a2\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:34:9\n   9:     0x56493efc53ab - std::panicking::default_hook::{{closure}}::h73fe684137831048\n  10:     0x56493efc50f9 - std::panicking::default_hook::h8dfe6e62b35915a0\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:292:9\n  11:     0x56493efc584d - std::panicking::rust_panic_with_hook::hc33e259baf535986\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:781:13\n  12:     0x56493efc5722 - std::panicking::begin_panic_handler::{{closure}}::hcfbf8e29c9418131\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:659:13\n  13:     0x56493efc45e6 - std::sys_common::backtrace::__rust_end_short_backtrace::h99b80dfa4797f5b6\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:171:18\n  14:     0x56493efc5454 - rust_begin_unwind\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:647:5\n  15:     0x56493ef5ecf5 - core::panicking::panic_fmt::h96700527d99a56a9\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/panicking.rs:72:14\n  16:     0x56493ef5effb - core::panicking::assert_failed_inner::h88ed53873568fcef\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/panicking.rs:342:17\n  17:     0x56493ef5f80a - core::panicking::assert_failed::h03f34daddd0b0bf6\n  18:     0x56493ef60062 - rust_out::main::_doctest_main_url_src_lib_rs_1586_0::run::h63f63857050ba174\n  19:     0x56493ef5fb89 - rust_out::main::_doctest_main_url_src_lib_rs_1586_0::hc1899b2c21d8c397\n  20:     0x56493ef5fb76 - rust_out::main::h11d1a6ed4289a3df\n  21:     0x56493ef5f5c3 - core::ops::function::FnOnce::call_once::h903f19ac3af5d648\n  22:     0x56493ef5f4b6 - std::sys_common::backtrace::__rust_begin_short_backtrace::ha11011b11b4aaa1f\n  23:     0x56493ef5f509 - std::rt::lang_start::{{closure}}::h196360a935ed97d8\n  24:     0x56493efc0623 - core::ops::function::impls::<impl core::ops::function::FnOnce<A> for &F>::call_once::hb12a069c52b9e638\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/ops/function.rs:284:13\n  25:     0x56493efc0623 - std::panicking::try::do_call::h34ba557680a1662c\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:554:40\n  26:     0x56493efc0623 - std::panicking::try::hb88778117e3deeb6\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:518:19\n  27:     0x56493efc0623 - std::panic::catch_unwind::hbd3c1fafc0d9693e\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panic.rs:142:14\n  28:     0x56493efc0623 - std::rt::lang_start_internal::{{closure}}::h0b81b8de0028b6f3\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/rt.rs:148:48\n  29:     0x56493efc0623 - std::panicking::try::do_call::hbbb521b5391ac872\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:554:40\n  30:     0x56493efc0623 - std::panicking::try::hf108a0b7deb842f7\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:518:19\n  31:     0x56493efc0623 - std::panic::catch_unwind::h6451f9c53324fd81\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panic.rs:142:14\n  32:     0x56493efc0623 - std::rt::lang_start_internal::hc6ad905f9af5ea03\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/rt.rs:148:20\n  33:     0x56493ef5f4e7 - std::rt::lang_start::h4d1167809e102347\n  34:     0x56493ef60305 - main\n  35:     0x7f7941ba7cd0 - <unknown>\n  36:     0x7f7941ba7d8a - __libc_start_main\n  37:     0x56493ef5f315 - _start\n  38:                0x0 - <unknown>\n\n",
          "killedBy": [
            "url/src/lib.rs - Url::query_pairs_mut (line 1586)"
          ]
        },
        {
          "id": "url/src/lib.rs:1926:9:1986:15:FnValue:Ok(())",
          "duration": 2.9177711019999997,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1926,
              "column": 9
            },
            "end": {
              "line": 1986,
              "column": 15
            }
          },
          "replacement": "Ok(())",
          "status": "Killed",
          "description": "Replace FnValue by Ok(())",
          "statusReason": "thread 'test_no_base_url' panicked at url/tests/unit.rs:666:5:\nassertion failed: no_base_url.set_host(Some(\"foo\")).is_err()\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_no_base_url",
            "test_set_empty_host",
            "test_set_host"
          ]
        },
        {
          "id": "url/src/lib.rs:1025:47:1025:48:BinaryOperator:-",
          "duration": 4.281451752,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1025,
              "column": 47
            },
            "end": {
              "line": 1025,
              "column": 48
            }
          },
          "replacement": "-",
          "status": "Killed",
          "description": "Replace BinaryOperator by -",
          "statusReason": "Test executable failed (exit status: 101).\n\nstderr:\nthread 'main' panicked at url/src/lib.rs:10:1:\nassertion `left == right` failed\n  left: Some(\"s:secret123\")\n right: Some(\"secret123\")\nstack backtrace:\n   0:     0x563207f18016 - std::backtrace_rs::backtrace::libunwind::trace::h5aa1f3f50fd6005d\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/../../backtrace/src/backtrace/libunwind.rs:104:5\n   1:     0x563207f18016 - std::backtrace_rs::backtrace::trace_unsynchronized::h39f759d0ceaa839b\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/../../backtrace/src/backtrace/mod.rs:66:5\n   2:     0x563207f18016 - std::sys_common::backtrace::_print_fmt::hfd4aa038a1413f7f\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:68:5\n   3:     0x563207f18016 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::ha47fba1de44cec55\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:44:22\n   4:     0x563207f3592c - core::fmt::rt::Argument::fmt::h375396e1292b08cb\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/fmt/rt.rs:142:9\n   5:     0x563207f3592c - core::fmt::write::h93e0b545aa9eb320\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/fmt/mod.rs:1120:17\n   6:     0x563207f1622f - std::io::Write::write_fmt::h97fad0674ecdf154\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/io/mod.rs:1854:15\n   7:     0x563207f17dc4 - std::sys_common::backtrace::_print::hb7626a1b4ea382df\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:47:5\n   8:     0x563207f17dc4 - std::sys_common::backtrace::print::h89f2abc5b98b82a2\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:34:9\n   9:     0x563207f192bb - std::panicking::default_hook::{{closure}}::h73fe684137831048\n  10:     0x563207f19009 - std::panicking::default_hook::h8dfe6e62b35915a0\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:292:9\n  11:     0x563207f1975d - std::panicking::rust_panic_with_hook::hc33e259baf535986\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:781:13\n  12:     0x563207f19632 - std::panicking::begin_panic_handler::{{closure}}::hcfbf8e29c9418131\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:659:13\n  13:     0x563207f184f6 - std::sys_common::backtrace::__rust_end_short_backtrace::h99b80dfa4797f5b6\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:171:18\n  14:     0x563207f19364 - rust_begin_unwind\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:647:5\n  15:     0x563207eb4cf5 - core::panicking::panic_fmt::h96700527d99a56a9\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/panicking.rs:72:14\n  16:     0x563207eb4ffb - core::panicking::assert_failed_inner::h88ed53873568fcef\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/panicking.rs:342:17\n  17:     0x563207eb55ba - core::panicking::assert_failed::hb35f7c6aa33d29e8\n  18:     0x563207eb5a6b - rust_out::main::_doctest_main_url_src_lib_rs_997_0::run::hbefe8b0e3735a1e3\n  19:     0x563207eb57b9 - rust_out::main::_doctest_main_url_src_lib_rs_997_0::ha7bc18b5917175da\n  20:     0x563207eb57a6 - rust_out::main::h11d1a6ed4289a3df\n  21:     0x563207eb54f3 - core::ops::function::FnOnce::call_once::h903f19ac3af5d648\n  22:     0x563207eb53f6 - std::sys_common::backtrace::__rust_begin_short_backtrace::ha11011b11b4aaa1f\n  23:     0x563207eb5449 - std::rt::lang_start::{{closure}}::h196360a935ed97d8\n  24:     0x563207f14533 - core::ops::function::impls::<impl core::ops::function::FnOnce<A> for &F>::call_once::hb12a069c52b9e638\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/ops/function.rs:284:13\n  25:     0x563207f14533 - std::panicking::try::do_call::h34ba557680a1662c\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:554:40\n  26:     0x563207f14533 - std::panicking::try::hb88778117e3deeb6\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:518:19\n  27:     0x563207f14533 - std::panic::catch_unwind::hbd3c1fafc0d9693e\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panic.rs:142:14\n  28:     0x563207f14533 - std::rt::lang_start_internal::{{closure}}::h0b81b8de0028b6f3\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/rt.rs:148:48\n  29:     0x563207f14533 - std::panicking::try::do_call::hbbb521b5391ac872\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:554:40\n  30:     0x563207f14533 - std::panicking::try::hf108a0b7deb842f7\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:518:19\n  31:     0x563207f14533 - std::panic::catch_unwind::h6451f9c53324fd81\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panic.rs:142:14\n  32:     0x563207f14533 - std::rt::lang_start_internal::hc6ad905f9af5ea03\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/rt.rs:148:20\n  33:     0x563207eb5427 - std::rt::lang_start::h4d1167809e102347\n  34:     0x563207eb61f5 - main\n  35:     0x7f824ad21cd0 - <unknown>\n  36:     0x7f824ad21d8a - __libc_start_main\n  37:     0x563207eb5315 - _start\n  38:                0x0 - <unknown>\n\n",
          "killedBy": [
            "url/src/lib.rs - Url::password (line 997)",
            "url/src/lib.rs - Url::set_password (line 2089)"
          ]
        },
        {
          "id": "url/src/lib.rs:1810:46:1810:47:BinaryOperator:/",
          "duration": 3.922275642,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1810,
              "column": 46
            },
            "end": {
              "line": 1810,
              "column": 47
            }
          },
          "replacement": "/",
          "status": "Survived",
          "description": "Replace BinaryOperator by /",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:2157:29:2157:31:BinaryOperator:+=",
          "duration": 3.827249135,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2157,
              "column": 29
            },
            "end": {
              "line": 2157,
              "column": 31
            }
          },
          "replacement": "+=",
          "status": "Survived",
          "description": "Replace BinaryOperator by +=",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:2932:30:2932:31:BinaryOperator:+",
          "duration": 1.9193500310000002,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2932,
              "column": 30
            },
            "end": {
              "line": 2932,
              "column": 31
            }
          },
          "replacement": "+",
          "status": "Killed",
          "description": "Replace BinaryOperator by +",
          "statusReason": "thread 'new_path_bad_utf8' panicked at url/src/lib.rs:2932:17:\nindex out of bounds: the len is 9 but the index is 11\n",
          "killedBy": [
            "new_path_bad_utf8",
            "new_file_paths",
            "test_url_from_file_path"
          ]
        },
        {
          "id": "url/src/lib.rs:2388:20:2388:22:BinaryOperator:/=",
          "duration": 1.9743890220000002,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2388,
              "column": 20
            },
            "end": {
              "line": 2388,
              "column": 22
            }
          },
          "replacement": "/=",
          "status": "Killed",
          "description": "Replace BinaryOperator by /=",
          "statusReason": "thread 'issue_61' panicked at url/tests/unit.rs:438:28:\ncalled `Result::unwrap()` on an `Err` value: \"6 != 8 (self.username_end != self.scheme_end + 3) for URL \\\"https://mozilla.org/\\\"\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "issue_61"
          ]
        },
        {
          "id": "url/src/lib.rs:1634:9:1641:10:FnValue:\"xyzzy\".into()",
          "duration": 1.823956968,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1634,
              "column": 9
            },
            "end": {
              "line": 1641,
              "column": 10
            }
          },
          "replacement": "\"xyzzy\".into()",
          "status": "Killed",
          "description": "Replace FnValue by \"xyzzy\".into()",
          "statusReason": "thread 'append_trailing_slash' panicked at url/src/lib.rs:1712:13:\nattempt to subtract with overflow\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "append_trailing_slash",
            "append_empty_segment_then_mutate",
            "extend_query_pairs_then_mutate",
            "path_backslash_fun",
            "test_no_base_url",
            "test_non_special_path",
            "test_non_special_path2",
            "test_non_special_path3"
          ]
        },
        {
          "id": "url/src/lib.rs:1268:13:1268:83:FnValue:Ok(Default::default())",
          "duration": 0.205160978,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1268,
              "column": 13
            },
            "end": {
              "line": 1268,
              "column": 83
            }
          },
          "replacement": "Ok(Default::default())",
          "status": "CompileError",
          "description": "Replace FnValue by Ok(Default::default())",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:925:33:925:35:BinaryOperator:||",
          "duration": 4.042823574,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 925,
              "column": 33
            },
            "end": {
              "line": 925,
              "column": 35
            }
          },
          "replacement": "||",
          "status": "Survived",
          "description": "Replace BinaryOperator by ||",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:1267:9:1280:11:FnValue:Ok(vec![])",
          "duration": 2.076181492,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1267,
              "column": 9
            },
            "end": {
              "line": 1280,
              "column": 11
            }
          },
          "replacement": "Ok(vec![])",
          "status": "Killed",
          "description": "Replace FnValue by Ok(vec![])",
          "statusReason": "thread 'test_socket_addrs' panicked at url/tests/unit.rs:653:23:\nindex out of bounds: the len is 0 but the index is 0\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_socket_addrs"
          ]
        },
        {
          "id": "url/src/lib.rs:925:70:925:71:BinaryOperator:*",
          "duration": 3.7626766889999996,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 925,
              "column": 70
            },
            "end": {
              "line": 925,
              "column": 71
            }
          },
          "replacement": "*",
          "status": "Survived",
          "description": "Replace BinaryOperator by *",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:2545:9:2576:16:FnValue:Ok(Default::default())",
          "duration": 3.919079388,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 2545,
              "column": 9
            },
            "end": {
              "line": 2576,
              "column": 16
            }
          },
          "replacement": "Ok(Default::default())",
          "status": "Survived",
          "description": "Replace FnValue by Ok(Default::default())",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:3029:9:3029:54:FnValue:Box::leak(Box::new(\"xyzzy\".into()))",
          "duration": 2.73259312,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 3029,
              "column": 9
            },
            "end": {
              "line": 3029,
              "column": 54
            }
          },
          "replacement": "Box::leak(Box::new(\"xyzzy\".into()))",
          "status": "Killed",
          "description": "Replace FnValue by Box::leak(Box::new(\"xyzzy\".into()))",
          "statusReason": "thread 'parse_with_params' panicked at /tmp/cargo-mutants-rust-url-4809QP.tmp/form_urlencoded/src/lib.rs:224:13:\ninvalid length 24 for target of length 5\n",
          "killedBy": [
            "parse_with_params",
            "extend_query_pairs_then_mutate"
          ]
        },
        {
          "id": "url/src/lib.rs:1719:20:1719:22:BinaryOperator:/=",
          "duration": 1.874373584,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1719,
              "column": 20
            },
            "end": {
              "line": 1719,
              "column": 22
            }
          },
          "replacement": "/=",
          "status": "Killed",
          "description": "Replace BinaryOperator by /=",
          "statusReason": "thread 'append_empty_segment_then_mutate' panicked at url/tests/unit.rs:496:28:\ncalled `Result::unwrap()` on an `Err` value: \"97 != 63 (self.byte_at(start) != b'?') for URL \\\"http://localhost:6767/foo/bar?a=b\\\"\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "append_empty_segment_then_mutate",
            "extend_query_pairs_then_mutate",
            "append_trailing_slash"
          ]
        },
        {
          "id": "url/src/lib.rs:2127:24:2127:26:BinaryOperator:+=",
          "duration": 3.859081001,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2127,
              "column": 24
            },
            "end": {
              "line": 2127,
              "column": 26
            }
          },
          "replacement": "+=",
          "status": "Survived",
          "description": "Replace BinaryOperator by +=",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:2211:58:2211:60:BinaryOperator:!=",
          "duration": 2.8221385679999997,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2211,
              "column": 58
            },
            "end": {
              "line": 2211,
              "column": 60
            }
          },
          "replacement": "!=",
          "status": "Killed",
          "description": "Replace BinaryOperator by !=",
          "statusReason": "thread 'test_set_empty_host' panicked at url/tests/unit.rs:52:5:\nassertion `left == right` failed\n  left: \"moz://foo:bar@servo/baz\"\n right: \"moz://:bar@servo/baz\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_set_empty_host",
            "test_set_empty_username_and_password"
          ]
        },
        {
          "id": "url/src/lib.rs:985:9:990:10:FnValue:\"\"",
          "duration": 2.878376389,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 985,
              "column": 9
            },
            "end": {
              "line": 990,
              "column": 10
            }
          },
          "replacement": "\"\"",
          "status": "Killed",
          "description": "Replace FnValue by \"\"",
          "statusReason": "thread 'test_set_empty_hostname' panicked at url/tests/unit.rs:95:5:\nsetting an empty hostname to a url with a username should fail\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_set_empty_hostname"
          ]
        },
        {
          "id": "url/src/lib.rs:2791:17:2794:19:FnValue:Ok(Default::default())",
          "duration": 4.134180992,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 2791,
              "column": 17
            },
            "end": {
              "line": 2794,
              "column": 19
            }
          },
          "replacement": "Ok(Default::default())",
          "status": "Survived",
          "description": "Replace FnValue by Ok(Default::default())",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:2021:20:2021:22:BinaryOperator:-=",
          "duration": 2.644278632,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2021,
              "column": 20
            },
            "end": {
              "line": 2021,
              "column": 22
            }
          },
          "replacement": "-=",
          "status": "Killed",
          "description": "Replace BinaryOperator by -=",
          "statusReason": "thread 'no_panic' panicked at url/src/lib.rs:2021:13:\nattempt to subtract with overflow\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "no_panic",
            "test_set_host",
            "test_set_empty_host",
            "test_set_empty_hostname",
            "test_set_ip_host"
          ]
        },
        {
          "id": "url/src/lib.rs:1968:33:1968:34:BinaryOperator:-",
          "duration": 2.6387321779999997,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1968,
              "column": 33
            },
            "end": {
              "line": 1968,
              "column": 34
            }
          },
          "replacement": "-",
          "status": "Killed",
          "description": "Replace BinaryOperator by -",
          "statusReason": "thread 'test_set_host' panicked at url/tests/unit.rs:513:5:\nassertion `left == right` failed\n  left: \"fooba/hello\"\n right: \"foobar:/hello\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_set_host",
            "test_set_empty_host"
          ]
        },
        {
          "id": "url/src/lib.rs:1193:9:1193:18:FnValue:None",
          "duration": 2.742683729,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1193,
              "column": 9
            },
            "end": {
              "line": 1193,
              "column": 18
            }
          },
          "replacement": "None",
          "status": "Killed",
          "description": "Replace FnValue by None",
          "statusReason": "thread 'test_make_relative' panicked at url/tests/unit.rs:1219:9:\nassertion `left == right` failed: base: http://127.0.0.1:8080/, uri: http://127.0.0.1:8081/test/\n  left: Some(\"test/\")\n right: None\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_make_relative",
            "test_syntax_violation_callback",
            "test_syntax_violation_callback_lifetimes"
          ]
        },
        {
          "id": "url/src/lib.rs:1354:9:1355:69:FnValue:Some(Split::from(Default::default()))",
          "duration": 0.360108122,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1354,
              "column": 9
            },
            "end": {
              "line": 1355,
              "column": 69
            }
          },
          "replacement": "Some(Split::from(Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by Some(Split::from(Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:2206:9:2252:15:FnValue:Ok(())",
          "duration": 1.721478237,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 2206,
              "column": 9
            },
            "end": {
              "line": 2252,
              "column": 15
            }
          },
          "replacement": "Ok(())",
          "status": "Killed",
          "description": "Replace FnValue by Ok(())",
          "statusReason": "thread 'test_set_empty_username_and_password' panicked at url/tests/unit.rs:71:5:\nassertion `left == right` failed\n  left: \"moz://foo:bar@servo/baz\"\n right: \"moz://:bar@servo/baz\"\n",
          "killedBy": [
            "test_set_empty_username_and_password",
            "test_set_empty_host"
          ]
        },
        {
          "id": "url/src/lib.rs:986:54:986:55:BinaryOperator:==",
          "duration": 1.7792651739999998,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 986,
              "column": 54
            },
            "end": {
              "line": 986,
              "column": 55
            }
          },
          "replacement": "==",
          "status": "Killed",
          "description": "Replace BinaryOperator by ==",
          "statusReason": "thread 'test_set_empty_hostname' panicked at url/tests/unit.rs:95:5:\nsetting an empty hostname to a url with a username should fail\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_set_empty_hostname"
          ]
        },
        {
          "id": "url/src/lib.rs:1129:9:1134:10:FnValue:Some(Host::from_iter([\"xyzzy\"]))",
          "duration": 0.618797741,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1129,
              "column": 9
            },
            "end": {
              "line": 1134,
              "column": 10
            }
          },
          "replacement": "Some(Host::from_iter([\"xyzzy\"]))",
          "status": "CompileError",
          "description": "Replace FnValue by Some(Host::from_iter([\"xyzzy\"]))",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:925:52:925:53:BinaryOperator:==",
          "duration": 2.6318245350000002,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 925,
              "column": 52
            },
            "end": {
              "line": 925,
              "column": 53
            }
          },
          "replacement": "==",
          "status": "Killed",
          "description": "Replace BinaryOperator by ==",
          "statusReason": "thread 'test_authority' panicked at url/tests/unit.rs:1244:5:\nassertion `left == right` failed\n  left: \"\"\n right: \"example.com\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_authority"
          ]
        },
        {
          "id": "url/src/lib.rs:3043:9:3045:10:FnValue:()",
          "duration": 3.646308079,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 3043,
              "column": 9
            },
            "end": {
              "line": 3045,
              "column": 10
            }
          },
          "replacement": "()",
          "status": "Killed",
          "description": "Replace FnValue by ()",
          "statusReason": "Test executable failed (exit status: 101).\n\nstderr:\nthread 'main' panicked at url/src/lib.rs:13:1:\nassertion `left == right` failed\n  left: \"https://example.net/?lang=fr&foo=bar\"\n right: \"https://example.net/?lang=fr&foo=bar#nav\"\nstack backtrace:\n   0:     0x560024b97e16 - std::backtrace_rs::backtrace::libunwind::trace::h5aa1f3f50fd6005d\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/../../backtrace/src/backtrace/libunwind.rs:104:5\n   1:     0x560024b97e16 - std::backtrace_rs::backtrace::trace_unsynchronized::h39f759d0ceaa839b\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/../../backtrace/src/backtrace/mod.rs:66:5\n   2:     0x560024b97e16 - std::sys_common::backtrace::_print_fmt::hfd4aa038a1413f7f\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:68:5\n   3:     0x560024b97e16 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::ha47fba1de44cec55\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:44:22\n   4:     0x560024bb572c - core::fmt::rt::Argument::fmt::h375396e1292b08cb\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/fmt/rt.rs:142:9\n   5:     0x560024bb572c - core::fmt::write::h93e0b545aa9eb320\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/fmt/mod.rs:1120:17\n   6:     0x560024b9602f - std::io::Write::write_fmt::h97fad0674ecdf154\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/io/mod.rs:1854:15\n   7:     0x560024b97bc4 - std::sys_common::backtrace::_print::hb7626a1b4ea382df\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:47:5\n   8:     0x560024b97bc4 - std::sys_common::backtrace::print::h89f2abc5b98b82a2\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:34:9\n   9:     0x560024b990bb - std::panicking::default_hook::{{closure}}::h73fe684137831048\n  10:     0x560024b98e09 - std::panicking::default_hook::h8dfe6e62b35915a0\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:292:9\n  11:     0x560024b9955d - std::panicking::rust_panic_with_hook::hc33e259baf535986\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:781:13\n  12:     0x560024b99432 - std::panicking::begin_panic_handler::{{closure}}::hcfbf8e29c9418131\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:659:13\n  13:     0x560024b982f6 - std::sys_common::backtrace::__rust_end_short_backtrace::h99b80dfa4797f5b6\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:171:18\n  14:     0x560024b99164 - rust_begin_unwind\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:647:5\n  15:     0x560024b32cf5 - core::panicking::panic_fmt::h96700527d99a56a9\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/panicking.rs:72:14\n  16:     0x560024b32ffb - core::panicking::assert_failed_inner::h88ed53873568fcef\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/panicking.rs:342:17\n  17:     0x560024b3380a - core::panicking::assert_failed::h03f34daddd0b0bf6\n  18:     0x560024b34062 - rust_out::main::_doctest_main_url_src_lib_rs_1586_0::run::h63f63857050ba174\n  19:     0x560024b33b89 - rust_out::main::_doctest_main_url_src_lib_rs_1586_0::hc1899b2c21d8c397\n  20:     0x560024b33b76 - rust_out::main::h11d1a6ed4289a3df\n  21:     0x560024b335c3 - core::ops::function::FnOnce::call_once::h903f19ac3af5d648\n  22:     0x560024b334b6 - std::sys_common::backtrace::__rust_begin_short_backtrace::ha11011b11b4aaa1f\n  23:     0x560024b33509 - std::rt::lang_start::{{closure}}::h196360a935ed97d8\n  24:     0x560024b94333 - core::ops::function::impls::<impl core::ops::function::FnOnce<A> for &F>::call_once::hb12a069c52b9e638\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/ops/function.rs:284:13\n  25:     0x560024b94333 - std::panicking::try::do_call::h34ba557680a1662c\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:554:40\n  26:     0x560024b94333 - std::panicking::try::hb88778117e3deeb6\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:518:19\n  27:     0x560024b94333 - std::panic::catch_unwind::hbd3c1fafc0d9693e\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panic.rs:142:14\n  28:     0x560024b94333 - std::rt::lang_start_internal::{{closure}}::h0b81b8de0028b6f3\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/rt.rs:148:48\n  29:     0x560024b94333 - std::panicking::try::do_call::hbbb521b5391ac872\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:554:40\n  30:     0x560024b94333 - std::panicking::try::hf108a0b7deb842f7\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:518:19\n  31:     0x560024b94333 - std::panic::catch_unwind::h6451f9c53324fd81\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panic.rs:142:14\n  32:     0x560024b94333 - std::rt::lang_start_internal::hc6ad905f9af5ea03\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/rt.rs:148:20\n  33:     0x560024b334e7 - std::rt::lang_start::h4d1167809e102347\n  34:     0x560024b34305 - main\n  35:     0x7f9ae69f0cd0 - <unknown>\n  36:     0x7f9ae69f0d8a - __libc_start_main\n  37:     0x560024b33315 - _start\n  38:                0x0 - <unknown>\n\n",
          "killedBy": [
            "url/src/lib.rs - Url::query_pairs_mut (line 1586)"
          ]
        },
        {
          "id": "url/src/lib.rs:452:71:452:73:BinaryOperator:&&",
          "duration": 2.582110437,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 452,
              "column": 71
            },
            "end": {
              "line": 452,
              "column": 73
            }
          },
          "replacement": "&&",
          "status": "Killed",
          "description": "Replace BinaryOperator by &&",
          "statusReason": "thread 'test_make_relative' panicked at url/tests/unit.rs:1219:9:\nassertion `left == right` failed: base: http://127.0.0.1:8080/, uri: http://127.0.0.1:8081/test/\n  left: Some(\"test/\")\n right: None\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_make_relative"
          ]
        },
        {
          "id": "url/src/lib.rs:1828:28:1828:30:BinaryOperator:+=",
          "duration": 4.267189751,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1828,
              "column": 28
            },
            "end": {
              "line": 1828,
              "column": 30
            }
          },
          "replacement": "+=",
          "status": "Survived",
          "description": "Replace BinaryOperator by +=",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:2143:73:2143:74:BinaryOperator:+",
          "duration": 1.582632193,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2143,
              "column": 73
            },
            "end": {
              "line": 2143,
              "column": 74
            }
          },
          "replacement": "+",
          "status": "Killed",
          "description": "Replace BinaryOperator by +",
          "statusReason": "thread 'test_set_empty_password' panicked at url/src/lib.rs:2144:13:\nassertion failed: has_username_or_password\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_set_empty_password",
            "test_set_empty_username_and_password"
          ]
        },
        {
          "id": "url/src/lib.rs:680:32:680:34:BinaryOperator:!=",
          "duration": 1.825856795,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 680,
              "column": 32
            },
            "end": {
              "line": 680,
              "column": 34
            }
          },
          "replacement": "!=",
          "status": "Killed",
          "description": "Replace BinaryOperator by !=",
          "statusReason": "thread 'extend_query_pairs_then_mutate' panicked at url/tests/unit.rs:477:28:\ncalled `Result::unwrap()` on an `Err` value: \"Some(6767) != None (self.port != None) for URL \\\"http://localhost:6767/foo/bar?auth=my-token\\\"\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "extend_query_pairs_then_mutate",
            "issue_197",
            "append_empty_segment_then_mutate",
            "append_trailing_slash",
            "issue_61"
          ]
        },
        {
          "id": "url/src/lib.rs:2003:31:2003:33:BinaryOperator:*=",
          "duration": 4.493540978,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2003,
              "column": 31
            },
            "end": {
              "line": 2003,
              "column": 33
            }
          },
          "replacement": "*=",
          "status": "Survived",
          "description": "Replace BinaryOperator by *=",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:2645:9:2645:22:FnValue:Ok(Default::default())",
          "duration": 0.51528946,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 2645,
              "column": 9
            },
            "end": {
              "line": 2645,
              "column": 22
            }
          },
          "replacement": "Ok(Default::default())",
          "status": "CompileError",
          "description": "Replace FnValue by Ok(Default::default())",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:986:33:986:35:BinaryOperator:||",
          "duration": 4.702929021999999,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 986,
              "column": 33
            },
            "end": {
              "line": 986,
              "column": 35
            }
          },
          "replacement": "||",
          "status": "Survived",
          "description": "Replace BinaryOperator by ||",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:1225:9:1225:66:FnValue:None",
          "duration": 2.791089608,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1225,
              "column": 9
            },
            "end": {
              "line": 1225,
              "column": 66
            }
          },
          "replacement": "None",
          "status": "Killed",
          "description": "Replace FnValue by None",
          "statusReason": "thread 'issue_61' panicked at url/tests/unit.rs:437:5:\nassertion `left == right` failed\n  left: None\n right: Some(443)\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "issue_61",
            "test_socket_addrs",
            "test_origin_unicode_serialization",
            "test_origin_hash",
            "test_origin_blob_equality"
          ]
        },
        {
          "id": "url/src/lib.rs:1387:45:1387:46:BinaryOperator:-",
          "duration": 1.571571046,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1387,
              "column": 45
            },
            "end": {
              "line": 1387,
              "column": 46
            }
          },
          "replacement": "-",
          "status": "Killed",
          "description": "Replace BinaryOperator by -",
          "statusReason": "thread 'test_query' panicked at url/tests/unit.rs:701:5:\nassertion `left == right` failed\n  left: Some(\"/?country=espa%C3%B1ol\")\n right: Some(\"country=espa%C3%B1ol\")\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_query"
          ]
        },
        {
          "id": "url/src/lib.rs:1634:9:1641:10:FnValue:String::new()",
          "duration": 1.732417419,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1634,
              "column": 9
            },
            "end": {
              "line": 1641,
              "column": 10
            }
          },
          "replacement": "String::new()",
          "status": "Killed",
          "description": "Replace FnValue by String::new()",
          "statusReason": "thread 'append_trailing_slash' panicked at url/src/lib.rs:1712:13:\nattempt to subtract with overflow\n",
          "killedBy": [
            "append_trailing_slash",
            "extend_query_pairs_then_mutate",
            "append_empty_segment_then_mutate"
          ]
        },
        {
          "id": "url/src/lib.rs:2141:51:2141:53:BinaryOperator:!=",
          "duration": 1.166031731,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2141,
              "column": 51
            },
            "end": {
              "line": 2141,
              "column": 53
            }
          },
          "replacement": "!=",
          "status": "Killed",
          "description": "Replace BinaryOperator by !=",
          "statusReason": "thread 'test_set_empty_username_and_password' panicked at url/tests/unit.rs:74:5:\nassertion `left == right` failed\n  left: \"moz://:bar@servo/baz\"\n right: \"moz://servo/baz\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_set_empty_username_and_password",
            "test_set_empty_password"
          ]
        },
        {
          "id": "url/src/lib.rs:1022:48:1022:50:BinaryOperator:!=",
          "duration": 1.333508671,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1022,
              "column": 48
            },
            "end": {
              "line": 1022,
              "column": 50
            }
          },
          "replacement": "!=",
          "status": "Killed",
          "description": "Replace BinaryOperator by !=",
          "statusReason": "[url/tests/unit.rs:1306:5] &url = Url {\n    scheme: \"file\",\n    cannot_be_a_base: false,\n    username: \"\",\n",
          "killedBy": [
            "issue_864",
            "test_set_empty_hostname"
          ]
        },
        {
          "id": "url/src/lib.rs:1307:9:1312:10:FnValue:\"xyzzy\"",
          "duration": 1.622970782,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1307,
              "column": 9
            },
            "end": {
              "line": 1312,
              "column": 10
            }
          },
          "replacement": "\"xyzzy\"",
          "status": "Killed",
          "description": "Replace FnValue by \"xyzzy\"",
          "statusReason": "thread 'issue_124' panicked at url/tests/unit.rs:244:5:\nassertion `left == right` failed\n  left: \"xyzzy\"\n right: \"/a\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "issue_124",
            "new_directory_paths",
            "new_file_paths",
            "test_file_with_drive_and_path",
            "new_path_bad_utf8",
            "test_file_with_drive",
            "test_non_special_path2",
            "test_non_special_path3",
            "test_no_base_url",
            "test_make_relative",
            "test_origin_blob_equality",
            "test_non_special_path",
            "test_url_from_file_path",
            "test_syntax_violation_callback_lifetimes"
          ]
        },
        {
          "id": "url/src/lib.rs:2637:9:2637:26:FnValue:Ok(Default::default())",
          "duration": 0.664971372,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 2637,
              "column": 9
            },
            "end": {
              "line": 2637,
              "column": 26
            }
          },
          "replacement": "Ok(Default::default())",
          "status": "CompileError",
          "description": "Replace FnValue by Ok(Default::default())",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:1813:28:1813:30:BinaryOperator:+=",
          "duration": 2.919588169,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1813,
              "column": 28
            },
            "end": {
              "line": 1813,
              "column": 30
            }
          },
          "replacement": "+=",
          "status": "Survived",
          "description": "Replace BinaryOperator by +=",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:1720:20:1720:22:BinaryOperator:-=",
          "duration": 1.02214137,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1720,
              "column": 20
            },
            "end": {
              "line": 1720,
              "column": 22
            }
          },
          "replacement": "-=",
          "status": "Killed",
          "description": "Replace BinaryOperator by -=",
          "statusReason": "thread 'append_empty_segment_then_mutate' panicked at url/src/lib.rs:1720:13:\nattempt to subtract with overflow\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "append_empty_segment_then_mutate",
            "extend_query_pairs_then_mutate",
            "append_trailing_slash"
          ]
        },
        {
          "id": "url/src/lib.rs:1983:24:1983:26:BinaryOperator:+=",
          "duration": 3.37138368,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1983,
              "column": 24
            },
            "end": {
              "line": 1983,
              "column": 26
            }
          },
          "replacement": "+=",
          "status": "Survived",
          "description": "Replace BinaryOperator by +=",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:924:9:929:10:FnValue:\"xyzzy\"",
          "duration": 2.1799204769999996,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 924,
              "column": 9
            },
            "end": {
              "line": 929,
              "column": 10
            }
          },
          "replacement": "\"xyzzy\"",
          "status": "Killed",
          "description": "Replace FnValue by \"xyzzy\"",
          "statusReason": "thread 'test_authority' panicked at url/tests/unit.rs:1238:5:\nassertion `left == right` failed\n  left: \"xyzzy\"\n right: \"\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_authority"
          ]
        },
        {
          "id": "url/src/lib.rs:2627:9:2627:50:FnValue:1",
          "duration": 2.417881675,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 2627,
              "column": 9
            },
            "end": {
              "line": 2627,
              "column": 50
            }
          },
          "replacement": "1",
          "status": "Killed",
          "description": "Replace FnValue by 1",
          "statusReason": "thread 'issue_197' panicked at url/tests/unit.rs:446:28:\ncalled `Result::unwrap()` on an `Err` value: \"!( self.byte_at(0).is_ascii_alphabetic() ) for URL \\\"file:///\\\"\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "issue_197",
            "append_trailing_slash",
            "append_empty_segment_then_mutate",
            "extend_query_pairs_then_mutate",
            "issue_61",
            "issue_864",
            "test_query",
            "test_authority",
            "test_set_empty_query",
            "test_has_authority",
            "test_set_empty_host",
            "test_set_empty_hostname",
            "test_set_empty_password",
            "parse_with_params",
            "path_backslash_fun",
            "test_fragment",
            "test_make_relative",
            "test_strip_trailing_spaces_from_opaque_path",
            "no_panic",
            "test_set_scheme_to_file_with_host",
            "test_set_host",
            "test_slicing",
            "test_set_empty_username_and_password",
            "test_set_ip_host"
          ]
        },
        {
          "id": "url/src/lib.rs:2807:5:2829:39:FnValue:Ok((0, Default::default()))",
          "duration": 0.410772234,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 2807,
              "column": 5
            },
            "end": {
              "line": 2829,
              "column": 39
            }
          },
          "replacement": "Ok((0, Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by Ok((0, Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:2143:78:2143:80:BinaryOperator:!=",
          "duration": 1.4701952649999999,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2143,
              "column": 78
            },
            "end": {
              "line": 2143,
              "column": 80
            }
          },
          "replacement": "!=",
          "status": "Killed",
          "description": "Replace BinaryOperator by !=",
          "statusReason": "thread 'test_set_empty_password' panicked at url/src/lib.rs:2144:13:\nassertion failed: has_username_or_password\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_set_empty_password",
            "test_set_empty_username_and_password"
          ]
        },
        {
          "id": "url/src/lib.rs:1307:9:1312:10:FnValue:\"\"",
          "duration": 1.405703603,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1307,
              "column": 9
            },
            "end": {
              "line": 1312,
              "column": 10
            }
          },
          "replacement": "\"\"",
          "status": "Killed",
          "description": "Replace FnValue by \"\"",
          "statusReason": "thread 'issue_124' panicked at url/tests/unit.rs:244:5:\nassertion `left == right` failed\n  left: \"\"\n right: \"/a\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "issue_124",
            "new_file_paths",
            "new_directory_paths",
            "new_path_bad_utf8",
            "test_file_with_drive",
            "test_file_with_drive_and_path",
            "test_make_relative",
            "test_no_base_url",
            "test_non_special_path",
            "test_non_special_path3",
            "test_non_special_path2",
            "test_origin_blob_equality",
            "test_syntax_violation_callback_lifetimes",
            "test_url_from_file_path"
          ]
        },
        {
          "id": "url/src/lib.rs:986:54:986:55:BinaryOperator:<",
          "duration": 1.46960303,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 986,
              "column": 54
            },
            "end": {
              "line": 986,
              "column": 55
            }
          },
          "replacement": "<",
          "status": "Killed",
          "description": "Replace BinaryOperator by <",
          "statusReason": "thread 'test_set_empty_hostname' panicked at url/tests/unit.rs:95:5:\nsetting an empty hostname to a url with a username should fail\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_set_empty_hostname"
          ]
        },
        {
          "id": "url/src/lib.rs:2112:44:2112:46:BinaryOperator:!=",
          "duration": 1.309670715,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2112,
              "column": 44
            },
            "end": {
              "line": 2112,
              "column": 46
            }
          },
          "replacement": "!=",
          "status": "Killed",
          "description": "Replace BinaryOperator by !=",
          "statusReason": "thread 'test_set_empty_password' panicked at url/tests/unit.rs:84:33:\ncalled `Result::unwrap()` on an `Err` value: ()\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_set_empty_password",
            "test_set_empty_username_and_password"
          ]
        },
        {
          "id": "url/src/lib.rs:1813:28:1813:30:BinaryOperator:/=",
          "duration": 2.065803021,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1813,
              "column": 28
            },
            "end": {
              "line": 1813,
              "column": 30
            }
          },
          "replacement": "/=",
          "status": "Survived",
          "description": "Replace BinaryOperator by /=",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:2690:28:2690:30:BinaryOperator:!=",
          "duration": 1.06529371,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2690,
              "column": 28
            },
            "end": {
              "line": 2690,
              "column": 30
            }
          },
          "replacement": "!=",
          "status": "Killed",
          "description": "Replace BinaryOperator by !=",
          "statusReason": "thread 'issue_197' panicked at url/tests/unit.rs:447:5:\nassertion `left == right` failed\n  left: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/\", query: None, fragment: None }\n right: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/\", query: None, fragment: None }\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "issue_197",
            "test_equality",
            "test_set_href",
            "test_null_host_with_leading_empty_path_segment"
          ]
        },
        {
          "id": "url/src/lib.rs:2627:9:2627:50:FnValue:0",
          "duration": 2.062868113,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 2627,
              "column": 9
            },
            "end": {
              "line": 2627,
              "column": 50
            }
          },
          "replacement": "0",
          "status": "Killed",
          "description": "Replace FnValue by 0",
          "statusReason": "thread 'extend_query_pairs_then_mutate' panicked at url/tests/unit.rs:477:28:\ncalled `Result::unwrap()` on an `Err` value: \"!( self.byte_at(0).is_ascii_alphabetic() ) for URL \\\"http://localhost:6767/foo/bar?auth=my-token\\\"\"\n",
          "killedBy": [
            "extend_query_pairs_then_mutate",
            "append_trailing_slash",
            "append_empty_segment_then_mutate",
            "issue_197",
            "issue_61",
            "issue_864",
            "no_panic",
            "parse_with_params",
            "path_backslash_fun",
            "test_authority",
            "test_fragment",
            "test_has_authority",
            "test_make_relative",
            "test_query",
            "test_set_empty_host",
            "test_set_empty_password",
            "test_set_empty_query",
            "test_set_empty_username_and_password",
            "test_set_host",
            "test_set_empty_hostname",
            "test_set_ip_host",
            "test_set_scheme_to_file_with_host",
            "test_slicing",
            "test_strip_trailing_spaces_from_opaque_path"
          ]
        },
        {
          "id": "url/src/lib.rs:2895:9:2895:11:BinaryOperator:||",
          "duration": 3.31095899,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2895,
              "column": 9
            },
            "end": {
              "line": 2895,
              "column": 11
            }
          },
          "replacement": "||",
          "status": "Survived",
          "description": "Replace BinaryOperator by ||",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:361:46:361:47:BinaryOperator:+",
          "duration": 2.371602009,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 361,
              "column": 46
            },
            "end": {
              "line": 361,
              "column": 47
            }
          },
          "replacement": "+",
          "status": "Killed",
          "description": "Replace BinaryOperator by +",
          "statusReason": "thread 'test_strip_trailing_spaces_from_opaque_path' panicked at url/tests/unit.rs:41:5:\nassertion `left == right` failed\n  left: \"data:space   \"\n right: \"data:space\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_strip_trailing_spaces_from_opaque_path"
          ]
        },
        {
          "id": "url/src/lib.rs:2020:20:2020:22:BinaryOperator:/=",
          "duration": 4.134589563,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2020,
              "column": 20
            },
            "end": {
              "line": 2020,
              "column": 22
            }
          },
          "replacement": "/=",
          "status": "Survived",
          "description": "Replace BinaryOperator by /=",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:684:57:684:58:BinaryOperator:-",
          "duration": 1.843004447,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 684,
              "column": 57
            },
            "end": {
              "line": 684,
              "column": 58
            }
          },
          "replacement": "-",
          "status": "Killed",
          "description": "Replace BinaryOperator by -",
          "statusReason": "thread 'extend_query_pairs_then_mutate' panicked at url/src/lib.rs:687:50:\nCouldn't parse port?: ParseIntError { kind: InvalidDigit }\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "extend_query_pairs_then_mutate",
            "append_empty_segment_then_mutate",
            "append_trailing_slash"
          ]
        },
        {
          "id": "url/src/lib.rs:1422:9:1422:70:FnValue:Default::default()",
          "duration": 0.151531585,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1422,
              "column": 9
            },
            "end": {
              "line": 1422,
              "column": 70
            }
          },
          "replacement": "Default::default()",
          "status": "CompileError",
          "description": "Replace FnValue by Default::default()",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:479:42:479:44:BinaryOperator:||",
          "duration": 22.901607379999998,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 479,
              "column": 42
            },
            "end": {
              "line": 479,
              "column": 44
            }
          },
          "replacement": "||",
          "status": "Timeout",
          "description": "Replace BinaryOperator by ||",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:959:37:959:38:BinaryOperator:-",
          "duration": 2.3630895,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 959,
              "column": 37
            },
            "end": {
              "line": 959,
              "column": 38
            }
          },
          "replacement": "-",
          "status": "Killed",
          "description": "Replace BinaryOperator by -",
          "statusReason": "thread 'append_empty_segment_then_mutate' panicked at url/tests/unit.rs:495:29:\ncalled `Result::unwrap()` on an `Err` value: ()\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "append_empty_segment_then_mutate",
            "append_trailing_slash",
            "extend_query_pairs_then_mutate",
            "issue_197",
            "no_panic",
            "path_backslash_fun",
            "pop_if_empty_in_bounds",
            "test_file_with_drive",
            "test_file_with_drive_and_path",
            "test_make_relative",
            "test_non_special_path",
            "test_non_special_path2",
            "test_non_special_path3",
            "test_options_reuse",
            "test_relative",
            "test_relative_empty",
            "test_set_empty_host",
            "test_set_empty_hostname",
            "test_set_host",
            "test_set_ip_host"
          ]
        },
        {
          "id": "url/src/lib.rs:452:42:452:44:BinaryOperator:&&",
          "duration": 2.1389599410000004,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 452,
              "column": 42
            },
            "end": {
              "line": 452,
              "column": 44
            }
          },
          "replacement": "&&",
          "status": "Killed",
          "description": "Replace BinaryOperator by &&",
          "statusReason": "thread 'test_make_relative' panicked at url/tests/unit.rs:1219:9:\nassertion `left == right` failed: base: http://127.0.0.1:8080/, uri: https://127.0.0.1:8080/test/\n  left: Some(\"test/\")\n right: None\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_make_relative"
          ]
        },
        {
          "id": "url/src/lib.rs:1828:28:1828:30:BinaryOperator:/=",
          "duration": 3.2296443569999997,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1828,
              "column": 28
            },
            "end": {
              "line": 1828,
              "column": 30
            }
          },
          "replacement": "/=",
          "status": "Survived",
          "description": "Replace BinaryOperator by /=",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:447:9:534:23:FnValue:Some(String::new())",
          "duration": 2.925414429,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 447,
              "column": 9
            },
            "end": {
              "line": 534,
              "column": 23
            }
          },
          "replacement": "Some(String::new())",
          "status": "Killed",
          "description": "Replace FnValue by Some(String::new())",
          "statusReason": "thread 'test_make_relative' panicked at url/tests/unit.rs:1193:9:\nassertion `left == right` failed: base: http://127.0.0.1:8080/test, uri: http://127.0.0.1:8080/test/, relative: test/\n  left: \"\"\n right: \"test/\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_make_relative"
          ]
        },
        {
          "id": "url/src/lib.rs:1267:9:1280:11:FnValue:Ok(vec![Default::default()])",
          "duration": 0.252312657,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1267,
              "column": 9
            },
            "end": {
              "line": 1280,
              "column": 11
            }
          },
          "replacement": "Ok(vec![Default::default()])",
          "status": "CompileError",
          "description": "Replace FnValue by Ok(vec![Default::default()])",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:2982:90:2982:92:BinaryOperator:==",
          "duration": 3.887353215,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2982,
              "column": 90
            },
            "end": {
              "line": 2982,
              "column": 92
            }
          },
          "replacement": "==",
          "status": "Survived",
          "description": "Replace BinaryOperator by ==",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:2209:46:2209:47:BinaryOperator:*",
          "duration": 2.679742238,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2209,
              "column": 46
            },
            "end": {
              "line": 2209,
              "column": 47
            }
          },
          "replacement": "*",
          "status": "Killed",
          "description": "Replace BinaryOperator by *",
          "statusReason": "thread 'test_set_empty_host' panicked at url/src/lib.rs:2210:9:\nassertion failed: self.slice(self.scheme_end..username_start) == \"://\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_set_empty_host",
            "test_set_empty_username_and_password"
          ]
        },
        {
          "id": "url/src/lib.rs:2162:24:2162:26:BinaryOperator:+=",
          "duration": 3.680606043,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2162,
              "column": 24
            },
            "end": {
              "line": 2162,
              "column": 26
            }
          },
          "replacement": "+=",
          "status": "Survived",
          "description": "Replace BinaryOperator by +=",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:2622:9:2622:44:FnValue:\"\"",
          "duration": 2.681610686,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 2622,
              "column": 9
            },
            "end": {
              "line": 2622,
              "column": 44
            }
          },
          "replacement": "\"\"",
          "status": "Killed",
          "description": "Replace FnValue by \"\"",
          "statusReason": "thread 'append_trailing_slash' panicked at url/tests/unit.rs:465:28:\ncalled `Result::unwrap()` on an `Err` value: \"7 != 5 (self.username_end != self.scheme_end + 1) for URL \\\"http://localhost:6767/foo/bar?a=b\\\"\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "append_trailing_slash",
            "new_directory_paths",
            "issue_197",
            "issue_61",
            "append_empty_segment_then_mutate",
            "host",
            "issue_124",
            "host_serialization",
            "new_file_paths",
            "test_origin_unicode_serialization",
            "test_idna",
            "test_domain",
            "test_authority",
            "no_panic",
            "test_origin_blob_equality",
            "test_fragment",
            "test_make_relative",
            "new_path_bad_utf8",
            "path_backslash_fun",
            "test_no_base_url",
            "test_leading_dots",
            "pop_if_empty_in_bounds",
            "test_has_authority",
            "test_file_with_drive_and_path",
            "test_file_with_drive",
            "test_non_special_path",
            "extend_query_pairs_then_mutate",
            "test_query",
            "test_relative",
            "test_set_empty_password",
            "test_set_ip_host",
            "test_set_empty_username_and_password",
            "test_socket_addrs",
            "test_set_empty_host",
            "test_non_special_path3",
            "test_set_host",
            "test_slicing",
            "test_set_empty_hostname",
            "test_options_reuse",
            "test_syntax_violation_callback_lifetimes",
            "test_relative_empty",
            "test_non_special_path2",
            "test_url_from_file_path"
          ]
        },
        {
          "id": "url/src/lib.rs:1129:9:1134:10:FnValue:Some(Host::new(\"xyzzy\"))",
          "duration": 0.560790735,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1129,
              "column": 9
            },
            "end": {
              "line": 1134,
              "column": 10
            }
          },
          "replacement": "Some(Host::new(\"xyzzy\"))",
          "status": "CompileError",
          "description": "Replace FnValue by Some(Host::new(\"xyzzy\"))",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:2389:20:2389:22:BinaryOperator:*=",
          "duration": 3.497445808,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2389,
              "column": 20
            },
            "end": {
              "line": 2389,
              "column": 22
            }
          },
          "replacement": "*=",
          "status": "Killed",
          "description": "Replace BinaryOperator by *=",
          "statusReason": "thread 'issue_61' panicked at url/src/lib.rs:2736:11:\nbyte index 70 is out of bounds of `https://mozilla.org/`\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "issue_61"
          ]
        },
        {
          "id": "url/src/lib.rs:1805:9:1840:26:FnValue:()",
          "duration": 5.754941475000001,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1805,
              "column": 9
            },
            "end": {
              "line": 1840,
              "column": 26
            }
          },
          "replacement": "()",
          "status": "Killed",
          "description": "Replace FnValue by ()",
          "statusReason": "Test executable failed (exit status: 101).\n\nstderr:\nthread 'main' panicked at url/src/lib.rs:12:1:\nassertion `left == right` failed\n  left: \"ssh://example.net:2048/\"\n right: \"ssh://example.net:4096/\"\nstack backtrace:\n   0:     0x55d6d980e746 - std::backtrace_rs::backtrace::libunwind::trace::h5aa1f3f50fd6005d\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/../../backtrace/src/backtrace/libunwind.rs:104:5\n   1:     0x55d6d980e746 - std::backtrace_rs::backtrace::trace_unsynchronized::h39f759d0ceaa839b\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/../../backtrace/src/backtrace/mod.rs:66:5\n   2:     0x55d6d980e746 - std::sys_common::backtrace::_print_fmt::hfd4aa038a1413f7f\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:68:5\n   3:     0x55d6d980e746 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::ha47fba1de44cec55\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:44:22\n   4:     0x55d6d982c1ec - core::fmt::rt::Argument::fmt::h375396e1292b08cb\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/fmt/rt.rs:142:9\n   5:     0x55d6d982c1ec - core::fmt::write::h93e0b545aa9eb320\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/fmt/mod.rs:1120:17\n   6:     0x55d6d980c95f - std::io::Write::write_fmt::h97fad0674ecdf154\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/io/mod.rs:1854:15\n   7:     0x55d6d980e4f4 - std::sys_common::backtrace::_print::hb7626a1b4ea382df\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:47:5\n   8:     0x55d6d980e4f4 - std::sys_common::backtrace::print::h89f2abc5b98b82a2\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:34:9\n   9:     0x55d6d980f9eb - std::panicking::default_hook::{{closure}}::h73fe684137831048\n  10:     0x55d6d980f739 - std::panicking::default_hook::h8dfe6e62b35915a0\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:292:9\n  11:     0x55d6d980fe8d - std::panicking::rust_panic_with_hook::hc33e259baf535986\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:781:13\n  12:     0x55d6d980fd62 - std::panicking::begin_panic_handler::{{closure}}::hcfbf8e29c9418131\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:659:13\n  13:     0x55d6d980ec26 - std::sys_common::backtrace::__rust_end_short_backtrace::h99b80dfa4797f5b6\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:171:18\n  14:     0x55d6d980fa94 - rust_begin_unwind\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:647:5\n  15:     0x55d6d97aacf5 - core::panicking::panic_fmt::h96700527d99a56a9\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/panicking.rs:72:14\n  16:     0x55d6d97aaffb - core::panicking::assert_failed_inner::h88ed53873568fcef\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/panicking.rs:342:17\n  17:     0x55d6d97ab7ea - core::panicking::assert_failed::h03f34daddd0b0bf6\n  18:     0x55d6d97ac341 - rust_out::main::_doctest_main_url_src_lib_rs_1740_0::run::h63016975195839ca\n  19:     0x55d6d97abf79 - rust_out::main::_doctest_main_url_src_lib_rs_1740_0::h4d6e77b9b542bcc6\n  20:     0x55d6d97abf66 - rust_out::main::h11d1a6ed4289a3df\n  21:     0x55d6d97ab5b3 - core::ops::function::FnOnce::call_once::h903f19ac3af5d648\n  22:     0x55d6d97ab4b6 - std::sys_common::backtrace::__rust_begin_short_backtrace::ha11011b11b4aaa1f\n  23:     0x55d6d97ab509 - std::rt::lang_start::{{closure}}::h196360a935ed97d8\n  24:     0x55d6d980ac63 - core::ops::function::impls::<impl core::ops::function::FnOnce<A> for &F>::call_once::hb12a069c52b9e638\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/ops/function.rs:284:13\n  25:     0x55d6d980ac63 - std::panicking::try::do_call::h34ba557680a1662c\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:554:40\n  26:     0x55d6d980ac63 - std::panicking::try::hb88778117e3deeb6\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:518:19\n  27:     0x55d6d980ac63 - std::panic::catch_unwind::hbd3c1fafc0d9693e\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panic.rs:142:14\n  28:     0x55d6d980ac63 - std::rt::lang_start_internal::{{closure}}::h0b81b8de0028b6f3\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/rt.rs:148:48\n  29:     0x55d6d980ac63 - std::panicking::try::do_call::hbbb521b5391ac872\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:554:40\n  30:     0x55d6d980ac63 - std::panicking::try::hf108a0b7deb842f7\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:518:19\n  31:     0x55d6d980ac63 - std::panic::catch_unwind::h6451f9c53324fd81\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panic.rs:142:14\n  32:     0x55d6d980ac63 - std::rt::lang_start_internal::hc6ad905f9af5ea03\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/rt.rs:148:20\n  33:     0x55d6d97ab4e7 - std::rt::lang_start::h4d1167809e102347\n  34:     0x55d6d97ac5a5 - main\n  35:     0x7f6c24586cd0 - <unknown>\n  36:     0x7f6c24586d8a - __libc_start_main\n  37:     0x55d6d97ab315 - _start\n  38:                0x0 - <unknown>\n\n",
          "killedBy": [
            "url/src/lib.rs - Url::set_port (line 1740)"
          ]
        },
        {
          "id": "url/src/lib.rs:1354:9:1355:69:FnValue:Some(Split::new(Default::default()))",
          "duration": 0.727569121,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1354,
              "column": 9
            },
            "end": {
              "line": 1355,
              "column": 69
            }
          },
          "replacement": "Some(Split::new(Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by Some(Split::new(Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:2982:37:2982:39:BinaryOperator:&&",
          "duration": 5.631865507,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2982,
              "column": 37
            },
            "end": {
              "line": 2982,
              "column": 39
            }
          },
          "replacement": "&&",
          "status": "Survived",
          "description": "Replace BinaryOperator by &&",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:2776:9:2798:49:FnValue:Ok(Default::default())",
          "duration": 5.54906555,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 2776,
              "column": 9
            },
            "end": {
              "line": 2798,
              "column": 49
            }
          },
          "replacement": "Ok(Default::default())",
          "status": "Survived",
          "description": "Replace FnValue by Ok(Default::default())",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:1460:30:1460:31:BinaryOperator:*",
          "duration": 1.363689581,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1460,
              "column": 30
            },
            "end": {
              "line": 1460,
              "column": 31
            }
          },
          "replacement": "*",
          "status": "Killed",
          "description": "Replace BinaryOperator by *",
          "statusReason": "thread 'test_fragment' panicked at url/tests/unit.rs:724:5:\nassertion `left == right` failed\n  left: Some(\"#fragment\")\n right: Some(\"fragment\")\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_fragment",
            "test_make_relative"
          ]
        },
        {
          "id": "url/src/lib.rs:1614:9:1630:80:FnValue:Serializer::new()",
          "duration": 0.20174193,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1614,
              "column": 9
            },
            "end": {
              "line": 1630,
              "column": 80
            }
          },
          "replacement": "Serializer::new()",
          "status": "CompileError",
          "description": "Replace FnValue by Serializer::new()",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:1021:34:1021:36:BinaryOperator:==",
          "duration": 0.7058122280000001,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1021,
              "column": 34
            },
            "end": {
              "line": 1021,
              "column": 36
            }
          },
          "replacement": "==",
          "status": "Killed",
          "description": "Replace BinaryOperator by ==",
          "statusReason": "thread 'test_set_empty_hostname' panicked at url/tests/unit.rs:100:5:\nsetting an empty hostname to a url with a password should fail\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_set_empty_hostname"
          ]
        },
        {
          "id": "url/src/lib.rs:2986:40:2986:41:BinaryOperator:*",
          "duration": 0.151633466,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2986,
              "column": 40
            },
            "end": {
              "line": 2986,
              "column": 41
            }
          },
          "replacement": "*",
          "status": "CompileError",
          "description": "Replace BinaryOperator by *",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:2367:9:2414:15:FnValue:Ok(())",
          "duration": 1.078029476,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 2367,
              "column": 9
            },
            "end": {
              "line": 2414,
              "column": 15
            }
          },
          "replacement": "Ok(())",
          "status": "Killed",
          "description": "Replace FnValue by Ok(())",
          "statusReason": "thread 'issue_61' panicked at url/tests/unit.rs:437:5:\nassertion `left == right` failed\n  left: Some(80)\n right: Some(443)\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "issue_61",
            "test_set_scheme_to_file_with_host"
          ]
        },
        {
          "id": "url/src/lib.rs:987:40:987:41:BinaryOperator:-",
          "duration": 2.8599380020000003,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 987,
              "column": 40
            },
            "end": {
              "line": 987,
              "column": 41
            }
          },
          "replacement": "-",
          "status": "Killed",
          "description": "Replace BinaryOperator by -",
          "statusReason": "Test executable failed (exit status: 101).\n\nstderr:\nthread 'main' panicked at url/src/lib.rs:11:1:\nassertion `left == right` failed\n  left: \"ftp://user1\"\n right: \"user1\"\nstack backtrace:\n   0:     0x55e27052e666 - std::backtrace_rs::backtrace::libunwind::trace::h5aa1f3f50fd6005d\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/../../backtrace/src/backtrace/libunwind.rs:104:5\n   1:     0x55e27052e666 - std::backtrace_rs::backtrace::trace_unsynchronized::h39f759d0ceaa839b\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/../../backtrace/src/backtrace/mod.rs:66:5\n   2:     0x55e27052e666 - std::sys_common::backtrace::_print_fmt::hfd4aa038a1413f7f\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:68:5\n   3:     0x55e27052e666 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::ha47fba1de44cec55\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:44:22\n   4:     0x55e27054bf7c - core::fmt::rt::Argument::fmt::h375396e1292b08cb\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/fmt/rt.rs:142:9\n   5:     0x55e27054bf7c - core::fmt::write::h93e0b545aa9eb320\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/fmt/mod.rs:1120:17\n   6:     0x55e27052c87f - std::io::Write::write_fmt::h97fad0674ecdf154\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/io/mod.rs:1854:15\n   7:     0x55e27052e414 - std::sys_common::backtrace::_print::hb7626a1b4ea382df\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:47:5\n   8:     0x55e27052e414 - std::sys_common::backtrace::print::h89f2abc5b98b82a2\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:34:9\n   9:     0x55e27052f90b - std::panicking::default_hook::{{closure}}::h73fe684137831048\n  10:     0x55e27052f659 - std::panicking::default_hook::h8dfe6e62b35915a0\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:292:9\n  11:     0x55e27052fdad - std::panicking::rust_panic_with_hook::hc33e259baf535986\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:781:13\n  12:     0x55e27052fc82 - std::panicking::begin_panic_handler::{{closure}}::hcfbf8e29c9418131\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:659:13\n  13:     0x55e27052eb46 - std::sys_common::backtrace::__rust_end_short_backtrace::h99b80dfa4797f5b6\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:171:18\n  14:     0x55e27052f9b4 - rust_begin_unwind\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:647:5\n  15:     0x55e2704cacf5 - core::panicking::panic_fmt::h96700527d99a56a9\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/panicking.rs:72:14\n  16:     0x55e2704caffb - core::panicking::assert_failed_inner::h88ed53873568fcef\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/panicking.rs:342:17\n  17:     0x55e2704cb5ca - core::panicking::assert_failed::h03f34daddd0b0bf6\n  18:     0x55e2704cba98 - rust_out::main::_doctest_main_url_src_lib_rs_2190_0::run::hb430b6002cdc2ae3\n  19:     0x55e2704cb7a9 - rust_out::main::_doctest_main_url_src_lib_rs_2190_0::ha0e174e61eb641d4\n  20:     0x55e2704cb796 - rust_out::main::h11d1a6ed4289a3df\n  21:     0x55e2704cb4f3 - core::ops::function::FnOnce::call_once::h903f19ac3af5d648\n  22:     0x55e2704cb3f6 - std::sys_common::backtrace::__rust_begin_short_backtrace::ha11011b11b4aaa1f\n  23:     0x55e2704cb449 - std::rt::lang_start::{{closure}}::h196360a935ed97d8\n  24:     0x55e27052ab83 - core::ops::function::impls::<impl core::ops::function::FnOnce<A> for &F>::call_once::hb12a069c52b9e638\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/ops/function.rs:284:13\n  25:     0x55e27052ab83 - std::panicking::try::do_call::h34ba557680a1662c\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:554:40\n  26:     0x55e27052ab83 - std::panicking::try::hb88778117e3deeb6\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:518:19\n  27:     0x55e27052ab83 - std::panic::catch_unwind::hbd3c1fafc0d9693e\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panic.rs:142:14\n  28:     0x55e27052ab83 - std::rt::lang_start_internal::{{closure}}::h0b81b8de0028b6f3\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/rt.rs:148:48\n  29:     0x55e27052ab83 - std::panicking::try::do_call::hbbb521b5391ac872\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:554:40\n  30:     0x55e27052ab83 - std::panicking::try::hf108a0b7deb842f7\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:518:19\n  31:     0x55e27052ab83 - std::panic::catch_unwind::h6451f9c53324fd81\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panic.rs:142:14\n  32:     0x55e27052ab83 - std::rt::lang_start_internal::hc6ad905f9af5ea03\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/rt.rs:148:20\n  33:     0x55e2704cb427 - std::rt::lang_start::h4d1167809e102347\n  34:     0x55e2704cbba5 - main\n  35:     0x7fba4a690cd0 - <unknown>\n  36:     0x7fba4a690d8a - __libc_start_main\n  37:     0x55e2704cb315 - _start\n  38:                0x0 - <unknown>\n\n",
          "killedBy": [
            "url/src/lib.rs - Url::set_username (line 2190)",
            "url/src/lib.rs - Url::username (line 967)"
          ]
        },
        {
          "id": "url/src/lib.rs:2112:70:2112:72:BinaryOperator:&&",
          "duration": 5.020246888,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2112,
              "column": 70
            },
            "end": {
              "line": 2112,
              "column": 72
            }
          },
          "replacement": "&&",
          "status": "Survived",
          "description": "Replace BinaryOperator by &&",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:2382:34:2382:36:BinaryOperator:&&",
          "duration": 5.906305753,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2382,
              "column": 34
            },
            "end": {
              "line": 2382,
              "column": 36
            }
          },
          "replacement": "&&",
          "status": "Survived",
          "description": "Replace BinaryOperator by &&",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:2763:9:2763:48:FnValue:Ok(Default::default())",
          "duration": 5.134378391,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 2763,
              "column": 9
            },
            "end": {
              "line": 2763,
              "column": 48
            }
          },
          "replacement": "Ok(Default::default())",
          "status": "Survived",
          "description": "Replace FnValue by Ok(Default::default())",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:1991:9:2029:10:FnValue:()",
          "duration": 3.440719745,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1991,
              "column": 9
            },
            "end": {
              "line": 2029,
              "column": 10
            }
          },
          "replacement": "()",
          "status": "Killed",
          "description": "Replace FnValue by ()",
          "statusReason": "thread 'test_set_ip_host' panicked at url/tests/unit.rs:735:5:\nassertion `left == right` failed\n  left: Some(\"example.com\")\n right: Some(\"127.0.0.1\")\n",
          "killedBy": [
            "test_set_ip_host",
            "test_set_host",
            "test_set_empty_host",
            "test_set_empty_hostname"
          ]
        },
        {
          "id": "url/src/lib.rs:2233:29:2233:31:BinaryOperator:-=",
          "duration": 3.939214207,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2233,
              "column": 29
            },
            "end": {
              "line": 2233,
              "column": 31
            }
          },
          "replacement": "-=",
          "status": "Survived",
          "description": "Replace BinaryOperator by -=",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:1053:9:1053:49:FnValue:true",
          "duration": 4.843692146,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1053,
              "column": 9
            },
            "end": {
              "line": 1053,
              "column": 49
            }
          },
          "replacement": "true",
          "status": "Killed",
          "description": "Replace FnValue by true",
          "statusReason": "Test executable failed (exit status: 101).\n\nstderr:\nthread 'main' panicked at url/src/lib.rs:16:1:\nassertion `left == right` failed\n  left: Some(\"\")\n right: None\nstack backtrace:\n   0:     0x55bf4c552e06 - std::backtrace_rs::backtrace::libunwind::trace::h5aa1f3f50fd6005d\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/../../backtrace/src/backtrace/libunwind.rs:104:5\n   1:     0x55bf4c552e06 - std::backtrace_rs::backtrace::trace_unsynchronized::h39f759d0ceaa839b\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/../../backtrace/src/backtrace/mod.rs:66:5\n   2:     0x55bf4c552e06 - std::sys_common::backtrace::_print_fmt::hfd4aa038a1413f7f\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:68:5\n   3:     0x55bf4c552e06 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::ha47fba1de44cec55\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:44:22\n   4:     0x55bf4c57071c - core::fmt::rt::Argument::fmt::h375396e1292b08cb\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/fmt/rt.rs:142:9\n   5:     0x55bf4c57071c - core::fmt::write::h93e0b545aa9eb320\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/fmt/mod.rs:1120:17\n   6:     0x55bf4c55101f - std::io::Write::write_fmt::h97fad0674ecdf154\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/io/mod.rs:1854:15\n   7:     0x55bf4c552bb4 - std::sys_common::backtrace::_print::hb7626a1b4ea382df\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:47:5\n   8:     0x55bf4c552bb4 - std::sys_common::backtrace::print::h89f2abc5b98b82a2\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:34:9\n   9:     0x55bf4c5540ab - std::panicking::default_hook::{{closure}}::h73fe684137831048\n  10:     0x55bf4c553df9 - std::panicking::default_hook::h8dfe6e62b35915a0\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:292:9\n  11:     0x55bf4c55454d - std::panicking::rust_panic_with_hook::hc33e259baf535986\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:781:13\n  12:     0x55bf4c554422 - std::panicking::begin_panic_handler::{{closure}}::hcfbf8e29c9418131\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:659:13\n  13:     0x55bf4c5532e6 - std::sys_common::backtrace::__rust_end_short_backtrace::h99b80dfa4797f5b6\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:171:18\n  14:     0x55bf4c554154 - rust_begin_unwind\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:647:5\n  15:     0x55bf4c4efcf5 - core::panicking::panic_fmt::h96700527d99a56a9\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/panicking.rs:72:14\n  16:     0x55bf4c4efffb - core::panicking::assert_failed_inner::h88ed53873568fcef\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/panicking.rs:342:17\n  17:     0x55bf4c4f05ba - core::panicking::assert_failed::hb35f7c6aa33d29e8\n  18:     0x55bf4c4f0ecc - rust_out::main::_doctest_main_url_src_lib_rs_1069_0::run::hf65e535ce298d305\n  19:     0x55bf4c4f07b9 - rust_out::main::_doctest_main_url_src_lib_rs_1069_0::h6119f33d95f99f41\n  20:     0x55bf4c4f07a6 - rust_out::main::h11d1a6ed4289a3df\n  21:     0x55bf4c4f04f3 - core::ops::function::FnOnce::call_once::h903f19ac3af5d648\n  22:     0x55bf4c4f03f6 - std::sys_common::backtrace::__rust_begin_short_backtrace::ha11011b11b4aaa1f\n  23:     0x55bf4c4f0449 - std::rt::lang_start::{{closure}}::h196360a935ed97d8\n  24:     0x55bf4c54f323 - core::ops::function::impls::<impl core::ops::function::FnOnce<A> for &F>::call_once::hb12a069c52b9e638\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/ops/function.rs:284:13\n  25:     0x55bf4c54f323 - std::panicking::try::do_call::h34ba557680a1662c\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:554:40\n  26:     0x55bf4c54f323 - std::panicking::try::hb88778117e3deeb6\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:518:19\n  27:     0x55bf4c54f323 - std::panic::catch_unwind::hbd3c1fafc0d9693e\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panic.rs:142:14\n  28:     0x55bf4c54f323 - std::rt::lang_start_internal::{{closure}}::h0b81b8de0028b6f3\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/rt.rs:148:48\n  29:     0x55bf4c54f323 - std::panicking::try::do_call::hbbb521b5391ac872\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:554:40\n  30:     0x55bf4c54f323 - std::panicking::try::hf108a0b7deb842f7\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:518:19\n  31:     0x55bf4c54f323 - std::panic::catch_unwind::h6451f9c53324fd81\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panic.rs:142:14\n  32:     0x55bf4c54f323 - std::rt::lang_start_internal::hc6ad905f9af5ea03\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/rt.rs:148:20\n  33:     0x55bf4c4f0427 - std::rt::lang_start::h4d1167809e102347\n  34:     0x55bf4c4f11f5 - main\n  35:     0x7f48f6919cd0 - <unknown>\n  36:     0x7f48f6919d8a - __libc_start_main\n  37:     0x55bf4c4f0315 - _start\n  38:                0x0 - <unknown>\n\n",
          "killedBy": [
            "url/src/lib.rs - Url::host_str (line 1069)",
            "url/src/lib.rs - Url::has_host (line 1035)",
            "url/src/lib.rs - Url::set_username (line 2175)",
            "url/src/lib.rs - Url::set_port (line 1775)",
            "url/src/lib.rs - Url::set_password (line 2089)"
          ]
        },
        {
          "id": "url/src/lib.rs:463:13:469:14:FnValue:(\"xyzzy\", \"xyzzy\")",
          "duration": 2.38152607,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 463,
              "column": 13
            },
            "end": {
              "line": 469,
              "column": 14
            }
          },
          "replacement": "(\"xyzzy\", \"xyzzy\")",
          "status": "Killed",
          "description": "Replace FnValue by (\"xyzzy\", \"xyzzy\")",
          "statusReason": "thread 'test_make_relative' panicked at url/tests/unit.rs:1193:9:\nassertion `left == right` failed: base: http://127.0.0.1:8080/test, uri: http://127.0.0.1:8080/test/, relative: test/\n  left: \"\"\n right: \"test/\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_make_relative"
          ]
        },
        {
          "id": "url/src/lib.rs:2846:5:2901:34:FnValue:Ok((1, Default::default()))",
          "duration": 0.61669477,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 2846,
              "column": 5
            },
            "end": {
              "line": 2901,
              "column": 34
            }
          },
          "replacement": "Ok((1, Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by Ok((1, Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:557:9:561:10:FnValue:Default::default()",
          "duration": 0.470881328,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 557,
              "column": 9
            },
            "end": {
              "line": 561,
              "column": 10
            }
          },
          "replacement": "Default::default()",
          "status": "CompileError",
          "description": "Replace FnValue by Default::default()",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:1933:32:1933:34:BinaryOperator:||",
          "duration": 2.424001868,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1933,
              "column": 32
            },
            "end": {
              "line": 1933,
              "column": 34
            }
          },
          "replacement": "||",
          "status": "Killed",
          "description": "Replace BinaryOperator by ||",
          "statusReason": "thread 'test_set_host' panicked at url/tests/unit.rs:504:35:\ncalled `Result::unwrap()` on an `Err` value: EmptyHost\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_set_host"
          ]
        },
        {
          "id": "url/src/lib.rs:584:9:584:28:FnValue:\"xyzzy\"",
          "duration": 1.9893823990000001,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 584,
              "column": 9
            },
            "end": {
              "line": 584,
              "column": 28
            }
          },
          "replacement": "\"xyzzy\"",
          "status": "Killed",
          "description": "Replace FnValue by \"xyzzy\"",
          "statusReason": "thread 'append_empty_segment_then_mutate' panicked at url/src/lib.rs:722:47:\nFailed to parse myself?: RelativeUrlWithoutBase\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "append_empty_segment_then_mutate",
            "append_trailing_slash",
            "issue_197",
            "issue_61",
            "path_backslash_fun",
            "extend_query_pairs_then_mutate",
            "test_null_host_with_leading_empty_path_segment",
            "parse_with_params",
            "test_set_host",
            "test_non_special_path2",
            "test_non_special_path3",
            "test_relative",
            "test_set_empty_hostname",
            "test_set_empty_query",
            "test_make_relative",
            "test_non_special_path",
            "test_set_empty_username_and_password",
            "test_strip_trailing_spaces_from_opaque_path",
            "test_set_empty_host",
            "test_options_reuse",
            "test_relative_empty",
            "test_serialization",
            "test_set_empty_password"
          ]
        },
        {
          "id": "url/src/lib.rs:2382:55:2382:57:BinaryOperator:||",
          "duration": 1.5264574519999998,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2382,
              "column": 55
            },
            "end": {
              "line": 2382,
              "column": 57
            }
          },
          "replacement": "||",
          "status": "Killed",
          "description": "Replace BinaryOperator by ||",
          "statusReason": "thread 'issue_61' panicked at url/tests/unit.rs:435:29:\ncalled `Result::unwrap()` on an `Err` value: ()\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "issue_61"
          ]
        },
        {
          "id": "url/src/lib.rs:2206:87:2206:89:BinaryOperator:!=",
          "duration": 1.3224235850000001,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2206,
              "column": 87
            },
            "end": {
              "line": 2206,
              "column": 89
            }
          },
          "replacement": "!=",
          "status": "Killed",
          "description": "Replace BinaryOperator by !=",
          "statusReason": "thread 'test_set_empty_host' panicked at url/tests/unit.rs:51:27:\ncalled `Result::unwrap()` on an `Err` value: ()\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_set_empty_host",
            "test_set_empty_username_and_password"
          ]
        },
        {
          "id": "url/src/lib.rs:1193:9:1193:18:FnValue:Some(1)",
          "duration": 2.337896732,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1193,
              "column": 9
            },
            "end": {
              "line": 1193,
              "column": 18
            }
          },
          "replacement": "Some(1)",
          "status": "Killed",
          "description": "Replace FnValue by Some(1)",
          "statusReason": "thread 'issue_61' panicked at url/tests/unit.rs:436:5:\nassertion `left == right` failed\n  left: Some(1)\n right: None\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "issue_61",
            "test_syntax_violation_callback_lifetimes",
            "test_syntax_violation_callback",
            "test_make_relative"
          ]
        },
        {
          "id": "url/src/lib.rs:2154:30:2154:31:BinaryOperator:/",
          "duration": 3.5637021740000003,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2154,
              "column": 30
            },
            "end": {
              "line": 2154,
              "column": 31
            }
          },
          "replacement": "/",
          "status": "Survived",
          "description": "Replace BinaryOperator by /",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:2690:9:2690:50:FnValue:false",
          "duration": 2.21995763,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 2690,
              "column": 9
            },
            "end": {
              "line": 2690,
              "column": 50
            }
          },
          "replacement": "false",
          "status": "Killed",
          "description": "Replace FnValue by false",
          "statusReason": "thread 'test_null_host_with_leading_empty_path_segment' panicked at url/tests/unit.rs:1000:5:\nassertion `left == right` failed\n  left: Url { scheme: \"m\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"//\\\\\", query: None, fragment: None }\n right: Url { scheme: \"m\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"//\\\\\", query: None, fragment: None }\n",
          "killedBy": [
            "test_null_host_with_leading_empty_path_segment",
            "issue_197",
            "test_equality",
            "test_set_href"
          ]
        },
        {
          "id": "url/src/lib.rs:1129:9:1134:10:FnValue:Some(Host::new())",
          "duration": 0.83004555,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1129,
              "column": 9
            },
            "end": {
              "line": 1134,
              "column": 10
            }
          },
          "replacement": "Some(Host::new())",
          "status": "CompileError",
          "description": "Replace FnValue by Some(Host::new())",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:1630:68:1630:69:BinaryOperator:*",
          "duration": 1.71390914,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1630,
              "column": 68
            },
            "end": {
              "line": 1630,
              "column": 69
            }
          },
          "replacement": "*",
          "status": "Killed",
          "description": "Replace BinaryOperator by *",
          "statusReason": "thread 'extend_query_pairs_then_mutate' panicked at url/tests/unit.rs:478:5:\nassertion `left == right` failed\n  left: \"http://localhost:6767/foo/bar?&auth=my-token\"\n right: \"http://localhost:6767/foo/bar?auth=my-token\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "extend_query_pairs_then_mutate"
          ]
        },
        {
          "id": "url/src/lib.rs:987:40:987:41:BinaryOperator:*",
          "duration": 2.777879544,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 987,
              "column": 40
            },
            "end": {
              "line": 987,
              "column": 41
            }
          },
          "replacement": "*",
          "status": "Killed",
          "description": "Replace BinaryOperator by *",
          "statusReason": "thread 'test_set_empty_hostname' panicked at url/tests/unit.rs:95:5:\nsetting an empty hostname to a url with a username should fail\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_set_empty_hostname"
          ]
        },
        {
          "id": "url/src/lib.rs:1460:30:1460:31:BinaryOperator:-",
          "duration": 3.04521835,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1460,
              "column": 30
            },
            "end": {
              "line": 1460,
              "column": 31
            }
          },
          "replacement": "-",
          "status": "Killed",
          "description": "Replace BinaryOperator by -",
          "statusReason": "thread 'test_make_relative' panicked at url/tests/unit.rs:1193:9:\nassertion `left == right` failed: base: http://127.0.0.1:8080/, uri: http://127.0.0.1:8080/?foo=bar#123, relative: ?foo=bar#123\n  left: \"?foo=bar#r#123\"\n right: \"?foo=bar#123\"\n",
          "killedBy": [
            "test_make_relative",
            "test_fragment"
          ]
        },
        {
          "id": "url/src/lib.rs:2447:9:2461:11:FnValue:Ok(Default::default())",
          "duration": 0.553344768,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 2447,
              "column": 9
            },
            "end": {
              "line": 2461,
              "column": 11
            }
          },
          "replacement": "Ok(Default::default())",
          "status": "CompileError",
          "description": "Replace FnValue by Ok(Default::default())",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:1959:48:1959:50:BinaryOperator:!=",
          "duration": 1.090184127,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1959,
              "column": 48
            },
            "end": {
              "line": 1959,
              "column": 50
            }
          },
          "replacement": "!=",
          "status": "Killed",
          "description": "Replace BinaryOperator by !=",
          "statusReason": "thread 'test_set_empty_host' panicked at url/tests/unit.rs:54:5:\nassertion `left == right` failed\n  left: \"moz:/baz/\"\n right: \"moz:/baz\"\n",
          "killedBy": [
            "test_set_empty_host",
            "test_set_host"
          ]
        },
        {
          "id": "url/src/lib.rs:2970:60:2970:62:BinaryOperator:&&",
          "duration": 3.035833704,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2970,
              "column": 60
            },
            "end": {
              "line": 2970,
              "column": 62
            }
          },
          "replacement": "&&",
          "status": "Survived",
          "description": "Replace BinaryOperator by &&",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:1021:13:1021:15:BinaryOperator:||",
          "duration": 2.070989873,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1021,
              "column": 13
            },
            "end": {
              "line": 1021,
              "column": 15
            }
          },
          "replacement": "||",
          "status": "Killed",
          "description": "Replace BinaryOperator by ||",
          "statusReason": "[url/tests/unit.rs:1306:5] &url = Url {\n    scheme: \"file\",\n    cannot_be_a_base: false,\n    username: \"\",\n",
          "killedBy": [
            "issue_864",
            "test_set_empty_hostname"
          ]
        },
        {
          "id": "url/src/lib.rs:1614:9:1630:80:FnValue:Serializer::from(Default::default())",
          "duration": 0.511022698,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1614,
              "column": 9
            },
            "end": {
              "line": 1630,
              "column": 80
            }
          },
          "replacement": "Serializer::from(Default::default())",
          "status": "CompileError",
          "description": "Replace FnValue by Serializer::from(Default::default())",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:2932:30:2932:31:BinaryOperator:/",
          "duration": 3.423559349,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2932,
              "column": 30
            },
            "end": {
              "line": 2932,
              "column": 31
            }
          },
          "replacement": "/",
          "status": "Survived",
          "description": "Replace BinaryOperator by /",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:2146:49:2146:51:BinaryOperator:!=",
          "duration": 1.458296842,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2146,
              "column": 49
            },
            "end": {
              "line": 2146,
              "column": 51
            }
          },
          "replacement": "!=",
          "status": "Killed",
          "description": "Replace BinaryOperator by !=",
          "statusReason": "thread 'test_set_empty_username_and_password' panicked at url/tests/unit.rs:74:5:\nassertion `left == right` failed\n  left: \"moz://@servo/baz\"\n right: \"moz://servo/baz\"\n",
          "killedBy": [
            "test_set_empty_username_and_password",
            "test_set_empty_password"
          ]
        },
        {
          "id": "url/src/lib.rs:2601:9:2612:16:FnValue:Ok(Default::default())",
          "duration": 1.4592615930000001,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 2601,
              "column": 9
            },
            "end": {
              "line": 2612,
              "column": 16
            }
          },
          "replacement": "Ok(Default::default())",
          "status": "Killed",
          "description": "Replace FnValue by Ok(Default::default())",
          "statusReason": "thread 'new_path_bad_utf8' panicked at url/tests/unit.rs:161:5:\nassertion `left == right` failed\n  left: Ok(\"\")\n right: Ok(\"/foo/ba\\x80r\")\n",
          "killedBy": [
            "new_path_bad_utf8",
            "new_file_paths",
            "test_url_from_file_path"
          ]
        },
        {
          "id": "url/src/lib.rs:2736:9:2736:51:FnValue:\"\"",
          "duration": 1.226776226,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 2736,
              "column": 9
            },
            "end": {
              "line": 2736,
              "column": 51
            }
          },
          "replacement": "\"\"",
          "status": "Killed",
          "description": "Replace FnValue by \"\"",
          "statusReason": "thread 'append_empty_segment_then_mutate' panicked at url/tests/unit.rs:494:28:\ncalled `Result::unwrap()` on an `Err` value: \"!( !host_str.is_empty() ) for URL \\\"http://localhost:6767/foo/bar?a=b\\\"\"\n",
          "killedBy": [
            "append_empty_segment_then_mutate",
            "extend_query_pairs_then_mutate",
            "append_trailing_slash",
            "host_serialization",
            "host",
            "issue_61",
            "no_panic",
            "test_authority",
            "test_domain",
            "test_file_with_drive",
            "test_file_with_drive_and_path",
            "test_idna",
            "test_leading_dots",
            "test_make_relative",
            "test_query",
            "test_origin_unicode_serialization",
            "test_set_empty_host",
            "test_set_empty_hostname",
            "test_set_empty_password",
            "test_set_empty_username_and_password",
            "test_set_ip_host",
            "test_socket_addrs"
          ]
        },
        {
          "id": "url/src/lib.rs:1020:9:1028:10:FnValue:None",
          "duration": 1.2717402580000001,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1020,
              "column": 9
            },
            "end": {
              "line": 1028,
              "column": 10
            }
          },
          "replacement": "None",
          "status": "Killed",
          "description": "Replace FnValue by None",
          "statusReason": "thread 'test_set_empty_hostname' panicked at url/tests/unit.rs:100:5:\nsetting an empty hostname to a url with a password should fail\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_set_empty_hostname"
          ]
        },
        {
          "id": "url/src/lib.rs:2653:9:2653:58:FnValue:Ok(Default::default())",
          "duration": 0.915820603,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 2653,
              "column": 9
            },
            "end": {
              "line": 2653,
              "column": 58
            }
          },
          "replacement": "Ok(Default::default())",
          "status": "Killed",
          "description": "Replace FnValue by Ok(Default::default())",
          "statusReason": "thread 'append_empty_segment_then_mutate' panicked at url/tests/unit.rs:497:5:\nassertion `left == right` failed\n  left: \"\"\n right: \"http://localhost:6767/foo/bar?a=b\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "append_empty_segment_then_mutate",
            "append_trailing_slash",
            "extend_query_pairs_then_mutate",
            "test_file_with_drive",
            "test_file_with_drive_and_path",
            "test_set_scheme_to_file_with_host"
          ]
        },
        {
          "id": "url/src/lib.rs:2226:31:2226:33:BinaryOperator:*=",
          "duration": 2.410481674,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2226,
              "column": 31
            },
            "end": {
              "line": 2226,
              "column": 33
            }
          },
          "replacement": "*=",
          "status": "Survived",
          "description": "Replace BinaryOperator by *=",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:2706:9:2706:30:FnValue:Some(Default::default())",
          "duration": 0.585149387,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 2706,
              "column": 9
            },
            "end": {
              "line": 2706,
              "column": 30
            }
          },
          "replacement": "Some(Default::default())",
          "status": "CompileError",
          "description": "Replace FnValue by Some(Default::default())",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:1794:87:1794:89:BinaryOperator:!=",
          "duration": 3.279992574,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1794,
              "column": 87
            },
            "end": {
              "line": 1794,
              "column": 89
            }
          },
          "replacement": "!=",
          "status": "Killed",
          "description": "Replace BinaryOperator by !=",
          "statusReason": "Test executable failed (exit status: 101).\n\nstderr:\nthread 'main' panicked at url/src/lib.rs:15:7:\ncalled `Result::unwrap()` on an `Err` value: \"cannot be base\"\nstack backtrace:\n   0:     0x56396bd6ad06 - std::backtrace_rs::backtrace::libunwind::trace::h5aa1f3f50fd6005d\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/../../backtrace/src/backtrace/libunwind.rs:104:5\n   1:     0x56396bd6ad06 - std::backtrace_rs::backtrace::trace_unsynchronized::h39f759d0ceaa839b\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/../../backtrace/src/backtrace/mod.rs:66:5\n   2:     0x56396bd6ad06 - std::sys_common::backtrace::_print_fmt::hfd4aa038a1413f7f\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:68:5\n   3:     0x56396bd6ad06 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::ha47fba1de44cec55\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:44:22\n   4:     0x56396bd887ac - core::fmt::rt::Argument::fmt::h375396e1292b08cb\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/fmt/rt.rs:142:9\n   5:     0x56396bd887ac - core::fmt::write::h93e0b545aa9eb320\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/fmt/mod.rs:1120:17\n   6:     0x56396bd68f1f - std::io::Write::write_fmt::h97fad0674ecdf154\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/io/mod.rs:1854:15\n   7:     0x56396bd6aab4 - std::sys_common::backtrace::_print::hb7626a1b4ea382df\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:47:5\n   8:     0x56396bd6aab4 - std::sys_common::backtrace::print::h89f2abc5b98b82a2\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:34:9\n   9:     0x56396bd6bfab - std::panicking::default_hook::{{closure}}::h73fe684137831048\n  10:     0x56396bd6bcf9 - std::panicking::default_hook::h8dfe6e62b35915a0\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:292:9\n  11:     0x56396bd6c44d - std::panicking::rust_panic_with_hook::hc33e259baf535986\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:781:13\n  12:     0x56396bd6c322 - std::panicking::begin_panic_handler::{{closure}}::hcfbf8e29c9418131\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:659:13\n  13:     0x56396bd6b1e6 - std::sys_common::backtrace::__rust_end_short_backtrace::h99b80dfa4797f5b6\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:171:18\n  14:     0x56396bd6c054 - rust_begin_unwind\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:647:5\n  15:     0x56396bd06cf5 - core::panicking::panic_fmt::h96700527d99a56a9\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/panicking.rs:72:14\n  16:     0x56396bd07163 - core::result::unwrap_failed::h0dc1416ea927605a\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/result.rs:1653:5\n  17:     0x56396bd07ebf - rust_out::main::_doctest_main_url_src_lib_rs_1759_0::h670bb002b9e42e38\n  18:     0x56396bd07e56 - rust_out::main::h11d1a6ed4289a3df\n  19:     0x56396bd07593 - core::ops::function::FnOnce::call_once::h903f19ac3af5d648\n  20:     0x56396bd074b6 - std::sys_common::backtrace::__rust_begin_short_backtrace::ha11011b11b4aaa1f\n  21:     0x56396bd07509 - std::rt::lang_start::{{closure}}::h196360a935ed97d8\n  22:     0x56396bd67223 - core::ops::function::impls::<impl core::ops::function::FnOnce<A> for &F>::call_once::hb12a069c52b9e638\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/ops/function.rs:284:13\n  23:     0x56396bd67223 - std::panicking::try::do_call::h34ba557680a1662c\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:554:40\n  24:     0x56396bd67223 - std::panicking::try::hb88778117e3deeb6\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:518:19\n  25:     0x56396bd67223 - std::panic::catch_unwind::hbd3c1fafc0d9693e\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panic.rs:142:14\n  26:     0x56396bd67223 - std::rt::lang_start_internal::{{closure}}::h0b81b8de0028b6f3\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/rt.rs:148:48\n  27:     0x56396bd67223 - std::panicking::try::do_call::hbbb521b5391ac872\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:554:40\n  28:     0x56396bd67223 - std::panicking::try::hf108a0b7deb842f7\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:518:19\n  29:     0x56396bd67223 - std::panic::catch_unwind::h6451f9c53324fd81\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panic.rs:142:14\n  30:     0x56396bd67223 - std::rt::lang_start_internal::hc6ad905f9af5ea03\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/rt.rs:148:20\n  31:     0x56396bd074e7 - std::rt::lang_start::h4d1167809e102347\n  32:     0x56396bd08225 - main\n  33:     0x7f1b9570ccd0 - <unknown>\n  34:     0x7f1b9570cd8a - __libc_start_main\n  35:     0x56396bd07315 - _start\n  36:                0x0 - <unknown>\n\n",
          "killedBy": [
            "url/src/lib.rs - Url::set_port (line 1759)",
            "url/src/lib.rs - Url::set_port (line 1740)"
          ]
        },
        {
          "id": "url/src/lib.rs:1794:29:1794:31:BinaryOperator:&&",
          "duration": 3.6424759509999998,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1794,
              "column": 29
            },
            "end": {
              "line": 1794,
              "column": 31
            }
          },
          "replacement": "&&",
          "status": "Killed",
          "description": "Replace BinaryOperator by &&",
          "statusReason": "Test executable failed (exit status: 101).\n\nstderr:\nthread 'main' panicked at url/src/lib.rs:12:1:\nassertion failed: result.is_err()\nstack backtrace:\n   0:     0x55649fae12b6 - std::backtrace_rs::backtrace::libunwind::trace::h5aa1f3f50fd6005d\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/../../backtrace/src/backtrace/libunwind.rs:104:5\n   1:     0x55649fae12b6 - std::backtrace_rs::backtrace::trace_unsynchronized::h39f759d0ceaa839b\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/../../backtrace/src/backtrace/mod.rs:66:5\n   2:     0x55649fae12b6 - std::sys_common::backtrace::_print_fmt::hfd4aa038a1413f7f\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:68:5\n   3:     0x55649fae12b6 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::ha47fba1de44cec55\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:44:22\n   4:     0x55649fafebcc - core::fmt::rt::Argument::fmt::h375396e1292b08cb\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/fmt/rt.rs:142:9\n   5:     0x55649fafebcc - core::fmt::write::h93e0b545aa9eb320\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/fmt/mod.rs:1120:17\n   6:     0x55649fadf4cf - std::io::Write::write_fmt::h97fad0674ecdf154\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/io/mod.rs:1854:15\n   7:     0x55649fae1064 - std::sys_common::backtrace::_print::hb7626a1b4ea382df\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:47:5\n   8:     0x55649fae1064 - std::sys_common::backtrace::print::h89f2abc5b98b82a2\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:34:9\n   9:     0x55649fae255b - std::panicking::default_hook::{{closure}}::h73fe684137831048\n  10:     0x55649fae22a9 - std::panicking::default_hook::h8dfe6e62b35915a0\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:292:9\n  11:     0x55649fae29fd - std::panicking::rust_panic_with_hook::hc33e259baf535986\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:781:13\n  12:     0x55649fae2899 - std::panicking::begin_panic_handler::{{closure}}::hcfbf8e29c9418131\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:651:13\n  13:     0x55649fae1796 - std::sys_common::backtrace::__rust_end_short_backtrace::h99b80dfa4797f5b6\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:171:18\n  14:     0x55649fae2604 - rust_begin_unwind\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:647:5\n  15:     0x55649fa7dcf5 - core::panicking::panic_fmt::h96700527d99a56a9\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/panicking.rs:72:14\n  16:     0x55649fa7ddb3 - core::panicking::panic::h7546f881b5ccb4b7\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/panicking.rs:144:5\n  17:     0x55649fa7e8e4 - rust_out::main::_doctest_main_url_src_lib_rs_1775_0::run::h8d42dada9ea50e87\n  18:     0x55649fa7e6b9 - rust_out::main::_doctest_main_url_src_lib_rs_1775_0::hdebfc378e06ae1eb\n  19:     0x55649fa7e6a6 - rust_out::main::h11d1a6ed4289a3df\n  20:     0x55649fa7e4c3 - core::ops::function::FnOnce::call_once::h903f19ac3af5d648\n  21:     0x55649fa7e3f6 - std::sys_common::backtrace::__rust_begin_short_backtrace::ha11011b11b4aaa1f\n  22:     0x55649fa7e449 - std::rt::lang_start::{{closure}}::h196360a935ed97d8\n  23:     0x55649fadd7d3 - core::ops::function::impls::<impl core::ops::function::FnOnce<A> for &F>::call_once::hb12a069c52b9e638\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/ops/function.rs:284:13\n  24:     0x55649fadd7d3 - std::panicking::try::do_call::h34ba557680a1662c\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:554:40\n  25:     0x55649fadd7d3 - std::panicking::try::hb88778117e3deeb6\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:518:19\n  26:     0x55649fadd7d3 - std::panic::catch_unwind::hbd3c1fafc0d9693e\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panic.rs:142:14\n  27:     0x55649fadd7d3 - std::rt::lang_start_internal::{{closure}}::h0b81b8de0028b6f3\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/rt.rs:148:48\n  28:     0x55649fadd7d3 - std::panicking::try::do_call::hbbb521b5391ac872\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:554:40\n  29:     0x55649fadd7d3 - std::panicking::try::hf108a0b7deb842f7\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:518:19\n  30:     0x55649fadd7d3 - std::panic::catch_unwind::h6451f9c53324fd81\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panic.rs:142:14\n  31:     0x55649fadd7d3 - std::rt::lang_start_internal::hc6ad905f9af5ea03\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/rt.rs:148:20\n  32:     0x55649fa7e427 - std::rt::lang_start::h4d1167809e102347\n  33:     0x55649fa7e9a5 - main\n  34:     0x7f3e06c07cd0 - <unknown>\n  35:     0x7f3e06c07d8a - __libc_start_main\n  36:     0x55649fa7e315 - _start\n  37:                0x0 - <unknown>\n\n",
          "killedBy": [
            "url/src/lib.rs - Url::set_port (line 1775)"
          ]
        },
        {
          "id": "url/src/lib.rs:1161:9:1164:10:FnValue:Some(\"xyzzy\")",
          "duration": 2.3826757219999997,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1161,
              "column": 9
            },
            "end": {
              "line": 1164,
              "column": 10
            }
          },
          "replacement": "Some(\"xyzzy\")",
          "status": "Killed",
          "description": "Replace FnValue by Some(\"xyzzy\")",
          "statusReason": "thread 'test_domain' panicked at url/tests/unit.rs:678:5:\nassertion `left == right` failed\n  left: Some(\"xyzzy\")\n right: None\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_domain",
            "test_leading_dots"
          ]
        },
        {
          "id": "url/src/lib.rs:2743:9:2743:34:FnValue:\"\"",
          "duration": 2.009319798,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 2743,
              "column": 9
            },
            "end": {
              "line": 2743,
              "column": 34
            }
          },
          "replacement": "\"\"",
          "status": "Killed",
          "description": "Replace FnValue by \"\"",
          "statusReason": "thread 'append_trailing_slash' panicked at url/tests/unit.rs:465:28:\ncalled `Result::unwrap()` on an `Err` value: \"7 != 5 (self.username_end != self.scheme_end + 1) for URL \\\"http://localhost:6767/foo/bar?a=b\\\"\"\n",
          "killedBy": [
            "append_trailing_slash",
            "append_empty_segment_then_mutate",
            "extend_query_pairs_then_mutate",
            "issue_124",
            "issue_197",
            "issue_61",
            "new_directory_paths",
            "new_file_paths",
            "new_path_bad_utf8",
            "no_panic",
            "path_backslash_fun",
            "pop_if_empty_in_bounds",
            "test_authority",
            "test_file_with_drive",
            "test_file_with_drive_and_path",
            "test_fragment",
            "test_has_authority",
            "test_make_relative",
            "test_no_base_url",
            "test_non_special_path",
            "test_non_special_path3",
            "test_non_special_path2",
            "test_options_reuse",
            "test_origin_blob_equality",
            "test_query",
            "test_relative",
            "test_relative_empty",
            "test_set_empty_host",
            "test_set_empty_hostname",
            "test_set_empty_username_and_password",
            "test_set_host",
            "test_set_ip_host",
            "test_slicing",
            "test_set_scheme_to_file_with_host",
            "test_syntax_violation_callback_lifetimes",
            "test_url_from_file_path"
          ]
        },
        {
          "id": "url/src/lib.rs:2162:24:2162:26:BinaryOperator:/=",
          "duration": 3.2344795480000004,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2162,
              "column": 24
            },
            "end": {
              "line": 2162,
              "column": 26
            }
          },
          "replacement": "/=",
          "status": "Survived",
          "description": "Replace BinaryOperator by /=",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:1383:9:1393:10:FnValue:Some(\"\")",
          "duration": 2.617424725,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1383,
              "column": 9
            },
            "end": {
              "line": 1393,
              "column": 10
            }
          },
          "replacement": "Some(\"\")",
          "status": "Killed",
          "description": "Replace FnValue by Some(\"\")",
          "statusReason": "thread 'test_make_relative' panicked at url/tests/unit.rs:1193:9:\nassertion `left == right` failed: base: http://127.0.0.1:8080/test, uri: http://127.0.0.1:8080/test, relative: \n  left: \"?\"\n right: \"\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_make_relative",
            "test_query"
          ]
        },
        {
          "id": "url/src/lib.rs:2206:70:2206:72:BinaryOperator:&&",
          "duration": 3.869158359,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2206,
              "column": 70
            },
            "end": {
              "line": 2206,
              "column": 72
            }
          },
          "replacement": "&&",
          "status": "Survived",
          "description": "Replace BinaryOperator by &&",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:654:34:654:36:BinaryOperator:==",
          "duration": 3.438259003,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 654,
              "column": 34
            },
            "end": {
              "line": 654,
              "column": 36
            }
          },
          "replacement": "==",
          "status": "Survived",
          "description": "Replace BinaryOperator by ==",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:2151:33:2151:34:BinaryOperator:+",
          "duration": 1.7424792519999999,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2151,
              "column": 33
            },
            "end": {
              "line": 2151,
              "column": 34
            }
          },
          "replacement": "+",
          "status": "Killed",
          "description": "Replace BinaryOperator by +",
          "statusReason": "thread 'test_set_empty_password' panicked at url/tests/unit.rs:85:5:\nassertion `left == right` failed\n  left: \"moz://fooervo/baz\"\n right: \"moz://foo@servo/baz\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_set_empty_password"
          ]
        },
        {
          "id": "url/src/lib.rs:452:86:452:88:BinaryOperator:==",
          "duration": 2.5842210270000003,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 452,
              "column": 86
            },
            "end": {
              "line": 452,
              "column": 88
            }
          },
          "replacement": "==",
          "status": "Killed",
          "description": "Replace BinaryOperator by ==",
          "statusReason": "thread 'test_make_relative' panicked at url/tests/unit.rs:1192:67:\ncalled `Option::unwrap()` on a `None` value\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_make_relative"
          ]
        },
        {
          "id": "url/src/lib.rs:2963:5:3007:13:FnValue:Ok(Default::default())",
          "duration": 3.7873457239999997,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 2963,
              "column": 5
            },
            "end": {
              "line": 3007,
              "column": 13
            }
          },
          "replacement": "Ok(Default::default())",
          "status": "Survived",
          "description": "Replace FnValue by Ok(Default::default())",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:926:40:926:41:BinaryOperator:-",
          "duration": 2.395122627,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 926,
              "column": 40
            },
            "end": {
              "line": 926,
              "column": 41
            }
          },
          "replacement": "-",
          "status": "Killed",
          "description": "Replace BinaryOperator by -",
          "statusReason": "thread 'test_authority' panicked at url/tests/unit.rs:1244:5:\nassertion `left == right` failed\n  left: \"ttp://example.com\"\n right: \"example.com\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_authority"
          ]
        },
        {
          "id": "url/src/lib.rs:926:40:926:41:BinaryOperator:*",
          "duration": 2.276747152,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 926,
              "column": 40
            },
            "end": {
              "line": 926,
              "column": 41
            }
          },
          "replacement": "*",
          "status": "Killed",
          "description": "Replace BinaryOperator by *",
          "statusReason": "thread 'test_authority' panicked at url/tests/unit.rs:1244:5:\nassertion `left == right` failed\n  left: \"le.com\"\n right: \"example.com\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_authority"
          ]
        },
        {
          "id": "url/src/lib.rs:2986:40:2986:41:BinaryOperator:-",
          "duration": 0.465058329,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2986,
              "column": 40
            },
            "end": {
              "line": 2986,
              "column": 41
            }
          },
          "replacement": "-",
          "status": "CompileError",
          "description": "Replace BinaryOperator by -",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:2021:20:2021:22:BinaryOperator:*=",
          "duration": 2.471785148,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2021,
              "column": 20
            },
            "end": {
              "line": 2021,
              "column": 22
            }
          },
          "replacement": "*=",
          "status": "Killed",
          "description": "Replace BinaryOperator by *=",
          "statusReason": "thread 'test_set_ip_host' panicked at url/src/lib.rs:2020:13:\nattempt to subtract with overflow\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_set_ip_host"
          ]
        },
        {
          "id": "url/src/lib.rs:508:50:508:52:BinaryOperator:==",
          "duration": 2.528837102,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 508,
              "column": 50
            },
            "end": {
              "line": 508,
              "column": 52
            }
          },
          "replacement": "==",
          "status": "Killed",
          "description": "Replace BinaryOperator by ==",
          "statusReason": "thread 'test_make_relative' panicked at url/tests/unit.rs:1193:9:\nassertion `left == right` failed: base: http://127.0.0.1:8080/test, uri: http://127.0.0.1:8080/test, relative: \n  left: \"test\"\n right: \"\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_make_relative"
          ]
        },
        {
          "id": "url/src/lib.rs:1129:9:1134:10:FnValue:Some(Host::new(\"\"))",
          "duration": 0.452126852,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1129,
              "column": 9
            },
            "end": {
              "line": 1134,
              "column": 10
            }
          },
          "replacement": "Some(Host::new(\"\"))",
          "status": "CompileError",
          "description": "Replace FnValue by Some(Host::new(\"\"))",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:2154:30:2154:31:BinaryOperator:+",
          "duration": 1.1197251,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2154,
              "column": 30
            },
            "end": {
              "line": 2154,
              "column": 31
            }
          },
          "replacement": "+",
          "status": "Killed",
          "description": "Replace BinaryOperator by +",
          "statusReason": "thread 'test_set_empty_password' panicked at url/src/lib.rs:2155:13:\nattempt to subtract with overflow\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_set_empty_password",
            "test_set_empty_username_and_password"
          ]
        },
        {
          "id": "url/src/lib.rs:854:9:855:33:FnValue:true",
          "duration": 4.53475833,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 854,
              "column": 9
            },
            "end": {
              "line": 855,
              "column": 33
            }
          },
          "replacement": "true",
          "status": "Killed",
          "description": "Replace FnValue by true",
          "statusReason": "Test executable failed (exit status: 101).\n\nstderr:\nthread 'main' panicked at url/src/lib.rs:11:1:\nassertion failed: !Url::parse(\"moz:///tmp/foo\")?.is_special()\nstack backtrace:\n   0:     0x561155143776 - std::backtrace_rs::backtrace::libunwind::trace::h5aa1f3f50fd6005d\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/../../backtrace/src/backtrace/libunwind.rs:104:5\n   1:     0x561155143776 - std::backtrace_rs::backtrace::trace_unsynchronized::h39f759d0ceaa839b\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/../../backtrace/src/backtrace/mod.rs:66:5\n   2:     0x561155143776 - std::sys_common::backtrace::_print_fmt::hfd4aa038a1413f7f\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:68:5\n   3:     0x561155143776 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::ha47fba1de44cec55\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:44:22\n   4:     0x56115516108c - core::fmt::rt::Argument::fmt::h375396e1292b08cb\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/fmt/rt.rs:142:9\n   5:     0x56115516108c - core::fmt::write::h93e0b545aa9eb320\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/fmt/mod.rs:1120:17\n   6:     0x56115514198f - std::io::Write::write_fmt::h97fad0674ecdf154\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/io/mod.rs:1854:15\n   7:     0x561155143524 - std::sys_common::backtrace::_print::hb7626a1b4ea382df\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:47:5\n   8:     0x561155143524 - std::sys_common::backtrace::print::h89f2abc5b98b82a2\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:34:9\n   9:     0x561155144a1b - std::panicking::default_hook::{{closure}}::h73fe684137831048\n  10:     0x561155144769 - std::panicking::default_hook::h8dfe6e62b35915a0\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:292:9\n  11:     0x561155144ebd - std::panicking::rust_panic_with_hook::hc33e259baf535986\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:781:13\n  12:     0x561155144d59 - std::panicking::begin_panic_handler::{{closure}}::hcfbf8e29c9418131\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:651:13\n  13:     0x561155143c56 - std::sys_common::backtrace::__rust_end_short_backtrace::h99b80dfa4797f5b6\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:171:18\n  14:     0x561155144ac4 - rust_begin_unwind\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:647:5\n  15:     0x5611550e0cf5 - core::panicking::panic_fmt::h96700527d99a56a9\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/panicking.rs:72:14\n  16:     0x5611550e0db3 - core::panicking::panic::h7546f881b5ccb4b7\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/panicking.rs:144:5\n  17:     0x5611550e1c12 - rust_out::main::_doctest_main_url_src_lib_rs_841_0::run::h42906a69aff30c7d\n  18:     0x5611550e1699 - rust_out::main::_doctest_main_url_src_lib_rs_841_0::h21fe41c50f8038f4\n  19:     0x5611550e1686 - rust_out::main::h11d1a6ed4289a3df\n  20:     0x5611550e14c3 - core::ops::function::FnOnce::call_once::h903f19ac3af5d648\n  21:     0x5611550e13f6 - std::sys_common::backtrace::__rust_begin_short_backtrace::ha11011b11b4aaa1f\n  22:     0x5611550e1449 - std::rt::lang_start::{{closure}}::h196360a935ed97d8\n  23:     0x56115513fc93 - core::ops::function::impls::<impl core::ops::function::FnOnce<A> for &F>::call_once::hb12a069c52b9e638\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/ops/function.rs:284:13\n  24:     0x56115513fc93 - std::panicking::try::do_call::h34ba557680a1662c\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:554:40\n  25:     0x56115513fc93 - std::panicking::try::hb88778117e3deeb6\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:518:19\n  26:     0x56115513fc93 - std::panic::catch_unwind::hbd3c1fafc0d9693e\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panic.rs:142:14\n  27:     0x56115513fc93 - std::rt::lang_start_internal::{{closure}}::h0b81b8de0028b6f3\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/rt.rs:148:48\n  28:     0x56115513fc93 - std::panicking::try::do_call::hbbb521b5391ac872\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:554:40\n  29:     0x56115513fc93 - std::panicking::try::hf108a0b7deb842f7\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:518:19\n  30:     0x56115513fc93 - std::panic::catch_unwind::h6451f9c53324fd81\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panic.rs:142:14\n  31:     0x56115513fc93 - std::rt::lang_start_internal::hc6ad905f9af5ea03\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/rt.rs:148:20\n  32:     0x5611550e1427 - std::rt::lang_start::h4d1167809e102347\n  33:     0x5611550e1c55 - main\n  34:     0x7fcd7697ccd0 - <unknown>\n  35:     0x7fcd7697cd8a - __libc_start_main\n  36:     0x5611550e1315 - _start\n  37:                0x0 - <unknown>\n\n",
          "killedBy": [
            "url/src/lib.rs - Url::is_special (line 841)"
          ]
        },
        {
          "id": "url/src/lib.rs:2881:22:2881:24:BinaryOperator:!=",
          "duration": 4.0787942280000005,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2881,
              "column": 22
            },
            "end": {
              "line": 2881,
              "column": 24
            }
          },
          "replacement": "!=",
          "status": "Survived",
          "description": "Replace BinaryOperator by !=",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:1797:35:1797:37:BinaryOperator:!=",
          "duration": 4.218402277,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1797,
              "column": 35
            },
            "end": {
              "line": 1797,
              "column": 37
            }
          },
          "replacement": "!=",
          "status": "Killed",
          "description": "Replace BinaryOperator by !=",
          "statusReason": "Test executable failed (exit status: 101).\n\nstderr:\nthread 'main' panicked at url/src/lib.rs:12:1:\nassertion `left == right` failed\n  left: \"ssh://example.net/\"\n right: \"ssh://example.net:4096/\"\nstack backtrace:\n   0:     0x565319470066 - std::backtrace_rs::backtrace::libunwind::trace::h5aa1f3f50fd6005d\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/../../backtrace/src/backtrace/libunwind.rs:104:5\n   1:     0x565319470066 - std::backtrace_rs::backtrace::trace_unsynchronized::h39f759d0ceaa839b\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/../../backtrace/src/backtrace/mod.rs:66:5\n   2:     0x565319470066 - std::sys_common::backtrace::_print_fmt::hfd4aa038a1413f7f\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:68:5\n   3:     0x565319470066 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::ha47fba1de44cec55\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:44:22\n   4:     0x56531948db0c - core::fmt::rt::Argument::fmt::h375396e1292b08cb\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/fmt/rt.rs:142:9\n   5:     0x56531948db0c - core::fmt::write::h93e0b545aa9eb320\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/fmt/mod.rs:1120:17\n   6:     0x56531946e27f - std::io::Write::write_fmt::h97fad0674ecdf154\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/io/mod.rs:1854:15\n   7:     0x56531946fe14 - std::sys_common::backtrace::_print::hb7626a1b4ea382df\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:47:5\n   8:     0x56531946fe14 - std::sys_common::backtrace::print::h89f2abc5b98b82a2\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:34:9\n   9:     0x56531947130b - std::panicking::default_hook::{{closure}}::h73fe684137831048\n  10:     0x565319471059 - std::panicking::default_hook::h8dfe6e62b35915a0\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:292:9\n  11:     0x5653194717ad - std::panicking::rust_panic_with_hook::hc33e259baf535986\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:781:13\n  12:     0x565319471682 - std::panicking::begin_panic_handler::{{closure}}::hcfbf8e29c9418131\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:659:13\n  13:     0x565319470546 - std::sys_common::backtrace::__rust_end_short_backtrace::h99b80dfa4797f5b6\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:171:18\n  14:     0x5653194713b4 - rust_begin_unwind\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:647:5\n  15:     0x56531940bcf5 - core::panicking::panic_fmt::h96700527d99a56a9\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/panicking.rs:72:14\n  16:     0x56531940bffb - core::panicking::assert_failed_inner::h88ed53873568fcef\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/panicking.rs:342:17\n  17:     0x56531940c7ea - core::panicking::assert_failed::h03f34daddd0b0bf6\n  18:     0x56531940d341 - rust_out::main::_doctest_main_url_src_lib_rs_1740_0::run::h63016975195839ca\n  19:     0x56531940cf79 - rust_out::main::_doctest_main_url_src_lib_rs_1740_0::h4d6e77b9b542bcc6\n  20:     0x56531940cf66 - rust_out::main::h11d1a6ed4289a3df\n  21:     0x56531940c5b3 - core::ops::function::FnOnce::call_once::h903f19ac3af5d648\n  22:     0x56531940c4b6 - std::sys_common::backtrace::__rust_begin_short_backtrace::ha11011b11b4aaa1f\n  23:     0x56531940c509 - std::rt::lang_start::{{closure}}::h196360a935ed97d8\n  24:     0x56531946c583 - core::ops::function::impls::<impl core::ops::function::FnOnce<A> for &F>::call_once::hb12a069c52b9e638\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/ops/function.rs:284:13\n  25:     0x56531946c583 - std::panicking::try::do_call::h34ba557680a1662c\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:554:40\n  26:     0x56531946c583 - std::panicking::try::hb88778117e3deeb6\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:518:19\n  27:     0x56531946c583 - std::panic::catch_unwind::hbd3c1fafc0d9693e\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panic.rs:142:14\n  28:     0x56531946c583 - std::rt::lang_start_internal::{{closure}}::h0b81b8de0028b6f3\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/rt.rs:148:48\n  29:     0x56531946c583 - std::panicking::try::do_call::hbbb521b5391ac872\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:554:40\n  30:     0x56531946c583 - std::panicking::try::hf108a0b7deb842f7\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:518:19\n  31:     0x56531946c583 - std::panic::catch_unwind::h6451f9c53324fd81\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panic.rs:142:14\n  32:     0x56531946c583 - std::rt::lang_start_internal::hc6ad905f9af5ea03\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/rt.rs:148:20\n  33:     0x56531940c4e7 - std::rt::lang_start::h4d1167809e102347\n  34:     0x56531940d5a5 - main\n  35:     0x7ff90be5fcd0 - <unknown>\n  36:     0x7ff90be5fd8a - __libc_start_main\n  37:     0x56531940c315 - _start\n  38:                0x0 - <unknown>\n\n",
          "killedBy": [
            "url/src/lib.rs - Url::set_port (line 1740)",
            "url/src/lib.rs - Url::set_port (line 1759)"
          ]
        },
        {
          "id": "url/src/lib.rs:447:9:534:23:FnValue:None",
          "duration": 1.266717112,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 447,
              "column": 9
            },
            "end": {
              "line": 534,
              "column": 23
            }
          },
          "replacement": "None",
          "status": "Killed",
          "description": "Replace FnValue by None",
          "statusReason": "thread 'test_make_relative' panicked at url/tests/unit.rs:1192:67:\ncalled `Option::unwrap()` on a `None` value\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_make_relative"
          ]
        },
        {
          "id": "url/src/lib.rs:452:26:452:28:BinaryOperator:==",
          "duration": 1.914079308,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 452,
              "column": 26
            },
            "end": {
              "line": 452,
              "column": 28
            }
          },
          "replacement": "==",
          "status": "Killed",
          "description": "Replace BinaryOperator by ==",
          "statusReason": "thread 'test_make_relative' panicked at url/tests/unit.rs:1192:67:\ncalled `Option::unwrap()` on a `None` value\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_make_relative"
          ]
        },
        {
          "id": "url/src/lib.rs:1514:45:1514:46:BinaryOperator:*",
          "duration": 2.473872484,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1514,
              "column": 45
            },
            "end": {
              "line": 1514,
              "column": 46
            }
          },
          "replacement": "*",
          "status": "Killed",
          "description": "Replace BinaryOperator by *",
          "statusReason": "Test executable failed (exit status: 101).\n\nstderr:\nthread 'main' panicked at url/src/lib.rs:13:1:\nassertion `left == right` failed\n  left: \"https://example.net/?lang=fr&foo=bar##nav\"\n right: \"https://example.net/?lang=fr&foo=bar#nav\"\nstack backtrace:\n   0:     0x555930e2c106 - std::backtrace_rs::backtrace::libunwind::trace::h5aa1f3f50fd6005d\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/../../backtrace/src/backtrace/libunwind.rs:104:5\n   1:     0x555930e2c106 - std::backtrace_rs::backtrace::trace_unsynchronized::h39f759d0ceaa839b\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/../../backtrace/src/backtrace/mod.rs:66:5\n   2:     0x555930e2c106 - std::sys_common::backtrace::_print_fmt::hfd4aa038a1413f7f\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:68:5\n   3:     0x555930e2c106 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::ha47fba1de44cec55\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:44:22\n   4:     0x555930e49a1c - core::fmt::rt::Argument::fmt::h375396e1292b08cb\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/fmt/rt.rs:142:9\n   5:     0x555930e49a1c - core::fmt::write::h93e0b545aa9eb320\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/fmt/mod.rs:1120:17\n   6:     0x555930e2a31f - std::io::Write::write_fmt::h97fad0674ecdf154\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/io/mod.rs:1854:15\n   7:     0x555930e2beb4 - std::sys_common::backtrace::_print::hb7626a1b4ea382df\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:47:5\n   8:     0x555930e2beb4 - std::sys_common::backtrace::print::h89f2abc5b98b82a2\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:34:9\n   9:     0x555930e2d3ab - std::panicking::default_hook::{{closure}}::h73fe684137831048\n  10:     0x555930e2d0f9 - std::panicking::default_hook::h8dfe6e62b35915a0\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:292:9\n  11:     0x555930e2d84d - std::panicking::rust_panic_with_hook::hc33e259baf535986\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:781:13\n  12:     0x555930e2d722 - std::panicking::begin_panic_handler::{{closure}}::hcfbf8e29c9418131\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:659:13\n  13:     0x555930e2c5e6 - std::sys_common::backtrace::__rust_end_short_backtrace::h99b80dfa4797f5b6\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:171:18\n  14:     0x555930e2d454 - rust_begin_unwind\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:647:5\n  15:     0x555930dc6cf5 - core::panicking::panic_fmt::h96700527d99a56a9\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/panicking.rs:72:14\n  16:     0x555930dc6ffb - core::panicking::assert_failed_inner::h88ed53873568fcef\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/panicking.rs:342:17\n  17:     0x555930dc780a - core::panicking::assert_failed::h03f34daddd0b0bf6\n  18:     0x555930dc8062 - rust_out::main::_doctest_main_url_src_lib_rs_1586_0::run::h63f63857050ba174\n  19:     0x555930dc7b89 - rust_out::main::_doctest_main_url_src_lib_rs_1586_0::hc1899b2c21d8c397\n  20:     0x555930dc7b76 - rust_out::main::h11d1a6ed4289a3df\n  21:     0x555930dc75c3 - core::ops::function::FnOnce::call_once::h903f19ac3af5d648\n  22:     0x555930dc74b6 - std::sys_common::backtrace::__rust_begin_short_backtrace::ha11011b11b4aaa1f\n  23:     0x555930dc7509 - std::rt::lang_start::{{closure}}::h196360a935ed97d8\n  24:     0x555930e28623 - core::ops::function::impls::<impl core::ops::function::FnOnce<A> for &F>::call_once::hb12a069c52b9e638\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/ops/function.rs:284:13\n  25:     0x555930e28623 - std::panicking::try::do_call::h34ba557680a1662c\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:554:40\n  26:     0x555930e28623 - std::panicking::try::hb88778117e3deeb6\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:518:19\n  27:     0x555930e28623 - std::panic::catch_unwind::hbd3c1fafc0d9693e\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panic.rs:142:14\n  28:     0x555930e28623 - std::rt::lang_start_internal::{{closure}}::h0b81b8de0028b6f3\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/rt.rs:148:48\n  29:     0x555930e28623 - std::panicking::try::do_call::hbbb521b5391ac872\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:554:40\n  30:     0x555930e28623 - std::panicking::try::hf108a0b7deb842f7\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:518:19\n  31:     0x555930e28623 - std::panic::catch_unwind::h6451f9c53324fd81\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panic.rs:142:14\n  32:     0x555930e28623 - std::rt::lang_start_internal::hc6ad905f9af5ea03\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/rt.rs:148:20\n  33:     0x555930dc74e7 - std::rt::lang_start::h4d1167809e102347\n  34:     0x555930dc8305 - main\n  35:     0x7f36f4fa4cd0 - <unknown>\n  36:     0x7f36f4fa4d8a - __libc_start_main\n  37:     0x555930dc7315 - _start\n  38:                0x0 - <unknown>\n\n",
          "killedBy": [
            "url/src/lib.rs - Url::query_pairs_mut (line 1586)"
          ]
        },
        {
          "id": "url/src/lib.rs:1383:9:1393:10:FnValue:None",
          "duration": 2.6305244979999998,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1383,
              "column": 9
            },
            "end": {
              "line": 1393,
              "column": 10
            }
          },
          "replacement": "None",
          "status": "Killed",
          "description": "Replace FnValue by None",
          "statusReason": "thread 'test_query' panicked at url/tests/unit.rs:690:5:\nassertion `left == right` failed\n  left: None\n right: Some(\"page=2\")\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_query",
            "test_make_relative"
          ]
        },
        {
          "id": "url/src/lib.rs:925:70:925:71:BinaryOperator:-",
          "duration": 3.573646292,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 925,
              "column": 70
            },
            "end": {
              "line": 925,
              "column": 71
            }
          },
          "replacement": "-",
          "status": "Survived",
          "description": "Replace BinaryOperator by -",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:1973:42:1973:43:BinaryOperator:+",
          "duration": 3.829729691,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1973,
              "column": 42
            },
            "end": {
              "line": 1973,
              "column": 43
            }
          },
          "replacement": "+",
          "status": "Survived",
          "description": "Replace BinaryOperator by +",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:2982:49:2982:51:BinaryOperator:==",
          "duration": 5.694866062,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2982,
              "column": 49
            },
            "end": {
              "line": 2982,
              "column": 51
            }
          },
          "replacement": "==",
          "status": "Survived",
          "description": "Replace BinaryOperator by ==",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:2837:5:2837:59:FnValue:Ok((0, Default::default()))",
          "duration": 5.290169166,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 2837,
              "column": 5
            },
            "end": {
              "line": 2837,
              "column": 59
            }
          },
          "replacement": "Ok((0, Default::default()))",
          "status": "Survived",
          "description": "Replace FnValue by Ok((0, Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:2223:55:2223:57:BinaryOperator:!=",
          "duration": 4.99976217,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2223,
              "column": 55
            },
            "end": {
              "line": 2223,
              "column": 57
            }
          },
          "replacement": "!=",
          "status": "Survived",
          "description": "Replace BinaryOperator by !=",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:1957:41:1957:43:BinaryOperator:||",
          "duration": 2.8919020609999997,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1957,
              "column": 41
            },
            "end": {
              "line": 1957,
              "column": 43
            }
          },
          "replacement": "||",
          "status": "Killed",
          "description": "Replace BinaryOperator by ||",
          "statusReason": "thread 'test_set_host' panicked at url/tests/unit.rs:512:24:\ncalled `Result::unwrap()` on an `Err` value: EmptyHost\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_set_host",
            "test_set_empty_host"
          ]
        },
        {
          "id": "url/src/lib.rs:2241:20:2241:22:BinaryOperator:-=",
          "duration": 2.5384722220000002,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2241,
              "column": 20
            },
            "end": {
              "line": 2241,
              "column": 22
            }
          },
          "replacement": "-=",
          "status": "Killed",
          "description": "Replace BinaryOperator by -=",
          "statusReason": "thread 'test_set_empty_host' panicked at url/src/lib.rs:2241:13:\nattempt to subtract with overflow\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_set_empty_host",
            "test_set_empty_username_and_password"
          ]
        },
        {
          "id": "url/src/lib.rs:2156:27:2156:29:BinaryOperator:+=",
          "duration": 2.336927401,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2156,
              "column": 27
            },
            "end": {
              "line": 2156,
              "column": 29
            }
          },
          "replacement": "+=",
          "status": "Killed",
          "description": "Replace BinaryOperator by +=",
          "statusReason": "thread 'test_set_empty_password' panicked at url/src/lib.rs:2736:11:\nbyte index 23 is out of bounds of `moz://foo@servo/baz`\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_set_empty_password",
            "test_set_empty_username_and_password"
          ]
        },
        {
          "id": "url/src/lib.rs:2982:29:2982:31:BinaryOperator:==",
          "duration": 4.070693863,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2982,
              "column": 29
            },
            "end": {
              "line": 2982,
              "column": 31
            }
          },
          "replacement": "==",
          "status": "Survived",
          "description": "Replace BinaryOperator by ==",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:618:9:738:15:FnValue:Ok(())",
          "duration": 4.389804149,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 618,
              "column": 9
            },
            "end": {
              "line": 738,
              "column": 15
            }
          },
          "replacement": "Ok(())",
          "status": "Survived",
          "description": "Replace FnValue by Ok(())",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:227:9:228:13:FnValue:Default::default()",
          "duration": 0.351852515,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 227,
              "column": 9
            },
            "end": {
              "line": 228,
              "column": 13
            }
          },
          "replacement": "Default::default()",
          "status": "CompileError",
          "description": "Replace FnValue by Default::default()",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:887:9:888:57:FnValue:true",
          "duration": 3.1257683700000003,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 887,
              "column": 9
            },
            "end": {
              "line": 888,
              "column": 57
            }
          },
          "replacement": "true",
          "status": "Killed",
          "description": "Replace FnValue by true",
          "statusReason": "thread 'test_has_authority' panicked at url/tests/unit.rs:1226:5:\nassertion failed: !url.has_authority()\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_has_authority",
            "test_slicing",
            "test_set_empty_host"
          ]
        },
        {
          "id": "url/src/lib.rs:2750:9:2750:32:FnValue:\"xyzzy\"",
          "duration": 1.572451002,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 2750,
              "column": 9
            },
            "end": {
              "line": 2750,
              "column": 32
            }
          },
          "replacement": "\"xyzzy\"",
          "status": "Killed",
          "description": "Replace FnValue by \"xyzzy\"",
          "statusReason": "thread 'issue_61' panicked at url/tests/unit.rs:435:29:\ncalled `Result::unwrap()` on an `Err` value: ()\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "issue_61",
            "test_file_with_drive_and_path",
            "test_file_with_drive",
            "test_make_relative",
            "path_backslash_fun",
            "test_options_reuse",
            "test_origin_blob_equality",
            "test_set_empty_host",
            "test_socket_addrs",
            "test_origin_unicode_serialization",
            "test_relative",
            "test_set_host"
          ]
        },
        {
          "id": "url/src/lib.rs:1973:42:1973:43:BinaryOperator:/",
          "duration": 5.281754686999999,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1973,
              "column": 42
            },
            "end": {
              "line": 1973,
              "column": 43
            }
          },
          "replacement": "/",
          "status": "Survived",
          "description": "Replace BinaryOperator by /",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:1090:9:1094:10:FnValue:Some(\"\")",
          "duration": 2.42864169,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1090,
              "column": 9
            },
            "end": {
              "line": 1094,
              "column": 10
            }
          },
          "replacement": "Some(\"\")",
          "status": "Killed",
          "description": "Replace FnValue by Some(\"\")",
          "statusReason": "thread 'host_serialization' panicked at url/tests/unit.rs:344:5:\nassertion `left == right` failed\n  left: Some(\"\")\n right: Some(\"[::2]\")\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host_serialization",
            "test_set_ip_host"
          ]
        },
        {
          "id": "url/src/lib.rs:2982:78:2982:80:BinaryOperator:||",
          "duration": 3.767530233,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2982,
              "column": 78
            },
            "end": {
              "line": 2982,
              "column": 80
            }
          },
          "replacement": "||",
          "status": "Survived",
          "description": "Replace BinaryOperator by ||",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:1719:20:1719:22:BinaryOperator:+=",
          "duration": 1.917424788,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1719,
              "column": 20
            },
            "end": {
              "line": 1719,
              "column": 22
            }
          },
          "replacement": "+=",
          "status": "Killed",
          "description": "Replace BinaryOperator by +=",
          "statusReason": "thread 'append_empty_segment_then_mutate' panicked at url/src/lib.rs:2627:9:\nindex out of bounds: the len is 33 but the index is 87\n",
          "killedBy": [
            "append_empty_segment_then_mutate",
            "extend_query_pairs_then_mutate",
            "append_trailing_slash"
          ]
        },
        {
          "id": "url/src/lib.rs:2725:9:2725:28:FnValue:\"xyzzy\"",
          "duration": 5.358718974,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 2725,
              "column": 9
            },
            "end": {
              "line": 2725,
              "column": 28
            }
          },
          "replacement": "\"xyzzy\"",
          "status": "Survived",
          "description": "Replace FnValue by \"xyzzy\"",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:2852:42:2852:43:BinaryOperator:-",
          "duration": 4.335888539999999,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2852,
              "column": 42
            },
            "end": {
              "line": 2852,
              "column": 43
            }
          },
          "replacement": "-",
          "status": "Survived",
          "description": "Replace BinaryOperator by -",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:887:9:888:57:FnValue:false",
          "duration": 1.9208118509999998,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 887,
              "column": 9
            },
            "end": {
              "line": 888,
              "column": 57
            }
          },
          "replacement": "false",
          "status": "Killed",
          "description": "Replace FnValue by false",
          "statusReason": "thread 'test_has_authority' panicked at url/tests/unit.rs:1230:5:\nassertion failed: url.has_authority()\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_has_authority",
            "test_authority",
            "test_set_host",
            "test_slicing",
            "test_set_empty_host",
            "test_set_empty_hostname",
            "test_set_scheme_to_file_with_host",
            "test_set_ip_host"
          ]
        },
        {
          "id": "url/src/lib.rs:1225:9:1225:66:FnValue:Some(1)",
          "duration": 2.0664546059999997,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1225,
              "column": 9
            },
            "end": {
              "line": 1225,
              "column": 66
            }
          },
          "replacement": "Some(1)",
          "status": "Killed",
          "description": "Replace FnValue by Some(1)",
          "statusReason": "thread 'issue_61' panicked at url/tests/unit.rs:437:5:\nassertion `left == right` failed\n  left: Some(1)\n right: Some(443)\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "issue_61",
            "test_socket_addrs",
            "test_origin_unicode_serialization"
          ]
        },
        {
          "id": "url/src/lib.rs:2112:87:2112:89:BinaryOperator:!=",
          "duration": 1.972784707,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2112,
              "column": 87
            },
            "end": {
              "line": 2112,
              "column": 89
            }
          },
          "replacement": "!=",
          "status": "Killed",
          "description": "Replace BinaryOperator by !=",
          "statusReason": "thread 'test_set_empty_password' panicked at url/tests/unit.rs:84:33:\ncalled `Result::unwrap()` on an `Err` value: ()\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_set_empty_password",
            "test_set_empty_username_and_password"
          ]
        },
        {
          "id": "url/src/lib.rs:1819:43:1819:45:BinaryOperator:!=",
          "duration": 3.468176287,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1819,
              "column": 43
            },
            "end": {
              "line": 1819,
              "column": 45
            }
          },
          "replacement": "!=",
          "status": "Killed",
          "description": "Replace BinaryOperator by !=",
          "statusReason": "Test executable failed (exit status: 101).\n\nstderr:\nthread 'main' panicked at url/src/lib.rs:12:1:\nassertion `left == right` failed\n  left: \"ssh://example.net:2048/\"\n right: \"ssh://example.net:4096/\"\nstack backtrace:\n   0:     0x55ac0f8b6046 - std::backtrace_rs::backtrace::libunwind::trace::h5aa1f3f50fd6005d\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/../../backtrace/src/backtrace/libunwind.rs:104:5\n   1:     0x55ac0f8b6046 - std::backtrace_rs::backtrace::trace_unsynchronized::h39f759d0ceaa839b\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/../../backtrace/src/backtrace/mod.rs:66:5\n   2:     0x55ac0f8b6046 - std::sys_common::backtrace::_print_fmt::hfd4aa038a1413f7f\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:68:5\n   3:     0x55ac0f8b6046 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::ha47fba1de44cec55\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:44:22\n   4:     0x55ac0f8d3aec - core::fmt::rt::Argument::fmt::h375396e1292b08cb\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/fmt/rt.rs:142:9\n   5:     0x55ac0f8d3aec - core::fmt::write::h93e0b545aa9eb320\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/fmt/mod.rs:1120:17\n   6:     0x55ac0f8b425f - std::io::Write::write_fmt::h97fad0674ecdf154\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/io/mod.rs:1854:15\n   7:     0x55ac0f8b5df4 - std::sys_common::backtrace::_print::hb7626a1b4ea382df\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:47:5\n   8:     0x55ac0f8b5df4 - std::sys_common::backtrace::print::h89f2abc5b98b82a2\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:34:9\n   9:     0x55ac0f8b72eb - std::panicking::default_hook::{{closure}}::h73fe684137831048\n  10:     0x55ac0f8b7039 - std::panicking::default_hook::h8dfe6e62b35915a0\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:292:9\n  11:     0x55ac0f8b778d - std::panicking::rust_panic_with_hook::hc33e259baf535986\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:781:13\n  12:     0x55ac0f8b7662 - std::panicking::begin_panic_handler::{{closure}}::hcfbf8e29c9418131\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:659:13\n  13:     0x55ac0f8b6526 - std::sys_common::backtrace::__rust_end_short_backtrace::h99b80dfa4797f5b6\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:171:18\n  14:     0x55ac0f8b7394 - rust_begin_unwind\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:647:5\n  15:     0x55ac0f851cf5 - core::panicking::panic_fmt::h96700527d99a56a9\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/panicking.rs:72:14\n  16:     0x55ac0f851ffb - core::panicking::assert_failed_inner::h88ed53873568fcef\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/panicking.rs:342:17\n  17:     0x55ac0f8527ea - core::panicking::assert_failed::h03f34daddd0b0bf6\n  18:     0x55ac0f853341 - rust_out::main::_doctest_main_url_src_lib_rs_1740_0::run::h63016975195839ca\n  19:     0x55ac0f852f79 - rust_out::main::_doctest_main_url_src_lib_rs_1740_0::h4d6e77b9b542bcc6\n  20:     0x55ac0f852f66 - rust_out::main::h11d1a6ed4289a3df\n  21:     0x55ac0f8525b3 - core::ops::function::FnOnce::call_once::h903f19ac3af5d648\n  22:     0x55ac0f8524b6 - std::sys_common::backtrace::__rust_begin_short_backtrace::ha11011b11b4aaa1f\n  23:     0x55ac0f852509 - std::rt::lang_start::{{closure}}::h196360a935ed97d8\n  24:     0x55ac0f8b2563 - core::ops::function::impls::<impl core::ops::function::FnOnce<A> for &F>::call_once::hb12a069c52b9e638\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/ops/function.rs:284:13\n  25:     0x55ac0f8b2563 - std::panicking::try::do_call::h34ba557680a1662c\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:554:40\n  26:     0x55ac0f8b2563 - std::panicking::try::hb88778117e3deeb6\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:518:19\n  27:     0x55ac0f8b2563 - std::panic::catch_unwind::hbd3c1fafc0d9693e\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panic.rs:142:14\n  28:     0x55ac0f8b2563 - std::rt::lang_start_internal::{{closure}}::h0b81b8de0028b6f3\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/rt.rs:148:48\n  29:     0x55ac0f8b2563 - std::panicking::try::do_call::hbbb521b5391ac872\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:554:40\n  30:     0x55ac0f8b2563 - std::panicking::try::hf108a0b7deb842f7\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:518:19\n  31:     0x55ac0f8b2563 - std::panic::catch_unwind::h6451f9c53324fd81\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panic.rs:142:14\n  32:     0x55ac0f8b2563 - std::rt::lang_start_internal::hc6ad905f9af5ea03\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/rt.rs:148:20\n  33:     0x55ac0f8524e7 - std::rt::lang_start::h4d1167809e102347\n  34:     0x55ac0f8535a5 - main\n  35:     0x7f16d6d29cd0 - <unknown>\n  36:     0x7f16d6d29d8a - __libc_start_main\n  37:     0x55ac0f852315 - _start\n  38:                0x0 - <unknown>\n\n",
          "killedBy": [
            "url/src/lib.rs - Url::set_port (line 1740)"
          ]
        },
        {
          "id": "url/src/lib.rs:1680:9:1701:66:FnValue:()",
          "duration": 1.630118639,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1680,
              "column": 9
            },
            "end": {
              "line": 1701,
              "column": 66
            }
          },
          "replacement": "()",
          "status": "Killed",
          "description": "Replace FnValue by ()",
          "statusReason": "thread 'test_no_base_url' panicked at url/tests/unit.rs:672:5:\nassertion `left == right` failed\n  left: \"test@example.net\"\n right: \"%2Ffoo\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_no_base_url",
            "test_non_special_path",
            "test_non_special_path2",
            "test_non_special_path3"
          ]
        },
        {
          "id": "url/src/lib.rs:1383:9:1393:10:FnValue:Some(\"xyzzy\")",
          "duration": 2.8597497300000003,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1383,
              "column": 9
            },
            "end": {
              "line": 1393,
              "column": 10
            }
          },
          "replacement": "Some(\"xyzzy\")",
          "status": "Killed",
          "description": "Replace FnValue by Some(\"xyzzy\")",
          "statusReason": "thread 'test_make_relative' panicked at url/tests/unit.rs:1193:9:\nassertion `left == right` failed: base: http://127.0.0.1:8080/test, uri: http://127.0.0.1:8080/test, relative: \n  left: \"?xyzzy\"\n right: \"\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_make_relative",
            "test_query"
          ]
        },
        {
          "id": "url/src/lib.rs:2837:5:2837:59:FnValue:Ok((1, Default::default()))",
          "duration": 4.097675122,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 2837,
              "column": 5
            },
            "end": {
              "line": 2837,
              "column": 59
            }
          },
          "replacement": "Ok((1, Default::default()))",
          "status": "Survived",
          "description": "Replace FnValue by Ok((1, Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:2706:9:2706:30:FnValue:None",
          "duration": 5.491542845,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 2706,
              "column": 9
            },
            "end": {
              "line": 2706,
              "column": 30
            }
          },
          "replacement": "None",
          "status": "Survived",
          "description": "Replace FnValue by None",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:463:13:469:14:FnValue:(\"\", \"xyzzy\")",
          "duration": 3.581134042,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 463,
              "column": 13
            },
            "end": {
              "line": 469,
              "column": 14
            }
          },
          "replacement": "(\"\", \"xyzzy\")",
          "status": "Killed",
          "description": "Replace FnValue by (\"\", \"xyzzy\")",
          "statusReason": "thread 'test_make_relative' panicked at url/tests/unit.rs:1193:9:\nassertion `left == right` failed: base: http://127.0.0.1:8080/test, uri: http://127.0.0.1:8080/test/, relative: test/\n  left: \"\"\n right: \"test/\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_make_relative"
          ]
        },
        {
          "id": "url/src/lib.rs:3029:9:3029:54:FnValue:Box::leak(Box::new(String::new()))",
          "duration": 1.460741403,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 3029,
              "column": 9
            },
            "end": {
              "line": 3029,
              "column": 54
            }
          },
          "replacement": "Box::leak(Box::new(String::new()))",
          "status": "Killed",
          "description": "Replace FnValue by Box::leak(Box::new(String::new()))",
          "statusReason": "thread 'extend_query_pairs_then_mutate' panicked at /tmp/cargo-mutants-rust-url-4809QP.tmp/form_urlencoded/src/lib.rs:224:13:\ninvalid length 30 for target of length 0\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "extend_query_pairs_then_mutate",
            "parse_with_params"
          ]
        },
        {
          "id": "url/src/lib.rs:1709:9:1713:10:FnValue:Ok(Default::default())",
          "duration": 0.353701599,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1709,
              "column": 9
            },
            "end": {
              "line": 1713,
              "column": 10
            }
          },
          "replacement": "Ok(Default::default())",
          "status": "CompileError",
          "description": "Replace FnValue by Ok(Default::default())",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:2698:9:2698:53:FnValue:Default::default()",
          "duration": 0.3144998,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 2698,
              "column": 9
            },
            "end": {
              "line": 2698,
              "column": 53
            }
          },
          "replacement": "Default::default()",
          "status": "CompileError",
          "description": "Replace FnValue by Default::default()",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:2151:33:2151:34:BinaryOperator:/",
          "duration": 1.729869817,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2151,
              "column": 33
            },
            "end": {
              "line": 2151,
              "column": 34
            }
          },
          "replacement": "/",
          "status": "Killed",
          "description": "Replace BinaryOperator by /",
          "statusReason": "thread 'test_set_empty_password' panicked at url/tests/unit.rs:85:5:\nassertion `left == right` failed\n  left: \"moz://fooservo/baz\"\n right: \"moz://foo@servo/baz\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_set_empty_password"
          ]
        },
        {
          "id": "url/src/lib.rs:2377:40:2377:42:BinaryOperator:||",
          "duration": 1.6360216810000001,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2377,
              "column": 40
            },
            "end": {
              "line": 2377,
              "column": 42
            }
          },
          "replacement": "||",
          "status": "Killed",
          "description": "Replace BinaryOperator by ||",
          "statusReason": "thread 'issue_61' panicked at url/tests/unit.rs:435:29:\ncalled `Result::unwrap()` on an `Err` value: ()\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "issue_61"
          ]
        },
        {
          "id": "url/src/lib.rs:2909:5:2946:13:FnValue:Ok(Default::default())",
          "duration": 1.27744437,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 2909,
              "column": 5
            },
            "end": {
              "line": 2946,
              "column": 13
            }
          },
          "replacement": "Ok(Default::default())",
          "status": "Killed",
          "description": "Replace FnValue by Ok(Default::default())",
          "statusReason": "thread 'new_path_bad_utf8' panicked at url/tests/unit.rs:161:5:\nassertion `left == right` failed\n  left: Ok(\"\")\n right: Ok(\"/foo/ba\\x80r\")\n",
          "killedBy": [
            "new_path_bad_utf8",
            "new_file_paths",
            "test_url_from_file_path"
          ]
        },
        {
          "id": "url/src/lib.rs:2896:9:2896:11:BinaryOperator:||",
          "duration": 2.799740619,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2896,
              "column": 9
            },
            "end": {
              "line": 2896,
              "column": 11
            }
          },
          "replacement": "||",
          "status": "Survived",
          "description": "Replace BinaryOperator by ||",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:2143:73:2143:74:BinaryOperator:/",
          "duration": 2.252267374,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2143,
              "column": 73
            },
            "end": {
              "line": 2143,
              "column": 74
            }
          },
          "replacement": "/",
          "status": "Killed",
          "description": "Replace BinaryOperator by /",
          "statusReason": "thread 'test_set_empty_password' panicked at url/src/lib.rs:2144:13:\nassertion failed: has_username_or_password\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_set_empty_password",
            "test_set_empty_username_and_password"
          ]
        },
        {
          "id": "url/src/lib.rs:1938:39:1938:41:BinaryOperator:&&",
          "duration": 3.373479003,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1938,
              "column": 39
            },
            "end": {
              "line": 1938,
              "column": 41
            }
          },
          "replacement": "&&",
          "status": "Survived",
          "description": "Replace BinaryOperator by &&",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:1161:9:1164:10:FnValue:None",
          "duration": 2.6794229400000003,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1161,
              "column": 9
            },
            "end": {
              "line": 1164,
              "column": 10
            }
          },
          "replacement": "None",
          "status": "Killed",
          "description": "Replace FnValue by None",
          "statusReason": "thread 'test_leading_dots' panicked at url/tests/unit.rs:528:5:\nassertion `left == right` failed\n  left: None\n right: Some(\".\")\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_leading_dots",
            "test_domain"
          ]
        },
        {
          "id": "url/src/lib.rs:1794:9:1801:15:FnValue:Ok(())",
          "duration": 3.8372024909999998,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1794,
              "column": 9
            },
            "end": {
              "line": 1801,
              "column": 15
            }
          },
          "replacement": "Ok(())",
          "status": "Killed",
          "description": "Replace FnValue by Ok(())",
          "statusReason": "Test executable failed (exit status: 101).\n\nstderr:\nthread 'main' panicked at url/src/lib.rs:12:1:\nassertion `left == right` failed\n  left: \"ssh://example.net:2048/\"\n right: \"ssh://example.net:4096/\"\nstack backtrace:\n   0:     0x55a37081c276 - std::backtrace_rs::backtrace::libunwind::trace::h5aa1f3f50fd6005d\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/../../backtrace/src/backtrace/libunwind.rs:104:5\n   1:     0x55a37081c276 - std::backtrace_rs::backtrace::trace_unsynchronized::h39f759d0ceaa839b\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/../../backtrace/src/backtrace/mod.rs:66:5\n   2:     0x55a37081c276 - std::sys_common::backtrace::_print_fmt::hfd4aa038a1413f7f\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:68:5\n   3:     0x55a37081c276 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::ha47fba1de44cec55\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:44:22\n   4:     0x55a370839d1c - core::fmt::rt::Argument::fmt::h375396e1292b08cb\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/fmt/rt.rs:142:9\n   5:     0x55a370839d1c - core::fmt::write::h93e0b545aa9eb320\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/fmt/mod.rs:1120:17\n   6:     0x55a37081a48f - std::io::Write::write_fmt::h97fad0674ecdf154\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/io/mod.rs:1854:15\n   7:     0x55a37081c024 - std::sys_common::backtrace::_print::hb7626a1b4ea382df\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:47:5\n   8:     0x55a37081c024 - std::sys_common::backtrace::print::h89f2abc5b98b82a2\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:34:9\n   9:     0x55a37081d51b - std::panicking::default_hook::{{closure}}::h73fe684137831048\n  10:     0x55a37081d269 - std::panicking::default_hook::h8dfe6e62b35915a0\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:292:9\n  11:     0x55a37081d9bd - std::panicking::rust_panic_with_hook::hc33e259baf535986\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:781:13\n  12:     0x55a37081d892 - std::panicking::begin_panic_handler::{{closure}}::hcfbf8e29c9418131\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:659:13\n  13:     0x55a37081c756 - std::sys_common::backtrace::__rust_end_short_backtrace::h99b80dfa4797f5b6\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:171:18\n  14:     0x55a37081d5c4 - rust_begin_unwind\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:647:5\n  15:     0x55a3707b8cf5 - core::panicking::panic_fmt::h96700527d99a56a9\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/panicking.rs:72:14\n  16:     0x55a3707b8ffb - core::panicking::assert_failed_inner::h88ed53873568fcef\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/panicking.rs:342:17\n  17:     0x55a3707b97ea - core::panicking::assert_failed::h03f34daddd0b0bf6\n  18:     0x55a3707ba341 - rust_out::main::_doctest_main_url_src_lib_rs_1740_0::run::h63016975195839ca\n  19:     0x55a3707b9f79 - rust_out::main::_doctest_main_url_src_lib_rs_1740_0::h4d6e77b9b542bcc6\n  20:     0x55a3707b9f66 - rust_out::main::h11d1a6ed4289a3df\n  21:     0x55a3707b95b3 - core::ops::function::FnOnce::call_once::h903f19ac3af5d648\n  22:     0x55a3707b94b6 - std::sys_common::backtrace::__rust_begin_short_backtrace::ha11011b11b4aaa1f\n  23:     0x55a3707b9509 - std::rt::lang_start::{{closure}}::h196360a935ed97d8\n  24:     0x55a370818793 - core::ops::function::impls::<impl core::ops::function::FnOnce<A> for &F>::call_once::hb12a069c52b9e638\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/ops/function.rs:284:13\n  25:     0x55a370818793 - std::panicking::try::do_call::h34ba557680a1662c\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:554:40\n  26:     0x55a370818793 - std::panicking::try::hb88778117e3deeb6\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:518:19\n  27:     0x55a370818793 - std::panic::catch_unwind::hbd3c1fafc0d9693e\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panic.rs:142:14\n  28:     0x55a370818793 - std::rt::lang_start_internal::{{closure}}::h0b81b8de0028b6f3\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/rt.rs:148:48\n  29:     0x55a370818793 - std::panicking::try::do_call::hbbb521b5391ac872\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:554:40\n  30:     0x55a370818793 - std::panicking::try::hf108a0b7deb842f7\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:518:19\n  31:     0x55a370818793 - std::panic::catch_unwind::h6451f9c53324fd81\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panic.rs:142:14\n  32:     0x55a370818793 - std::rt::lang_start_internal::hc6ad905f9af5ea03\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/rt.rs:148:20\n  33:     0x55a3707b94e7 - std::rt::lang_start::h4d1167809e102347\n  34:     0x55a3707ba5a5 - main\n  35:     0x7f2be000dcd0 - <unknown>\n  36:     0x7f2be000dd8a - __libc_start_main\n  37:     0x55a3707b9315 - _start\n  38:                0x0 - <unknown>\n\n",
          "killedBy": [
            "url/src/lib.rs - Url::set_port (line 1740)",
            "url/src/lib.rs - Url::set_port (line 1775)"
          ]
        },
        {
          "id": "url/src/lib.rs:295:9:295:36:FnValue:Ok(Default::default())",
          "duration": 0.462616121,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 295,
              "column": 9
            },
            "end": {
              "line": 295,
              "column": 36
            }
          },
          "replacement": "Ok(Default::default())",
          "status": "CompileError",
          "description": "Replace FnValue by Ok(Default::default())",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:2932:9:2932:11:BinaryOperator:||",
          "duration": 3.9258376580000003,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2932,
              "column": 9
            },
            "end": {
              "line": 2932,
              "column": 11
            }
          },
          "replacement": "||",
          "status": "Survived",
          "description": "Replace BinaryOperator by ||",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:2660:9:2660:28:FnValue:\"xyzzy\".into()",
          "duration": 4.085313985,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 2660,
              "column": 9
            },
            "end": {
              "line": 2660,
              "column": 28
            }
          },
          "replacement": "\"xyzzy\".into()",
          "status": "Killed",
          "description": "Replace FnValue by \"xyzzy\".into()",
          "statusReason": "Test executable failed (exit status: 101).\n\nstderr:\nthread 'main' panicked at url/src/lib.rs:11:1:\nassertion `left == right` failed\n  left: \"xyzzy\"\n right: \"https://example.net/\"\nstack backtrace:\n   0:     0x5597c02be886 - std::backtrace_rs::backtrace::libunwind::trace::h5aa1f3f50fd6005d\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/../../backtrace/src/backtrace/libunwind.rs:104:5\n   1:     0x5597c02be886 - std::backtrace_rs::backtrace::trace_unsynchronized::h39f759d0ceaa839b\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/../../backtrace/src/backtrace/mod.rs:66:5\n   2:     0x5597c02be886 - std::sys_common::backtrace::_print_fmt::hfd4aa038a1413f7f\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:68:5\n   3:     0x5597c02be886 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::ha47fba1de44cec55\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:44:22\n   4:     0x5597c02dc19c - core::fmt::rt::Argument::fmt::h375396e1292b08cb\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/fmt/rt.rs:142:9\n   5:     0x5597c02dc19c - core::fmt::write::h93e0b545aa9eb320\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/fmt/mod.rs:1120:17\n   6:     0x5597c02bca9f - std::io::Write::write_fmt::h97fad0674ecdf154\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/io/mod.rs:1854:15\n   7:     0x5597c02be634 - std::sys_common::backtrace::_print::hb7626a1b4ea382df\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:47:5\n   8:     0x5597c02be634 - std::sys_common::backtrace::print::h89f2abc5b98b82a2\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:34:9\n   9:     0x5597c02bfb2b - std::panicking::default_hook::{{closure}}::h73fe684137831048\n  10:     0x5597c02bf879 - std::panicking::default_hook::h8dfe6e62b35915a0\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:292:9\n  11:     0x5597c02bffcd - std::panicking::rust_panic_with_hook::hc33e259baf535986\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:781:13\n  12:     0x5597c02bfea2 - std::panicking::begin_panic_handler::{{closure}}::hcfbf8e29c9418131\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:659:13\n  13:     0x5597c02bed66 - std::sys_common::backtrace::__rust_end_short_backtrace::h99b80dfa4797f5b6\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:171:18\n  14:     0x5597c02bfbd4 - rust_begin_unwind\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:647:5\n  15:     0x5597c025bcf5 - core::panicking::panic_fmt::h96700527d99a56a9\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/panicking.rs:72:14\n  16:     0x5597c025bffb - core::panicking::assert_failed_inner::h88ed53873568fcef\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/panicking.rs:342:17\n  17:     0x5597c025c5ae - core::panicking::assert_failed::h5657c19787b68e35\n  18:     0x5597c025cae3 - rust_out::main::_doctest_main_url_src_lib_rs_593_0::run::h3e1a55fcc6bf1283\n  19:     0x5597c025c7d9 - rust_out::main::_doctest_main_url_src_lib_rs_593_0::h1279c1e35100fa98\n  20:     0x5597c025c7c6 - rust_out::main::h11d1a6ed4289a3df\n  21:     0x5597c025c4e3 - core::ops::function::FnOnce::call_once::h903f19ac3af5d648\n  22:     0x5597c025c3f6 - std::sys_common::backtrace::__rust_begin_short_backtrace::ha11011b11b4aaa1f\n  23:     0x5597c025c449 - std::rt::lang_start::{{closure}}::h196360a935ed97d8\n  24:     0x5597c02bada3 - core::ops::function::impls::<impl core::ops::function::FnOnce<A> for &F>::call_once::hb12a069c52b9e638\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/ops/function.rs:284:13\n  25:     0x5597c02bada3 - std::panicking::try::do_call::h34ba557680a1662c\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:554:40\n  26:     0x5597c02bada3 - std::panicking::try::hb88778117e3deeb6\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:518:19\n  27:     0x5597c02bada3 - std::panic::catch_unwind::hbd3c1fafc0d9693e\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panic.rs:142:14\n  28:     0x5597c02bada3 - std::rt::lang_start_internal::{{closure}}::h0b81b8de0028b6f3\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/rt.rs:148:48\n  29:     0x5597c02bada3 - std::panicking::try::do_call::hbbb521b5391ac872\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:554:40\n  30:     0x5597c02bada3 - std::panicking::try::hf108a0b7deb842f7\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:518:19\n  31:     0x5597c02bada3 - std::panic::catch_unwind::h6451f9c53324fd81\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panic.rs:142:14\n  32:     0x5597c02bada3 - std::rt::lang_start_internal::hc6ad905f9af5ea03\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/rt.rs:148:20\n  33:     0x5597c025c427 - std::rt::lang_start::h4d1167809e102347\n  34:     0x5597c025cb55 - main\n  35:     0x7f5c178bdcd0 - <unknown>\n  36:     0x7f5c178bdd8a - __libc_start_main\n  37:     0x5597c025c315 - _start\n  38:                0x0 - <unknown>\n\n",
          "killedBy": [
            "url/src/lib.rs - Url::into_string (line 593)"
          ]
        },
        {
          "id": "url/src/lib.rs:2894:28:2894:29:BinaryOperator:<",
          "duration": 3.6411710569999998,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2894,
              "column": 28
            },
            "end": {
              "line": 2894,
              "column": 29
            }
          },
          "replacement": "<",
          "status": "Survived",
          "description": "Replace BinaryOperator by <",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:834:9:834:38:FnValue:\"\"",
          "duration": 0.654469847,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 834,
              "column": 9
            },
            "end": {
              "line": 834,
              "column": 38
            }
          },
          "replacement": "\"\"",
          "status": "Killed",
          "description": "Replace FnValue by \"\"",
          "statusReason": "thread 'issue_61' panicked at url/tests/unit.rs:435:29:\ncalled `Result::unwrap()` on an `Err` value: ()\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "issue_61",
            "path_backslash_fun",
            "test_file_with_drive",
            "test_origin_blob_equality",
            "test_options_reuse",
            "test_origin_unicode_serialization",
            "test_make_relative",
            "test_set_host",
            "test_set_empty_host",
            "test_socket_addrs"
          ]
        },
        {
          "id": "url/src/lib.rs:260:9:267:26:FnValue:Ok(Default::default())",
          "duration": 0.612494521,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 260,
              "column": 9
            },
            "end": {
              "line": 267,
              "column": 26
            }
          },
          "replacement": "Ok(Default::default())",
          "status": "CompileError",
          "description": "Replace FnValue by Ok(Default::default())",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:2690:9:2690:50:FnValue:true",
          "duration": 1.1189483550000001,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 2690,
              "column": 9
            },
            "end": {
              "line": 2690,
              "column": 50
            }
          },
          "replacement": "true",
          "status": "Killed",
          "description": "Replace FnValue by true",
          "statusReason": "thread 'test_equality' panicked at url/tests/unit.rs:280:5:\nUrl { scheme: \"http\", cannot_be_a_base: false, username: \"\", password: None, host: Some(Domain(\"example.com\")), port: None, path: \"/\", query: None, fragment: None } != Url { scheme: \"http\", cannot_be_a_base: false, username: \"\", password: None, host: Some(Domain(\"example.com\")), port: Some(8080), path: \"/\", query: None, fragment: None }\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_equality"
          ]
        },
        {
          "id": "url/src/lib.rs:1983:24:1983:26:BinaryOperator:/=",
          "duration": 1.9160077059999998,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1983,
              "column": 24
            },
            "end": {
              "line": 1983,
              "column": 26
            }
          },
          "replacement": "/=",
          "status": "Survived",
          "description": "Replace BinaryOperator by /=",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:1129:9:1134:10:FnValue:Some(Host::from(\"\"))",
          "duration": 0.360731422,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1129,
              "column": 9
            },
            "end": {
              "line": 1134,
              "column": 10
            }
          },
          "replacement": "Some(Host::from(\"\"))",
          "status": "CompileError",
          "description": "Replace FnValue by Some(Host::from(\"\"))",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:1794:44:1794:46:BinaryOperator:!=",
          "duration": 2.523042133,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1794,
              "column": 44
            },
            "end": {
              "line": 1794,
              "column": 46
            }
          },
          "replacement": "!=",
          "status": "Killed",
          "description": "Replace BinaryOperator by !=",
          "statusReason": "Test executable failed (exit status: 101).\n\nstderr:\nthread 'main' panicked at url/src/lib.rs:15:7:\ncalled `Result::unwrap()` on an `Err` value: \"cannot be base\"\nstack backtrace:\n   0:     0x562927a14cb6 - std::backtrace_rs::backtrace::libunwind::trace::h5aa1f3f50fd6005d\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/../../backtrace/src/backtrace/libunwind.rs:104:5\n   1:     0x562927a14cb6 - std::backtrace_rs::backtrace::trace_unsynchronized::h39f759d0ceaa839b\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/../../backtrace/src/backtrace/mod.rs:66:5\n   2:     0x562927a14cb6 - std::sys_common::backtrace::_print_fmt::hfd4aa038a1413f7f\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:68:5\n   3:     0x562927a14cb6 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::ha47fba1de44cec55\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:44:22\n   4:     0x562927a3275c - core::fmt::rt::Argument::fmt::h375396e1292b08cb\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/fmt/rt.rs:142:9\n   5:     0x562927a3275c - core::fmt::write::h93e0b545aa9eb320\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/fmt/mod.rs:1120:17\n   6:     0x562927a12ecf - std::io::Write::write_fmt::h97fad0674ecdf154\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/io/mod.rs:1854:15\n   7:     0x562927a14a64 - std::sys_common::backtrace::_print::hb7626a1b4ea382df\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:47:5\n   8:     0x562927a14a64 - std::sys_common::backtrace::print::h89f2abc5b98b82a2\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:34:9\n   9:     0x562927a15f5b - std::panicking::default_hook::{{closure}}::h73fe684137831048\n  10:     0x562927a15ca9 - std::panicking::default_hook::h8dfe6e62b35915a0\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:292:9\n  11:     0x562927a163fd - std::panicking::rust_panic_with_hook::hc33e259baf535986\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:781:13\n  12:     0x562927a162d2 - std::panicking::begin_panic_handler::{{closure}}::hcfbf8e29c9418131\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:659:13\n  13:     0x562927a15196 - std::sys_common::backtrace::__rust_end_short_backtrace::h99b80dfa4797f5b6\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:171:18\n  14:     0x562927a16004 - rust_begin_unwind\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:647:5\n  15:     0x5629279b0cf5 - core::panicking::panic_fmt::h96700527d99a56a9\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/panicking.rs:72:14\n  16:     0x5629279b1163 - core::result::unwrap_failed::h0dc1416ea927605a\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/result.rs:1653:5\n  17:     0x5629279b1ebf - rust_out::main::_doctest_main_url_src_lib_rs_1759_0::h670bb002b9e42e38\n  18:     0x5629279b1e56 - rust_out::main::h11d1a6ed4289a3df\n  19:     0x5629279b1593 - core::ops::function::FnOnce::call_once::h903f19ac3af5d648\n  20:     0x5629279b14b6 - std::sys_common::backtrace::__rust_begin_short_backtrace::ha11011b11b4aaa1f\n  21:     0x5629279b1509 - std::rt::lang_start::{{closure}}::h196360a935ed97d8\n  22:     0x562927a111d3 - core::ops::function::impls::<impl core::ops::function::FnOnce<A> for &F>::call_once::hb12a069c52b9e638\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/ops/function.rs:284:13\n  23:     0x562927a111d3 - std::panicking::try::do_call::h34ba557680a1662c\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:554:40\n  24:     0x562927a111d3 - std::panicking::try::hb88778117e3deeb6\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:518:19\n  25:     0x562927a111d3 - std::panic::catch_unwind::hbd3c1fafc0d9693e\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panic.rs:142:14\n  26:     0x562927a111d3 - std::rt::lang_start_internal::{{closure}}::h0b81b8de0028b6f3\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/rt.rs:148:48\n  27:     0x562927a111d3 - std::panicking::try::do_call::hbbb521b5391ac872\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:554:40\n  28:     0x562927a111d3 - std::panicking::try::hf108a0b7deb842f7\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:518:19\n  29:     0x562927a111d3 - std::panic::catch_unwind::h6451f9c53324fd81\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panic.rs:142:14\n  30:     0x562927a111d3 - std::rt::lang_start_internal::hc6ad905f9af5ea03\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/rt.rs:148:20\n  31:     0x5629279b14e7 - std::rt::lang_start::h4d1167809e102347\n  32:     0x5629279b2225 - main\n  33:     0x7fa825465cd0 - <unknown>\n  34:     0x7fa825465d8a - __libc_start_main\n  35:     0x5629279b1315 - _start\n  36:                0x0 - <unknown>\n\n",
          "killedBy": [
            "url/src/lib.rs - Url::set_port (line 1759)",
            "url/src/lib.rs - Url::set_port (line 1740)"
          ]
        },
        {
          "id": "url/src/lib.rs:2112:9:2165:15:FnValue:Ok(())",
          "duration": 1.78372901,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 2112,
              "column": 9
            },
            "end": {
              "line": 2165,
              "column": 15
            }
          },
          "replacement": "Ok(())",
          "status": "Killed",
          "description": "Replace FnValue by Ok(())",
          "statusReason": "thread 'test_set_empty_password' panicked at url/tests/unit.rs:85:5:\nassertion `left == right` failed\n  left: \"moz://foo:bar@servo/baz\"\n right: \"moz://foo@servo/baz\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_set_empty_password",
            "test_set_empty_username_and_password"
          ]
        },
        {
          "id": "url/src/lib.rs:1129:9:1134:10:FnValue:Some(Host::from(\"xyzzy\"))",
          "duration": 0.365654933,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1129,
              "column": 9
            },
            "end": {
              "line": 1134,
              "column": 10
            }
          },
          "replacement": "Some(Host::from(\"xyzzy\"))",
          "status": "CompileError",
          "description": "Replace FnValue by Some(Host::from(\"xyzzy\"))",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:2660:9:2660:28:FnValue:String::new()",
          "duration": 3.024639472,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 2660,
              "column": 9
            },
            "end": {
              "line": 2660,
              "column": 28
            }
          },
          "replacement": "String::new()",
          "status": "Killed",
          "description": "Replace FnValue by String::new()",
          "statusReason": "Test executable failed (exit status: 101).\n\nstderr:\nthread 'main' panicked at url/src/lib.rs:11:1:\nassertion `left == right` failed\n  left: \"\"\n right: \"https://example.net/\"\nstack backtrace:\n   0:     0x55d6bd6d8816 - std::backtrace_rs::backtrace::libunwind::trace::h5aa1f3f50fd6005d\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/../../backtrace/src/backtrace/libunwind.rs:104:5\n   1:     0x55d6bd6d8816 - std::backtrace_rs::backtrace::trace_unsynchronized::h39f759d0ceaa839b\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/../../backtrace/src/backtrace/mod.rs:66:5\n   2:     0x55d6bd6d8816 - std::sys_common::backtrace::_print_fmt::hfd4aa038a1413f7f\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:68:5\n   3:     0x55d6bd6d8816 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::ha47fba1de44cec55\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:44:22\n   4:     0x55d6bd6f612c - core::fmt::rt::Argument::fmt::h375396e1292b08cb\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/fmt/rt.rs:142:9\n   5:     0x55d6bd6f612c - core::fmt::write::h93e0b545aa9eb320\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/fmt/mod.rs:1120:17\n   6:     0x55d6bd6d6a2f - std::io::Write::write_fmt::h97fad0674ecdf154\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/io/mod.rs:1854:15\n   7:     0x55d6bd6d85c4 - std::sys_common::backtrace::_print::hb7626a1b4ea382df\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:47:5\n   8:     0x55d6bd6d85c4 - std::sys_common::backtrace::print::h89f2abc5b98b82a2\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:34:9\n   9:     0x55d6bd6d9abb - std::panicking::default_hook::{{closure}}::h73fe684137831048\n  10:     0x55d6bd6d9809 - std::panicking::default_hook::h8dfe6e62b35915a0\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:292:9\n  11:     0x55d6bd6d9f5d - std::panicking::rust_panic_with_hook::hc33e259baf535986\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:781:13\n  12:     0x55d6bd6d9e32 - std::panicking::begin_panic_handler::{{closure}}::hcfbf8e29c9418131\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:659:13\n  13:     0x55d6bd6d8cf6 - std::sys_common::backtrace::__rust_end_short_backtrace::h99b80dfa4797f5b6\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:171:18\n  14:     0x55d6bd6d9b64 - rust_begin_unwind\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:647:5\n  15:     0x55d6bd675cf5 - core::panicking::panic_fmt::h96700527d99a56a9\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/panicking.rs:72:14\n  16:     0x55d6bd675ffb - core::panicking::assert_failed_inner::h88ed53873568fcef\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/panicking.rs:342:17\n  17:     0x55d6bd6765ae - core::panicking::assert_failed::h5657c19787b68e35\n  18:     0x55d6bd676ae3 - rust_out::main::_doctest_main_url_src_lib_rs_593_0::run::h3e1a55fcc6bf1283\n  19:     0x55d6bd6767d9 - rust_out::main::_doctest_main_url_src_lib_rs_593_0::h1279c1e35100fa98\n  20:     0x55d6bd6767c6 - rust_out::main::h11d1a6ed4289a3df\n  21:     0x55d6bd6764e3 - core::ops::function::FnOnce::call_once::h903f19ac3af5d648\n  22:     0x55d6bd6763f6 - std::sys_common::backtrace::__rust_begin_short_backtrace::ha11011b11b4aaa1f\n  23:     0x55d6bd676449 - std::rt::lang_start::{{closure}}::h196360a935ed97d8\n  24:     0x55d6bd6d4d33 - core::ops::function::impls::<impl core::ops::function::FnOnce<A> for &F>::call_once::hb12a069c52b9e638\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/ops/function.rs:284:13\n  25:     0x55d6bd6d4d33 - std::panicking::try::do_call::h34ba557680a1662c\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:554:40\n  26:     0x55d6bd6d4d33 - std::panicking::try::hb88778117e3deeb6\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:518:19\n  27:     0x55d6bd6d4d33 - std::panic::catch_unwind::hbd3c1fafc0d9693e\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panic.rs:142:14\n  28:     0x55d6bd6d4d33 - std::rt::lang_start_internal::{{closure}}::h0b81b8de0028b6f3\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/rt.rs:148:48\n  29:     0x55d6bd6d4d33 - std::panicking::try::do_call::hbbb521b5391ac872\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:554:40\n  30:     0x55d6bd6d4d33 - std::panicking::try::hf108a0b7deb842f7\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:518:19\n  31:     0x55d6bd6d4d33 - std::panic::catch_unwind::h6451f9c53324fd81\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panic.rs:142:14\n  32:     0x55d6bd6d4d33 - std::rt::lang_start_internal::hc6ad905f9af5ea03\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/rt.rs:148:20\n  33:     0x55d6bd676427 - std::rt::lang_start::h4d1167809e102347\n  34:     0x55d6bd676b55 - main\n  35:     0x7f9458cdacd0 - <unknown>\n  36:     0x7f9458cdad8a - __libc_start_main\n  37:     0x55d6bd676315 - _start\n  38:                0x0 - <unknown>\n\n",
          "killedBy": [
            "url/src/lib.rs - Url::into_string (line 593)"
          ]
        },
        {
          "id": "url/src/lib.rs:1458:9:1461:11:FnValue:None",
          "duration": 2.427166793,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1458,
              "column": 9
            },
            "end": {
              "line": 1461,
              "column": 11
            }
          },
          "replacement": "None",
          "status": "Killed",
          "description": "Replace FnValue by None",
          "statusReason": "thread 'test_fragment' panicked at url/tests/unit.rs:724:5:\nassertion `left == right` failed\n  left: None\n right: Some(\"fragment\")\n",
          "killedBy": [
            "test_fragment",
            "test_make_relative"
          ]
        },
        {
          "id": "url/src/lib.rs:2004:29:2004:31:BinaryOperator:-=",
          "duration": 3.569060169,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 2004,
              "column": 29
            },
            "end": {
              "line": 2004,
              "column": 31
            }
          },
          "replacement": "-=",
          "status": "Survived",
          "description": "Replace BinaryOperator by -=",
          "killedBy": []
        },
        {
          "id": "url/src/lib.rs:463:13:469:14:FnValue:(\"xyzzy\", \"\")",
          "duration": 2.154598997,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 463,
              "column": 13
            },
            "end": {
              "line": 469,
              "column": 14
            }
          },
          "replacement": "(\"xyzzy\", \"\")",
          "status": "Killed",
          "description": "Replace FnValue by (\"xyzzy\", \"\")",
          "statusReason": "thread 'test_make_relative' panicked at url/tests/unit.rs:1193:9:\nassertion `left == right` failed: base: http://127.0.0.1:8080/test, uri: http://127.0.0.1:8080/test/, relative: test/\n  left: \"\"\n right: \"test/\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_make_relative"
          ]
        },
        {
          "id": "url/src/lib.rs:1025:68:1025:69:BinaryOperator:+",
          "duration": 3.397430667,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1025,
              "column": 68
            },
            "end": {
              "line": 1025,
              "column": 69
            }
          },
          "replacement": "+",
          "status": "Killed",
          "description": "Replace BinaryOperator by +",
          "statusReason": "Test executable failed (exit status: 101).\n\nstderr:\nthread 'main' panicked at url/src/lib.rs:10:1:\nassertion `left == right` failed\n  left: Some(\"secret123@e\")\n right: Some(\"secret123\")\nstack backtrace:\n   0:     0x5627efea9006 - std::backtrace_rs::backtrace::libunwind::trace::h5aa1f3f50fd6005d\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/../../backtrace/src/backtrace/libunwind.rs:104:5\n   1:     0x5627efea9006 - std::backtrace_rs::backtrace::trace_unsynchronized::h39f759d0ceaa839b\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/../../backtrace/src/backtrace/mod.rs:66:5\n   2:     0x5627efea9006 - std::sys_common::backtrace::_print_fmt::hfd4aa038a1413f7f\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:68:5\n   3:     0x5627efea9006 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::ha47fba1de44cec55\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:44:22\n   4:     0x5627efec691c - core::fmt::rt::Argument::fmt::h375396e1292b08cb\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/fmt/rt.rs:142:9\n   5:     0x5627efec691c - core::fmt::write::h93e0b545aa9eb320\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/fmt/mod.rs:1120:17\n   6:     0x5627efea721f - std::io::Write::write_fmt::h97fad0674ecdf154\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/io/mod.rs:1854:15\n   7:     0x5627efea8db4 - std::sys_common::backtrace::_print::hb7626a1b4ea382df\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:47:5\n   8:     0x5627efea8db4 - std::sys_common::backtrace::print::h89f2abc5b98b82a2\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:34:9\n   9:     0x5627efeaa2ab - std::panicking::default_hook::{{closure}}::h73fe684137831048\n  10:     0x5627efea9ff9 - std::panicking::default_hook::h8dfe6e62b35915a0\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:292:9\n  11:     0x5627efeaa74d - std::panicking::rust_panic_with_hook::hc33e259baf535986\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:781:13\n  12:     0x5627efeaa622 - std::panicking::begin_panic_handler::{{closure}}::hcfbf8e29c9418131\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:659:13\n  13:     0x5627efea94e6 - std::sys_common::backtrace::__rust_end_short_backtrace::h99b80dfa4797f5b6\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:171:18\n  14:     0x5627efeaa354 - rust_begin_unwind\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:647:5\n  15:     0x5627efe45cf5 - core::panicking::panic_fmt::h96700527d99a56a9\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/panicking.rs:72:14\n  16:     0x5627efe45ffb - core::panicking::assert_failed_inner::h88ed53873568fcef\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/panicking.rs:342:17\n  17:     0x5627efe465ba - core::panicking::assert_failed::hb35f7c6aa33d29e8\n  18:     0x5627efe46a6b - rust_out::main::_doctest_main_url_src_lib_rs_997_0::run::hbefe8b0e3735a1e3\n  19:     0x5627efe467b9 - rust_out::main::_doctest_main_url_src_lib_rs_997_0::ha7bc18b5917175da\n  20:     0x5627efe467a6 - rust_out::main::h11d1a6ed4289a3df\n  21:     0x5627efe464f3 - core::ops::function::FnOnce::call_once::h903f19ac3af5d648\n  22:     0x5627efe463f6 - std::sys_common::backtrace::__rust_begin_short_backtrace::ha11011b11b4aaa1f\n  23:     0x5627efe46449 - std::rt::lang_start::{{closure}}::h196360a935ed97d8\n  24:     0x5627efea5523 - core::ops::function::impls::<impl core::ops::function::FnOnce<A> for &F>::call_once::hb12a069c52b9e638\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/ops/function.rs:284:13\n  25:     0x5627efea5523 - std::panicking::try::do_call::h34ba557680a1662c\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:554:40\n  26:     0x5627efea5523 - std::panicking::try::hb88778117e3deeb6\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:518:19\n  27:     0x5627efea5523 - std::panic::catch_unwind::hbd3c1fafc0d9693e\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panic.rs:142:14\n  28:     0x5627efea5523 - std::rt::lang_start_internal::{{closure}}::h0b81b8de0028b6f3\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/rt.rs:148:48\n  29:     0x5627efea5523 - std::panicking::try::do_call::hbbb521b5391ac872\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:554:40\n  30:     0x5627efea5523 - std::panicking::try::hf108a0b7deb842f7\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:518:19\n  31:     0x5627efea5523 - std::panic::catch_unwind::h6451f9c53324fd81\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panic.rs:142:14\n  32:     0x5627efea5523 - std::rt::lang_start_internal::hc6ad905f9af5ea03\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/rt.rs:148:20\n  33:     0x5627efe46427 - std::rt::lang_start::h4d1167809e102347\n  34:     0x5627efe471f5 - main\n  35:     0x7f8218084cd0 - <unknown>\n  36:     0x7f8218084d8a - __libc_start_main\n  37:     0x5627efe46315 - _start\n  38:                0x0 - <unknown>\n\n",
          "killedBy": [
            "url/src/lib.rs - Url::password (line 997)",
            "url/src/lib.rs - Url::set_password (line 2089)"
          ]
        }
      ],
      "source": "// Copyright 2013-2015 The rust-url developers.\n//\n// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n// option. This file may not be copied, modified, or distributed\n// except according to those terms.\n\n/*!\n\nrust-url is an implementation of the [URL Standard](http://url.spec.whatwg.org/)\nfor the [Rust](http://rust-lang.org/) programming language.\n\n\n# URL parsing and data structures\n\nFirst, URL parsing may fail for various reasons and therefore returns a `Result`.\n\n```\nuse url::{Url, ParseError};\n\nassert!(Url::parse(\"http://[:::1]\") == Err(ParseError::InvalidIpv6Address))\n```\n\nLet’s parse a valid URL and look at its components.\n\n```\nuse url::{Url, Host, Position};\n# use url::ParseError;\n# fn run() -> Result<(), ParseError> {\nlet issue_list_url = Url::parse(\n    \"https://github.com/rust-lang/rust/issues?labels=E-easy&state=open\"\n)?;\n\n\nassert!(issue_list_url.scheme() == \"https\");\nassert!(issue_list_url.username() == \"\");\nassert!(issue_list_url.password() == None);\nassert!(issue_list_url.host_str() == Some(\"github.com\"));\nassert!(issue_list_url.host() == Some(Host::Domain(\"github.com\")));\nassert!(issue_list_url.port() == None);\nassert!(issue_list_url.path() == \"/rust-lang/rust/issues\");\nassert!(issue_list_url.path_segments().map(|c| c.collect::<Vec<_>>()) ==\n        Some(vec![\"rust-lang\", \"rust\", \"issues\"]));\nassert!(issue_list_url.query() == Some(\"labels=E-easy&state=open\"));\nassert!(&issue_list_url[Position::BeforePath..] == \"/rust-lang/rust/issues?labels=E-easy&state=open\");\nassert!(issue_list_url.fragment() == None);\nassert!(!issue_list_url.cannot_be_a_base());\n# Ok(())\n# }\n# run().unwrap();\n```\n\nSome URLs are said to be *cannot-be-a-base*:\nthey don’t have a username, password, host, or port,\nand their \"path\" is an arbitrary string rather than slash-separated segments:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet data_url = Url::parse(\"data:text/plain,Hello?World#\")?;\n\nassert!(data_url.cannot_be_a_base());\nassert!(data_url.scheme() == \"data\");\nassert!(data_url.path() == \"text/plain,Hello\");\nassert!(data_url.path_segments().is_none());\nassert!(data_url.query() == Some(\"World\"));\nassert!(data_url.fragment() == Some(\"\"));\n# Ok(())\n# }\n# run().unwrap();\n```\n\n## Serde\n\nEnable the `serde` feature to include `Deserialize` and `Serialize` implementations for `url::Url`.\n\n# Base URL\n\nMany contexts allow URL *references* that can be relative to a *base URL*:\n\n```html\n<link rel=\"stylesheet\" href=\"../main.css\">\n```\n\nSince parsed URLs are absolute, giving a base is required for parsing relative URLs:\n\n```\nuse url::{Url, ParseError};\n\nassert!(Url::parse(\"../main.css\") == Err(ParseError::RelativeUrlWithoutBase))\n```\n\nUse the `join` method on an `Url` to use it as a base URL:\n\n```\nuse url::Url;\n# use url::ParseError;\n\n# fn run() -> Result<(), ParseError> {\nlet this_document = Url::parse(\"http://servo.github.io/rust-url/url/index.html\")?;\nlet css_url = this_document.join(\"../main.css\")?;\nassert_eq!(css_url.as_str(), \"http://servo.github.io/rust-url/main.css\");\n# Ok(())\n# }\n# run().unwrap();\n```\n\n# Feature: `serde`\n\nIf you enable the `serde` feature, [`Url`](struct.Url.html) will implement\n[`serde::Serialize`](https://docs.rs/serde/1/serde/trait.Serialize.html) and\n[`serde::Deserialize`](https://docs.rs/serde/1/serde/trait.Deserialize.html).\nSee [serde documentation](https://serde.rs) for more information.\n\n```toml\nurl = { version = \"2\", features = [\"serde\"] }\n```\n\n# Feature: `debugger_visualizer`\n\nIf you enable the `debugger_visualizer` feature, the `url` crate will include\na [natvis file](https://docs.microsoft.com/en-us/visualstudio/debugger/create-custom-views-of-native-objects)\nfor [Visual Studio](https://www.visualstudio.com/) that allows you to view\n[`Url`](struct.Url.html) objects in the debugger.\n\nThis feature requires Rust 1.71 or later.\n\n```toml\nurl = { version = \"2\", features = [\"debugger_visualizer\"] }\n```\n\n*/\n\n#![doc(html_root_url = \"https://docs.rs/url/2.5.0\")]\n#![cfg_attr(\n    feature = \"debugger_visualizer\",\n    debugger_visualizer(natvis_file = \"../../debug_metadata/url.natvis\")\n)]\n\npub use form_urlencoded;\n\n#[cfg(feature = \"serde\")]\nextern crate serde;\n\nuse crate::host::HostInternal;\nuse crate::parser::{\n    to_u32, Context, Parser, SchemeType, PATH_SEGMENT, SPECIAL_PATH_SEGMENT, USERINFO,\n};\nuse percent_encoding::{percent_decode, percent_encode, utf8_percent_encode};\nuse std::borrow::Borrow;\nuse std::cmp;\nuse std::fmt::{self, Write};\nuse std::hash;\nuse std::io;\nuse std::mem;\nuse std::net::{IpAddr, SocketAddr, ToSocketAddrs};\nuse std::ops::{Range, RangeFrom, RangeTo};\nuse std::path::{Path, PathBuf};\nuse std::str;\n\nuse std::convert::TryFrom;\n\npub use crate::host::Host;\npub use crate::origin::{OpaqueOrigin, Origin};\npub use crate::parser::{ParseError, SyntaxViolation};\npub use crate::path_segments::PathSegmentsMut;\npub use crate::slicing::Position;\npub use form_urlencoded::EncodingOverride;\n\nmod host;\nmod origin;\nmod parser;\nmod path_segments;\nmod slicing;\n\n#[doc(hidden)]\npub mod quirks;\n\n/// A parsed URL record.\n#[derive(Clone)]\npub struct Url {\n    /// Syntax in pseudo-BNF:\n    ///\n    ///   url = scheme \":\" [ hierarchical | non-hierarchical ] [ \"?\" query ]? [ \"#\" fragment ]?\n    ///   non-hierarchical = non-hierarchical-path\n    ///   non-hierarchical-path = /* Does not start with \"/\" */\n    ///   hierarchical = authority? hierarchical-path\n    ///   authority = \"//\" userinfo? host [ \":\" port ]?\n    ///   userinfo = username [ \":\" password ]? \"@\"\n    ///   hierarchical-path = [ \"/\" path-segment ]+\n    serialization: String,\n\n    // Components\n    scheme_end: u32,   // Before ':'\n    username_end: u32, // Before ':' (if a password is given) or '@' (if not)\n    host_start: u32,\n    host_end: u32,\n    host: HostInternal,\n    port: Option<u16>,\n    path_start: u32,             // Before initial '/', if any\n    query_start: Option<u32>,    // Before '?', unlike Position::QueryStart\n    fragment_start: Option<u32>, // Before '#', unlike Position::FragmentStart\n}\n\n/// Full configuration for the URL parser.\n#[derive(Copy, Clone)]\n#[must_use]\npub struct ParseOptions<'a> {\n    base_url: Option<&'a Url>,\n    encoding_override: EncodingOverride<'a>,\n    violation_fn: Option<&'a dyn Fn(SyntaxViolation)>,\n}\n\nimpl<'a> ParseOptions<'a> {\n    /// Change the base URL\n    pub fn base_url(mut self, new: Option<&'a Url>) -> Self {\n        self.base_url = new;\n        self\n    }\n\n    /// Override the character encoding of query strings.\n    /// This is a legacy concept only relevant for HTML.\n    pub fn encoding_override(mut self, new: EncodingOverride<'a>) -> Self {\n        self.encoding_override = new;\n        self\n    }\n\n    /// Call the provided function or closure for a non-fatal `SyntaxViolation`\n    /// when it occurs during parsing. Note that since the provided function is\n    /// `Fn`, the caller might need to utilize _interior mutability_, such as with\n    /// a `RefCell`, to collect the violations.\n    ///\n    /// ## Example\n    /// ```\n    /// use std::cell::RefCell;\n    /// use url::{Url, SyntaxViolation};\n    /// # use url::ParseError;\n    /// # fn run() -> Result<(), url::ParseError> {\n    /// let violations = RefCell::new(Vec::new());\n    /// let url = Url::options()\n    ///     .syntax_violation_callback(Some(&|v| violations.borrow_mut().push(v)))\n    ///     .parse(\"https:////example.com\")?;\n    /// assert_eq!(url.as_str(), \"https://example.com/\");\n    /// assert_eq!(violations.into_inner(),\n    ///            vec!(SyntaxViolation::ExpectedDoubleSlash));\n    /// # Ok(())\n    /// # }\n    /// # run().unwrap();\n    /// ```\n    pub fn syntax_violation_callback(mut self, new: Option<&'a dyn Fn(SyntaxViolation)>) -> Self {\n        self.violation_fn = new;\n        self\n    }\n\n    /// Parse an URL string with the configuration so far.\n    pub fn parse(self, input: &str) -> Result<Url, crate::ParseError> {\n        Parser {\n            serialization: String::with_capacity(input.len()),\n            base_url: self.base_url,\n            query_encoding_override: self.encoding_override,\n            violation_fn: self.violation_fn,\n            context: Context::UrlParser,\n        }\n        .parse_url(input)\n    }\n}\n\nimpl Url {\n    /// Parse an absolute URL from a string.\n    ///\n    /// # Examples\n    ///\n    /// ```rust\n    /// use url::Url;\n    /// # use url::ParseError;\n    ///\n    /// # fn run() -> Result<(), ParseError> {\n    /// let url = Url::parse(\"https://example.net\")?;\n    /// # Ok(())\n    /// # }\n    /// # run().unwrap();\n    /// ```\n    ///\n    /// # Errors\n    ///\n    /// If the function can not parse an absolute URL from the given string,\n    /// a [`ParseError`] variant will be returned.\n    ///\n    /// [`ParseError`]: enum.ParseError.html\n    #[inline]\n    pub fn parse(input: &str) -> Result<Url, crate::ParseError> {\n        Url::options().parse(input)\n    }\n\n    /// Parse an absolute URL from a string and add params to its query string.\n    ///\n    /// Existing params are not removed.\n    ///\n    /// # Examples\n    ///\n    /// ```rust\n    /// use url::Url;\n    /// # use url::ParseError;\n    ///\n    /// # fn run() -> Result<(), ParseError> {\n    /// let url = Url::parse_with_params(\"https://example.net?dont=clobberme\",\n    ///                                  &[(\"lang\", \"rust\"), (\"browser\", \"servo\")])?;\n    /// assert_eq!(\"https://example.net/?dont=clobberme&lang=rust&browser=servo\", url.as_str());\n    /// # Ok(())\n    /// # }\n    /// # run().unwrap();\n    /// ```\n    ///\n    /// # Errors\n    ///\n    /// If the function can not parse an absolute URL from the given string,\n    /// a [`ParseError`] variant will be returned.\n    ///\n    /// [`ParseError`]: enum.ParseError.html\n    #[inline]\n    pub fn parse_with_params<I, K, V>(input: &str, iter: I) -> Result<Url, crate::ParseError>\n    where\n        I: IntoIterator,\n        I::Item: Borrow<(K, V)>,\n        K: AsRef<str>,\n        V: AsRef<str>,\n    {\n        let mut url = Url::options().parse(input);\n\n        if let Ok(ref mut url) = url {\n            url.query_pairs_mut().extend_pairs(iter);\n        }\n\n        url\n    }\n\n    /// https://url.spec.whatwg.org/#potentially-strip-trailing-spaces-from-an-opaque-path\n    fn strip_trailing_spaces_from_opaque_path(&mut self) {\n        if !self.cannot_be_a_base() {\n            return;\n        }\n\n        if self.fragment_start.is_some() {\n            return;\n        }\n\n        if self.query_start.is_some() {\n            return;\n        }\n\n        let trailing_space_count = self\n            .serialization\n            .chars()\n            .rev()\n            .take_while(|c| *c == ' ')\n            .count();\n\n        let start = self.serialization.len() - trailing_space_count;\n\n        self.serialization.truncate(start);\n    }\n\n    /// Parse a string as an URL, with this URL as the base URL.\n    ///\n    /// The inverse of this is [`make_relative`].\n    ///\n    /// Note: a trailing slash is significant.\n    /// Without it, the last path component is considered to be a “file” name\n    /// to be removed to get at the “directory” that is used as the base:\n    ///\n    /// # Examples\n    ///\n    /// ```rust\n    /// use url::Url;\n    /// # use url::ParseError;\n    ///\n    /// # fn run() -> Result<(), ParseError> {\n    /// let base = Url::parse(\"https://example.net/a/b.html\")?;\n    /// let url = base.join(\"c.png\")?;\n    /// assert_eq!(url.as_str(), \"https://example.net/a/c.png\");  // Not /a/b.html/c.png\n    ///\n    /// let base = Url::parse(\"https://example.net/a/b/\")?;\n    /// let url = base.join(\"c.png\")?;\n    /// assert_eq!(url.as_str(), \"https://example.net/a/b/c.png\");\n    /// # Ok(())\n    /// # }\n    /// # run().unwrap();\n    /// ```\n    ///\n    /// # Errors\n    ///\n    /// If the function can not parse an URL from the given string\n    /// with this URL as the base URL, a [`ParseError`] variant will be returned.\n    ///\n    /// [`ParseError`]: enum.ParseError.html\n    /// [`make_relative`]: #method.make_relative\n    #[inline]\n    pub fn join(&self, input: &str) -> Result<Url, crate::ParseError> {\n        Url::options().base_url(Some(self)).parse(input)\n    }\n\n    /// Creates a relative URL if possible, with this URL as the base URL.\n    ///\n    /// This is the inverse of [`join`].\n    ///\n    /// # Examples\n    ///\n    /// ```rust\n    /// use url::Url;\n    /// # use url::ParseError;\n    ///\n    /// # fn run() -> Result<(), ParseError> {\n    /// let base = Url::parse(\"https://example.net/a/b.html\")?;\n    /// let url = Url::parse(\"https://example.net/a/c.png\")?;\n    /// let relative = base.make_relative(&url);\n    /// assert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"c.png\"));\n    ///\n    /// let base = Url::parse(\"https://example.net/a/b/\")?;\n    /// let url = Url::parse(\"https://example.net/a/b/c.png\")?;\n    /// let relative = base.make_relative(&url);\n    /// assert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"c.png\"));\n    ///\n    /// let base = Url::parse(\"https://example.net/a/b/\")?;\n    /// let url = Url::parse(\"https://example.net/a/d/c.png\")?;\n    /// let relative = base.make_relative(&url);\n    /// assert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"../d/c.png\"));\n    ///\n    /// let base = Url::parse(\"https://example.net/a/b.html?c=d\")?;\n    /// let url = Url::parse(\"https://example.net/a/b.html?e=f\")?;\n    /// let relative = base.make_relative(&url);\n    /// assert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"?e=f\"));\n    /// # Ok(())\n    /// # }\n    /// # run().unwrap();\n    /// ```\n    ///\n    /// # Errors\n    ///\n    /// If this URL can't be a base for the given URL, `None` is returned.\n    /// This is for example the case if the scheme, host or port are not the same.\n    ///\n    /// [`join`]: #method.join\n    pub fn make_relative(&self, url: &Url) -> Option<String> {\n        if self.cannot_be_a_base() {\n            return None;\n        }\n\n        // Scheme, host and port need to be the same\n        if self.scheme() != url.scheme() || self.host() != url.host() || self.port() != url.port() {\n            return None;\n        }\n\n        // We ignore username/password at this point\n\n        // The path has to be transformed\n        let mut relative = String::new();\n\n        // Extract the filename of both URIs, these need to be handled separately\n        fn extract_path_filename(s: &str) -> (&str, &str) {\n            let last_slash_idx = s.rfind('/').unwrap_or(0);\n            let (path, filename) = s.split_at(last_slash_idx);\n            if filename.is_empty() {\n                (path, \"\")\n            } else {\n                (path, &filename[1..])\n            }\n        }\n\n        let (base_path, base_filename) = extract_path_filename(self.path());\n        let (url_path, url_filename) = extract_path_filename(url.path());\n\n        let mut base_path = base_path.split('/').peekable();\n        let mut url_path = url_path.split('/').peekable();\n\n        // Skip over the common prefix\n        while base_path.peek().is_some() && base_path.peek() == url_path.peek() {\n            base_path.next();\n            url_path.next();\n        }\n\n        // Add `..` segments for the remainder of the base path\n        for base_path_segment in base_path {\n            // Skip empty last segments\n            if base_path_segment.is_empty() {\n                break;\n            }\n\n            if !relative.is_empty() {\n                relative.push('/');\n            }\n\n            relative.push_str(\"..\");\n        }\n\n        // Append the remainder of the other URI\n        for url_path_segment in url_path {\n            if !relative.is_empty() {\n                relative.push('/');\n            }\n\n            relative.push_str(url_path_segment);\n        }\n\n        // Add the filename if they are not the same\n        if !relative.is_empty() || base_filename != url_filename {\n            // If the URIs filename is empty this means that it was a directory\n            // so we'll have to append a '/'.\n            //\n            // Otherwise append it directly as the new filename.\n            if url_filename.is_empty() {\n                relative.push('/');\n            } else {\n                if !relative.is_empty() {\n                    relative.push('/');\n                }\n                relative.push_str(url_filename);\n            }\n        }\n\n        // Query and fragment are only taken from the other URI\n        if let Some(query) = url.query() {\n            relative.push('?');\n            relative.push_str(query);\n        }\n\n        if let Some(fragment) = url.fragment() {\n            relative.push('#');\n            relative.push_str(fragment);\n        }\n\n        Some(relative)\n    }\n\n    /// Return a default `ParseOptions` that can fully configure the URL parser.\n    ///\n    /// # Examples\n    ///\n    /// Get default `ParseOptions`, then change base url\n    ///\n    /// ```rust\n    /// use url::Url;\n    /// # use url::ParseError;\n    /// # fn run() -> Result<(), ParseError> {\n    /// let options = Url::options();\n    /// let api = Url::parse(\"https://api.example.com\")?;\n    /// let base_url = options.base_url(Some(&api));\n    /// let version_url = base_url.parse(\"version.json\")?;\n    /// assert_eq!(version_url.as_str(), \"https://api.example.com/version.json\");\n    /// # Ok(())\n    /// # }\n    /// # run().unwrap();\n    /// ```\n    pub fn options<'a>() -> ParseOptions<'a> {\n        ParseOptions {\n            base_url: None,\n            encoding_override: None,\n            violation_fn: None,\n        }\n    }\n\n    /// Return the serialization of this URL.\n    ///\n    /// This is fast since that serialization is already stored in the `Url` struct.\n    ///\n    /// # Examples\n    ///\n    /// ```rust\n    /// use url::Url;\n    /// # use url::ParseError;\n    ///\n    /// # fn run() -> Result<(), ParseError> {\n    /// let url_str = \"https://example.net/\";\n    /// let url = Url::parse(url_str)?;\n    /// assert_eq!(url.as_str(), url_str);\n    /// # Ok(())\n    /// # }\n    /// # run().unwrap();\n    /// ```\n    #[inline]\n    pub fn as_str(&self) -> &str {\n        &self.serialization\n    }\n\n    /// Return the serialization of this URL.\n    ///\n    /// This consumes the `Url` and takes ownership of the `String` stored in it.\n    ///\n    /// # Examples\n    ///\n    /// ```rust\n    /// use url::Url;\n    /// # use url::ParseError;\n    ///\n    /// # fn run() -> Result<(), ParseError> {\n    /// let url_str = \"https://example.net/\";\n    /// let url = Url::parse(url_str)?;\n    /// assert_eq!(String::from(url), url_str);\n    /// # Ok(())\n    /// # }\n    /// # run().unwrap();\n    /// ```\n    #[inline]\n    #[deprecated(since = \"2.3.0\", note = \"use Into<String>\")]\n    pub fn into_string(self) -> String {\n        self.into()\n    }\n\n    /// For internal testing, not part of the public API.\n    ///\n    /// Methods of the `Url` struct assume a number of invariants.\n    /// This checks each of these invariants and panic if one is not met.\n    /// This is for testing rust-url itself.\n    #[doc(hidden)]\n    pub fn check_invariants(&self) -> Result<(), String> {\n        macro_rules! assert {\n            ($x: expr) => {\n                if !$x {\n                    return Err(format!(\n                        \"!( {} ) for URL {:?}\",\n                        stringify!($x),\n                        self.serialization\n                    ));\n                }\n            };\n        }\n\n        macro_rules! assert_eq {\n            ($a: expr, $b: expr) => {\n                {\n                    let a = $a;\n                    let b = $b;\n                    if a != b {\n                        return Err(format!(\"{:?} != {:?} ({} != {}) for URL {:?}\",\n                                           a, b, stringify!($a), stringify!($b),\n                                           self.serialization))\n                    }\n                }\n            }\n        }\n\n        assert!(self.scheme_end >= 1);\n        assert!(self.byte_at(0).is_ascii_alphabetic());\n        assert!(self\n            .slice(1..self.scheme_end)\n            .chars()\n            .all(|c| matches!(c, 'a'..='z' | 'A'..='Z' | '0'..='9' | '+' | '-' | '.')));\n        assert_eq!(self.byte_at(self.scheme_end), b':');\n\n        if self.slice(self.scheme_end + 1..).starts_with(\"//\") {\n            // URL with authority\n            if self.username_end != self.serialization.len() as u32 {\n                match self.byte_at(self.username_end) {\n                    b':' => {\n                        assert!(self.host_start >= self.username_end + 2);\n                        assert_eq!(self.byte_at(self.host_start - 1), b'@');\n                    }\n                    b'@' => assert!(self.host_start == self.username_end + 1),\n                    _ => assert_eq!(self.username_end, self.scheme_end + 3),\n                }\n            }\n            assert!(self.host_start >= self.username_end);\n            assert!(self.host_end >= self.host_start);\n            let host_str = self.slice(self.host_start..self.host_end);\n            match self.host {\n                HostInternal::None => assert_eq!(host_str, \"\"),\n                HostInternal::Ipv4(address) => assert_eq!(host_str, address.to_string()),\n                HostInternal::Ipv6(address) => {\n                    let h: Host<String> = Host::Ipv6(address);\n                    assert_eq!(host_str, h.to_string())\n                }\n                HostInternal::Domain => {\n                    if SchemeType::from(self.scheme()).is_special() {\n                        assert!(!host_str.is_empty())\n                    }\n                }\n            }\n            if self.path_start == self.host_end {\n                assert_eq!(self.port, None);\n            } else {\n                assert_eq!(self.byte_at(self.host_end), b':');\n                let port_str = self.slice(self.host_end + 1..self.path_start);\n                assert_eq!(\n                    self.port,\n                    Some(port_str.parse::<u16>().expect(\"Couldn't parse port?\"))\n                );\n            }\n            assert!(\n                self.path_start as usize == self.serialization.len()\n                    || matches!(self.byte_at(self.path_start), b'/' | b'#' | b'?')\n            );\n        } else {\n            // Anarchist URL (no authority)\n            assert_eq!(self.username_end, self.scheme_end + 1);\n            assert_eq!(self.host_start, self.scheme_end + 1);\n            assert_eq!(self.host_end, self.scheme_end + 1);\n            assert_eq!(self.host, HostInternal::None);\n            assert_eq!(self.port, None);\n            if self.path().starts_with(\"//\") {\n                // special case when first path segment is empty\n                assert_eq!(self.byte_at(self.scheme_end + 1), b'/');\n                assert_eq!(self.byte_at(self.scheme_end + 2), b'.');\n                assert_eq!(self.path_start, self.scheme_end + 3);\n            } else {\n                assert_eq!(self.path_start, self.scheme_end + 1);\n            }\n        }\n        if let Some(start) = self.query_start {\n            assert!(start >= self.path_start);\n            assert_eq!(self.byte_at(start), b'?');\n        }\n        if let Some(start) = self.fragment_start {\n            assert!(start >= self.path_start);\n            assert_eq!(self.byte_at(start), b'#');\n        }\n        if let (Some(query_start), Some(fragment_start)) = (self.query_start, self.fragment_start) {\n            assert!(fragment_start > query_start);\n        }\n\n        let other = Url::parse(self.as_str()).expect(\"Failed to parse myself?\");\n        assert_eq!(&self.serialization, &other.serialization);\n        assert_eq!(self.scheme_end, other.scheme_end);\n        assert_eq!(self.username_end, other.username_end);\n        assert_eq!(self.host_start, other.host_start);\n        assert_eq!(self.host_end, other.host_end);\n        assert!(\n            self.host == other.host ||\n                // XXX No host round-trips to empty host.\n                // See https://github.com/whatwg/url/issues/79\n                (self.host_str(), other.host_str()) == (None, Some(\"\"))\n        );\n        assert_eq!(self.port, other.port);\n        assert_eq!(self.path_start, other.path_start);\n        assert_eq!(self.query_start, other.query_start);\n        assert_eq!(self.fragment_start, other.fragment_start);\n        Ok(())\n    }\n\n    /// Return the origin of this URL (<https://url.spec.whatwg.org/#origin>)\n    ///\n    /// Note: this returns an opaque origin for `file:` URLs, which causes\n    /// `url.origin() != url.origin()`.\n    ///\n    /// # Examples\n    ///\n    /// URL with `ftp` scheme:\n    ///\n    /// ```rust\n    /// use url::{Host, Origin, Url};\n    /// # use url::ParseError;\n    ///\n    /// # fn run() -> Result<(), ParseError> {\n    /// let url = Url::parse(\"ftp://example.com/foo\")?;\n    /// assert_eq!(url.origin(),\n    ///            Origin::Tuple(\"ftp\".into(),\n    ///                          Host::Domain(\"example.com\".into()),\n    ///                          21));\n    /// # Ok(())\n    /// # }\n    /// # run().unwrap();\n    /// ```\n    ///\n    /// URL with `blob` scheme:\n    ///\n    /// ```rust\n    /// use url::{Host, Origin, Url};\n    /// # use url::ParseError;\n    ///\n    /// # fn run() -> Result<(), ParseError> {\n    /// let url = Url::parse(\"blob:https://example.com/foo\")?;\n    /// assert_eq!(url.origin(),\n    ///            Origin::Tuple(\"https\".into(),\n    ///                          Host::Domain(\"example.com\".into()),\n    ///                          443));\n    /// # Ok(())\n    /// # }\n    /// # run().unwrap();\n    /// ```\n    ///\n    /// URL with `file` scheme:\n    ///\n    /// ```rust\n    /// use url::{Host, Origin, Url};\n    /// # use url::ParseError;\n    ///\n    /// # fn run() -> Result<(), ParseError> {\n    /// let url = Url::parse(\"file:///tmp/foo\")?;\n    /// assert!(!url.origin().is_tuple());\n    ///\n    /// let other_url = Url::parse(\"file:///tmp/foo\")?;\n    /// assert!(url.origin() != other_url.origin());\n    /// # Ok(())\n    /// # }\n    /// # run().unwrap();\n    /// ```\n    ///\n    /// URL with other scheme:\n    ///\n    /// ```rust\n    /// use url::{Host, Origin, Url};\n    /// # use url::ParseError;\n    ///\n    /// # fn run() -> Result<(), ParseError> {\n    /// let url = Url::parse(\"foo:bar\")?;\n    /// assert!(!url.origin().is_tuple());\n    /// # Ok(())\n    /// # }\n    /// # run().unwrap();\n    /// ```\n    #[inline]\n    pub fn origin(&self) -> Origin {\n        origin::url_origin(self)\n    }\n\n    /// Return the scheme of this URL, lower-cased, as an ASCII string without the ':' delimiter.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use url::Url;\n    /// # use url::ParseError;\n    ///\n    /// # fn run() -> Result<(), ParseError> {\n    /// let url = Url::parse(\"file:///tmp/foo\")?;\n    /// assert_eq!(url.scheme(), \"file\");\n    /// # Ok(())\n    /// # }\n    /// # run().unwrap();\n    /// ```\n    #[inline]\n    pub fn scheme(&self) -> &str {\n        self.slice(..self.scheme_end)\n    }\n\n    /// Return whether the URL is special (has a special scheme)\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use url::Url;\n    /// # use url::ParseError;\n    ///\n    /// # fn run() -> Result<(), ParseError> {\n    /// assert!(Url::parse(\"http:///tmp/foo\")?.is_special());\n    /// assert!(Url::parse(\"file:///tmp/foo\")?.is_special());\n    /// assert!(!Url::parse(\"moz:///tmp/foo\")?.is_special());\n    /// # Ok(())\n    /// # }\n    /// # run().unwrap();\n    /// ```\n    pub fn is_special(&self) -> bool {\n        let scheme_type = SchemeType::from(self.scheme());\n        scheme_type.is_special()\n    }\n\n    /// Return whether the URL has an 'authority',\n    /// which can contain a username, password, host, and port number.\n    ///\n    /// URLs that do *not* are either path-only like `unix:/run/foo.socket`\n    /// or cannot-be-a-base like `data:text/plain,Stuff`.\n    ///\n    /// See also the `authority` method.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use url::Url;\n    /// # use url::ParseError;\n    ///\n    /// # fn run() -> Result<(), ParseError> {\n    /// let url = Url::parse(\"ftp://rms@example.com\")?;\n    /// assert!(url.has_authority());\n    ///\n    /// let url = Url::parse(\"unix:/run/foo.socket\")?;\n    /// assert!(!url.has_authority());\n    ///\n    /// let url = Url::parse(\"data:text/plain,Stuff\")?;\n    /// assert!(!url.has_authority());\n    /// # Ok(())\n    /// # }\n    /// # run().unwrap();\n    /// ```\n    #[inline]\n    pub fn has_authority(&self) -> bool {\n        debug_assert!(self.byte_at(self.scheme_end) == b':');\n        self.slice(self.scheme_end..).starts_with(\"://\")\n    }\n\n    /// Return the authority of this URL as an ASCII string.\n    ///\n    /// Non-ASCII domains are punycode-encoded per IDNA if this is the host\n    /// of a special URL, or percent encoded for non-special URLs.\n    /// IPv6 addresses are given between `[` and `]` brackets.\n    /// Ports are omitted if they match the well known port of a special URL.\n    ///\n    /// Username and password are percent-encoded.\n    ///\n    /// See also the `has_authority` method.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use url::Url;\n    /// # use url::ParseError;\n    ///\n    /// # fn run() -> Result<(), ParseError> {\n    /// let url = Url::parse(\"unix:/run/foo.socket\")?;\n    /// assert_eq!(url.authority(), \"\");\n    /// let url = Url::parse(\"file:///tmp/foo\")?;\n    /// assert_eq!(url.authority(), \"\");\n    /// let url = Url::parse(\"https://user:password@example.com/tmp/foo\")?;\n    /// assert_eq!(url.authority(), \"user:password@example.com\");\n    /// let url = Url::parse(\"irc://àlex.рф.example.com:6667/foo\")?;\n    /// assert_eq!(url.authority(), \"%C3%A0lex.%D1%80%D1%84.example.com:6667\");\n    /// let url = Url::parse(\"http://àlex.рф.example.com:80/foo\")?;\n    /// assert_eq!(url.authority(), \"xn--lex-8ka.xn--p1ai.example.com\");\n    /// # Ok(())\n    /// # }\n    /// # run().unwrap();\n    /// ```\n    pub fn authority(&self) -> &str {\n        let scheme_separator_len = \"://\".len() as u32;\n        if self.has_authority() && self.path_start > self.scheme_end + scheme_separator_len {\n            self.slice(self.scheme_end + scheme_separator_len..self.path_start)\n        } else {\n            \"\"\n        }\n    }\n\n    /// Return whether this URL is a cannot-be-a-base URL,\n    /// meaning that parsing a relative URL string with this URL as the base will return an error.\n    ///\n    /// This is the case if the scheme and `:` delimiter are not followed by a `/` slash,\n    /// as is typically the case of `data:` and `mailto:` URLs.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use url::Url;\n    /// # use url::ParseError;\n    ///\n    /// # fn run() -> Result<(), ParseError> {\n    /// let url = Url::parse(\"ftp://rms@example.com\")?;\n    /// assert!(!url.cannot_be_a_base());\n    ///\n    /// let url = Url::parse(\"unix:/run/foo.socket\")?;\n    /// assert!(!url.cannot_be_a_base());\n    ///\n    /// let url = Url::parse(\"data:text/plain,Stuff\")?;\n    /// assert!(url.cannot_be_a_base());\n    /// # Ok(())\n    /// # }\n    /// # run().unwrap();\n    /// ```\n    #[inline]\n    pub fn cannot_be_a_base(&self) -> bool {\n        !self.slice(self.scheme_end + 1..).starts_with('/')\n    }\n\n    /// Return the username for this URL (typically the empty string)\n    /// as a percent-encoded ASCII string.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use url::Url;\n    /// # use url::ParseError;\n    ///\n    /// # fn run() -> Result<(), ParseError> {\n    /// let url = Url::parse(\"ftp://rms@example.com\")?;\n    /// assert_eq!(url.username(), \"rms\");\n    ///\n    /// let url = Url::parse(\"ftp://:secret123@example.com\")?;\n    /// assert_eq!(url.username(), \"\");\n    ///\n    /// let url = Url::parse(\"https://example.com\")?;\n    /// assert_eq!(url.username(), \"\");\n    /// # Ok(())\n    /// # }\n    /// # run().unwrap();\n    /// ```\n    pub fn username(&self) -> &str {\n        let scheme_separator_len = \"://\".len() as u32;\n        if self.has_authority() && self.username_end > self.scheme_end + scheme_separator_len {\n            self.slice(self.scheme_end + scheme_separator_len..self.username_end)\n        } else {\n            \"\"\n        }\n    }\n\n    /// Return the password for this URL, if any, as a percent-encoded ASCII string.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use url::Url;\n    /// # use url::ParseError;\n    ///\n    /// # fn run() -> Result<(), ParseError> {\n    /// let url = Url::parse(\"ftp://rms:secret123@example.com\")?;\n    /// assert_eq!(url.password(), Some(\"secret123\"));\n    ///\n    /// let url = Url::parse(\"ftp://:secret123@example.com\")?;\n    /// assert_eq!(url.password(), Some(\"secret123\"));\n    ///\n    /// let url = Url::parse(\"ftp://rms@example.com\")?;\n    /// assert_eq!(url.password(), None);\n    ///\n    /// let url = Url::parse(\"https://example.com\")?;\n    /// assert_eq!(url.password(), None);\n    /// # Ok(())\n    /// # }\n    /// # run().unwrap();\n    /// ```\n    pub fn password(&self) -> Option<&str> {\n        // This ':' is not the one marking a port number since a host can not be empty.\n        // (Except for file: URLs, which do not have port numbers.)\n        if self.has_authority()\n            && self.username_end != self.serialization.len() as u32\n            && self.byte_at(self.username_end) == b':'\n        {\n            debug_assert!(self.byte_at(self.host_start - 1) == b'@');\n            Some(self.slice(self.username_end + 1..self.host_start - 1))\n        } else {\n            None\n        }\n    }\n\n    /// Equivalent to `url.host().is_some()`.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use url::Url;\n    /// # use url::ParseError;\n    ///\n    /// # fn run() -> Result<(), ParseError> {\n    /// let url = Url::parse(\"ftp://rms@example.com\")?;\n    /// assert!(url.has_host());\n    ///\n    /// let url = Url::parse(\"unix:/run/foo.socket\")?;\n    /// assert!(!url.has_host());\n    ///\n    /// let url = Url::parse(\"data:text/plain,Stuff\")?;\n    /// assert!(!url.has_host());\n    /// # Ok(())\n    /// # }\n    /// # run().unwrap();\n    /// ```\n    pub fn has_host(&self) -> bool {\n        !matches!(self.host, HostInternal::None)\n    }\n\n    /// Return the string representation of the host (domain or IP address) for this URL, if any.\n    ///\n    /// Non-ASCII domains are punycode-encoded per IDNA if this is the host\n    /// of a special URL, or percent encoded for non-special URLs.\n    /// IPv6 addresses are given between `[` and `]` brackets.\n    ///\n    /// Cannot-be-a-base URLs (typical of `data:` and `mailto:`) and some `file:` URLs\n    /// don’t have a host.\n    ///\n    /// See also the `host` method.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use url::Url;\n    /// # use url::ParseError;\n    ///\n    /// # fn run() -> Result<(), ParseError> {\n    /// let url = Url::parse(\"https://127.0.0.1/index.html\")?;\n    /// assert_eq!(url.host_str(), Some(\"127.0.0.1\"));\n    ///\n    /// let url = Url::parse(\"ftp://rms@example.com\")?;\n    /// assert_eq!(url.host_str(), Some(\"example.com\"));\n    ///\n    /// let url = Url::parse(\"unix:/run/foo.socket\")?;\n    /// assert_eq!(url.host_str(), None);\n    ///\n    /// let url = Url::parse(\"data:text/plain,Stuff\")?;\n    /// assert_eq!(url.host_str(), None);\n    /// # Ok(())\n    /// # }\n    /// # run().unwrap();\n    /// ```\n    pub fn host_str(&self) -> Option<&str> {\n        if self.has_host() {\n            Some(self.slice(self.host_start..self.host_end))\n        } else {\n            None\n        }\n    }\n\n    /// Return the parsed representation of the host for this URL.\n    /// Non-ASCII domain labels are punycode-encoded per IDNA if this is the host\n    /// of a special URL, or percent encoded for non-special URLs.\n    ///\n    /// Cannot-be-a-base URLs (typical of `data:` and `mailto:`) and some `file:` URLs\n    /// don’t have a host.\n    ///\n    /// See also the `host_str` method.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use url::Url;\n    /// # use url::ParseError;\n    ///\n    /// # fn run() -> Result<(), ParseError> {\n    /// let url = Url::parse(\"https://127.0.0.1/index.html\")?;\n    /// assert!(url.host().is_some());\n    ///\n    /// let url = Url::parse(\"ftp://rms@example.com\")?;\n    /// assert!(url.host().is_some());\n    ///\n    /// let url = Url::parse(\"unix:/run/foo.socket\")?;\n    /// assert!(url.host().is_none());\n    ///\n    /// let url = Url::parse(\"data:text/plain,Stuff\")?;\n    /// assert!(url.host().is_none());\n    /// # Ok(())\n    /// # }\n    /// # run().unwrap();\n    /// ```\n    pub fn host(&self) -> Option<Host<&str>> {\n        match self.host {\n            HostInternal::None => None,\n            HostInternal::Domain => Some(Host::Domain(self.slice(self.host_start..self.host_end))),\n            HostInternal::Ipv4(address) => Some(Host::Ipv4(address)),\n            HostInternal::Ipv6(address) => Some(Host::Ipv6(address)),\n        }\n    }\n\n    /// If this URL has a host and it is a domain name (not an IP address), return it.\n    /// Non-ASCII domains are punycode-encoded per IDNA if this is the host\n    /// of a special URL, or percent encoded for non-special URLs.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use url::Url;\n    /// # use url::ParseError;\n    ///\n    /// # fn run() -> Result<(), ParseError> {\n    /// let url = Url::parse(\"https://127.0.0.1/\")?;\n    /// assert_eq!(url.domain(), None);\n    ///\n    /// let url = Url::parse(\"mailto:rms@example.net\")?;\n    /// assert_eq!(url.domain(), None);\n    ///\n    /// let url = Url::parse(\"https://example.com/\")?;\n    /// assert_eq!(url.domain(), Some(\"example.com\"));\n    /// # Ok(())\n    /// # }\n    /// # run().unwrap();\n    /// ```\n    pub fn domain(&self) -> Option<&str> {\n        match self.host {\n            HostInternal::Domain => Some(self.slice(self.host_start..self.host_end)),\n            _ => None,\n        }\n    }\n\n    /// Return the port number for this URL, if any.\n    ///\n    /// Note that default port numbers are never reflected by the serialization,\n    /// use the `port_or_known_default()` method if you want a default port number returned.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use url::Url;\n    /// # use url::ParseError;\n    ///\n    /// # fn run() -> Result<(), ParseError> {\n    /// let url = Url::parse(\"https://example.com\")?;\n    /// assert_eq!(url.port(), None);\n    ///\n    /// let url = Url::parse(\"https://example.com:443/\")?;\n    /// assert_eq!(url.port(), None);\n    ///\n    /// let url = Url::parse(\"ssh://example.com:22\")?;\n    /// assert_eq!(url.port(), Some(22));\n    /// # Ok(())\n    /// # }\n    /// # run().unwrap();\n    /// ```\n    #[inline]\n    pub fn port(&self) -> Option<u16> {\n        self.port\n    }\n\n    /// Return the port number for this URL, or the default port number if it is known.\n    ///\n    /// This method only knows the default port number\n    /// of the `http`, `https`, `ws`, `wss` and `ftp` schemes.\n    ///\n    /// For URLs in these schemes, this method always returns `Some(_)`.\n    /// For other schemes, it is the same as `Url::port()`.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use url::Url;\n    /// # use url::ParseError;\n    ///\n    /// # fn run() -> Result<(), ParseError> {\n    /// let url = Url::parse(\"foo://example.com\")?;\n    /// assert_eq!(url.port_or_known_default(), None);\n    ///\n    /// let url = Url::parse(\"foo://example.com:1456\")?;\n    /// assert_eq!(url.port_or_known_default(), Some(1456));\n    ///\n    /// let url = Url::parse(\"https://example.com\")?;\n    /// assert_eq!(url.port_or_known_default(), Some(443));\n    /// # Ok(())\n    /// # }\n    /// # run().unwrap();\n    /// ```\n    #[inline]\n    pub fn port_or_known_default(&self) -> Option<u16> {\n        self.port.or_else(|| parser::default_port(self.scheme()))\n    }\n\n    /// Resolve a URL’s host and port number to `SocketAddr`.\n    ///\n    /// If the URL has the default port number of a scheme that is unknown to this library,\n    /// `default_port_number` provides an opportunity to provide the actual port number.\n    /// In non-example code this should be implemented either simply as `|| None`,\n    /// or by matching on the URL’s `.scheme()`.\n    ///\n    /// If the host is a domain, it is resolved using the standard library’s DNS support.\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// let url = url::Url::parse(\"https://example.net/\").unwrap();\n    /// let addrs = url.socket_addrs(|| None).unwrap();\n    /// std::net::TcpStream::connect(&*addrs)\n    /// # ;\n    /// ```\n    ///\n    /// ```\n    /// /// With application-specific known default port numbers\n    /// fn socket_addrs(url: url::Url) -> std::io::Result<Vec<std::net::SocketAddr>> {\n    ///     url.socket_addrs(|| match url.scheme() {\n    ///         \"socks5\" | \"socks5h\" => Some(1080),\n    ///         _ => None,\n    ///     })\n    /// }\n    /// ```\n    pub fn socket_addrs(\n        &self,\n        default_port_number: impl Fn() -> Option<u16>,\n    ) -> io::Result<Vec<SocketAddr>> {\n        // Note: trying to avoid the Vec allocation by returning `impl AsRef<[SocketAddr]>`\n        // causes borrowck issues because the return value borrows `default_port_number`:\n        //\n        // https://github.com/rust-lang/rfcs/blob/master/text/1951-expand-impl-trait.md#scoping-for-type-and-lifetime-parameters\n        //\n        // > This RFC proposes that *all* type parameters are considered in scope\n        // > for `impl Trait` in return position\n\n        fn io_result<T>(opt: Option<T>, message: &str) -> io::Result<T> {\n            opt.ok_or_else(|| io::Error::new(io::ErrorKind::InvalidData, message))\n        }\n\n        let host = io_result(self.host(), \"No host name in the URL\")?;\n        let port = io_result(\n            self.port_or_known_default().or_else(default_port_number),\n            \"No port number in the URL\",\n        )?;\n        Ok(match host {\n            Host::Domain(domain) => (domain, port).to_socket_addrs()?.collect(),\n            Host::Ipv4(ip) => vec![(ip, port).into()],\n            Host::Ipv6(ip) => vec![(ip, port).into()],\n        })\n    }\n\n    /// Return the path for this URL, as a percent-encoded ASCII string.\n    /// For cannot-be-a-base URLs, this is an arbitrary string that doesn’t start with '/'.\n    /// For other URLs, this starts with a '/' slash\n    /// and continues with slash-separated path segments.\n    ///\n    /// # Examples\n    ///\n    /// ```rust\n    /// use url::{Url, ParseError};\n    ///\n    /// # fn run() -> Result<(), ParseError> {\n    /// let url = Url::parse(\"https://example.com/api/versions?page=2\")?;\n    /// assert_eq!(url.path(), \"/api/versions\");\n    ///\n    /// let url = Url::parse(\"https://example.com\")?;\n    /// assert_eq!(url.path(), \"/\");\n    ///\n    /// let url = Url::parse(\"https://example.com/countries/việt nam\")?;\n    /// assert_eq!(url.path(), \"/countries/vi%E1%BB%87t%20nam\");\n    /// # Ok(())\n    /// # }\n    /// # run().unwrap();\n    /// ```\n    pub fn path(&self) -> &str {\n        match (self.query_start, self.fragment_start) {\n            (None, None) => self.slice(self.path_start..),\n            (Some(next_component_start), _) | (None, Some(next_component_start)) => {\n                self.slice(self.path_start..next_component_start)\n            }\n        }\n    }\n\n    /// Unless this URL is cannot-be-a-base,\n    /// return an iterator of '/' slash-separated path segments,\n    /// each as a percent-encoded ASCII string.\n    ///\n    /// Return `None` for cannot-be-a-base URLs.\n    ///\n    /// When `Some` is returned, the iterator always contains at least one string\n    /// (which may be empty).\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use url::Url;\n    /// # use std::error::Error;\n    ///\n    /// # fn run() -> Result<(), Box<dyn Error>> {\n    /// let url = Url::parse(\"https://example.com/foo/bar\")?;\n    /// let mut path_segments = url.path_segments().ok_or_else(|| \"cannot be base\")?;\n    /// assert_eq!(path_segments.next(), Some(\"foo\"));\n    /// assert_eq!(path_segments.next(), Some(\"bar\"));\n    /// assert_eq!(path_segments.next(), None);\n    ///\n    /// let url = Url::parse(\"https://example.com\")?;\n    /// let mut path_segments = url.path_segments().ok_or_else(|| \"cannot be base\")?;\n    /// assert_eq!(path_segments.next(), Some(\"\"));\n    /// assert_eq!(path_segments.next(), None);\n    ///\n    /// let url = Url::parse(\"data:text/plain,HelloWorld\")?;\n    /// assert!(url.path_segments().is_none());\n    ///\n    /// let url = Url::parse(\"https://example.com/countries/việt nam\")?;\n    /// let mut path_segments = url.path_segments().ok_or_else(|| \"cannot be base\")?;\n    /// assert_eq!(path_segments.next(), Some(\"countries\"));\n    /// assert_eq!(path_segments.next(), Some(\"vi%E1%BB%87t%20nam\"));\n    /// # Ok(())\n    /// # }\n    /// # run().unwrap();\n    /// ```\n    pub fn path_segments(&self) -> Option<str::Split<'_, char>> {\n        let path = self.path();\n        path.strip_prefix('/').map(|remainder| remainder.split('/'))\n    }\n\n    /// Return this URL’s query string, if any, as a percent-encoded ASCII string.\n    ///\n    /// # Examples\n    ///\n    /// ```rust\n    /// use url::Url;\n    /// # use url::ParseError;\n    ///\n    /// fn run() -> Result<(), ParseError> {\n    /// let url = Url::parse(\"https://example.com/products?page=2\")?;\n    /// let query = url.query();\n    /// assert_eq!(query, Some(\"page=2\"));\n    ///\n    /// let url = Url::parse(\"https://example.com/products\")?;\n    /// let query = url.query();\n    /// assert!(query.is_none());\n    ///\n    /// let url = Url::parse(\"https://example.com/?country=español\")?;\n    /// let query = url.query();\n    /// assert_eq!(query, Some(\"country=espa%C3%B1ol\"));\n    /// # Ok(())\n    /// # }\n    /// # run().unwrap();\n    /// ```\n    pub fn query(&self) -> Option<&str> {\n        match (self.query_start, self.fragment_start) {\n            (None, _) => None,\n            (Some(query_start), None) => {\n                debug_assert!(self.byte_at(query_start) == b'?');\n                Some(self.slice(query_start + 1..))\n            }\n            (Some(query_start), Some(fragment_start)) => {\n                debug_assert!(self.byte_at(query_start) == b'?');\n                Some(self.slice(query_start + 1..fragment_start))\n            }\n        }\n    }\n\n    /// Parse the URL’s query string, if any, as `application/x-www-form-urlencoded`\n    /// and return an iterator of (key, value) pairs.\n    ///\n    /// # Examples\n    ///\n    /// ```rust\n    /// use std::borrow::Cow;\n    ///\n    /// use url::Url;\n    /// # use url::ParseError;\n    ///\n    /// # fn run() -> Result<(), ParseError> {\n    /// let url = Url::parse(\"https://example.com/products?page=2&sort=desc\")?;\n    /// let mut pairs = url.query_pairs();\n    ///\n    /// assert_eq!(pairs.count(), 2);\n    ///\n    /// assert_eq!(pairs.next(), Some((Cow::Borrowed(\"page\"), Cow::Borrowed(\"2\"))));\n    /// assert_eq!(pairs.next(), Some((Cow::Borrowed(\"sort\"), Cow::Borrowed(\"desc\"))));\n    /// # Ok(())\n    /// # }\n    /// # run().unwrap();\n    /// ```\n\n    #[inline]\n    pub fn query_pairs(&self) -> form_urlencoded::Parse<'_> {\n        form_urlencoded::parse(self.query().unwrap_or(\"\").as_bytes())\n    }\n\n    /// Return this URL’s fragment identifier, if any.\n    ///\n    /// A fragment is the part of the URL after the `#` symbol.\n    /// The fragment is optional and, if present, contains a fragment identifier\n    /// that identifies a secondary resource, such as a section heading\n    /// of a document.\n    ///\n    /// In HTML, the fragment identifier is usually the id attribute of a an element\n    /// that is scrolled to on load. Browsers typically will not send the fragment portion\n    /// of a URL to the server.\n    ///\n    /// **Note:** the parser did *not* percent-encode this component,\n    /// but the input may have been percent-encoded already.\n    ///\n    /// # Examples\n    ///\n    /// ```rust\n    /// use url::Url;\n    /// # use url::ParseError;\n    ///\n    /// # fn run() -> Result<(), ParseError> {\n    /// let url = Url::parse(\"https://example.com/data.csv#row=4\")?;\n    ///\n    /// assert_eq!(url.fragment(), Some(\"row=4\"));\n    ///\n    /// let url = Url::parse(\"https://example.com/data.csv#cell=4,1-6,2\")?;\n    ///\n    /// assert_eq!(url.fragment(), Some(\"cell=4,1-6,2\"));\n    /// # Ok(())\n    /// # }\n    /// # run().unwrap();\n    /// ```\n    pub fn fragment(&self) -> Option<&str> {\n        self.fragment_start.map(|start| {\n            debug_assert!(self.byte_at(start) == b'#');\n            self.slice(start + 1..)\n        })\n    }\n\n    fn mutate<F: FnOnce(&mut Parser<'_>) -> R, R>(&mut self, f: F) -> R {\n        let mut parser = Parser::for_setter(mem::take(&mut self.serialization));\n        let result = f(&mut parser);\n        self.serialization = parser.serialization;\n        result\n    }\n\n    /// Change this URL’s fragment identifier.\n    ///\n    /// # Examples\n    ///\n    /// ```rust\n    /// use url::Url;\n    /// # use url::ParseError;\n    ///\n    /// # fn run() -> Result<(), ParseError> {\n    /// let mut url = Url::parse(\"https://example.com/data.csv\")?;\n    /// assert_eq!(url.as_str(), \"https://example.com/data.csv\");\n\n    /// url.set_fragment(Some(\"cell=4,1-6,2\"));\n    /// assert_eq!(url.as_str(), \"https://example.com/data.csv#cell=4,1-6,2\");\n    /// assert_eq!(url.fragment(), Some(\"cell=4,1-6,2\"));\n    ///\n    /// url.set_fragment(None);\n    /// assert_eq!(url.as_str(), \"https://example.com/data.csv\");\n    /// assert!(url.fragment().is_none());\n    /// # Ok(())\n    /// # }\n    /// # run().unwrap();\n    /// ```\n    pub fn set_fragment(&mut self, fragment: Option<&str>) {\n        // Remove any previous fragment\n        if let Some(start) = self.fragment_start {\n            debug_assert!(self.byte_at(start) == b'#');\n            self.serialization.truncate(start as usize);\n        }\n        // Write the new one\n        if let Some(input) = fragment {\n            self.fragment_start = Some(to_u32(self.serialization.len()).unwrap());\n            self.serialization.push('#');\n            self.mutate(|parser| parser.parse_fragment(parser::Input::new_no_trim(input)))\n        } else {\n            self.fragment_start = None;\n            self.strip_trailing_spaces_from_opaque_path();\n        }\n    }\n\n    fn take_fragment(&mut self) -> Option<String> {\n        self.fragment_start.take().map(|start| {\n            debug_assert!(self.byte_at(start) == b'#');\n            let fragment = self.slice(start + 1..).to_owned();\n            self.serialization.truncate(start as usize);\n            fragment\n        })\n    }\n\n    fn restore_already_parsed_fragment(&mut self, fragment: Option<String>) {\n        if let Some(ref fragment) = fragment {\n            assert!(self.fragment_start.is_none());\n            self.fragment_start = Some(to_u32(self.serialization.len()).unwrap());\n            self.serialization.push('#');\n            self.serialization.push_str(fragment);\n        }\n    }\n\n    /// Change this URL’s query string. If `query` is `None`, this URL's\n    /// query string will be cleared.\n    ///\n    /// # Examples\n    ///\n    /// ```rust\n    /// use url::Url;\n    /// # use url::ParseError;\n    ///\n    /// # fn run() -> Result<(), ParseError> {\n    /// let mut url = Url::parse(\"https://example.com/products\")?;\n    /// assert_eq!(url.as_str(), \"https://example.com/products\");\n    ///\n    /// url.set_query(Some(\"page=2\"));\n    /// assert_eq!(url.as_str(), \"https://example.com/products?page=2\");\n    /// assert_eq!(url.query(), Some(\"page=2\"));\n    /// # Ok(())\n    /// # }\n    /// # run().unwrap();\n    /// ```\n    pub fn set_query(&mut self, query: Option<&str>) {\n        let fragment = self.take_fragment();\n\n        // Remove any previous query\n        if let Some(start) = self.query_start.take() {\n            debug_assert!(self.byte_at(start) == b'?');\n            self.serialization.truncate(start as usize);\n        }\n        // Write the new query, if any\n        if let Some(input) = query {\n            self.query_start = Some(to_u32(self.serialization.len()).unwrap());\n            self.serialization.push('?');\n            let scheme_type = SchemeType::from(self.scheme());\n            let scheme_end = self.scheme_end;\n            self.mutate(|parser| {\n                let vfn = parser.violation_fn;\n                parser.parse_query(\n                    scheme_type,\n                    scheme_end,\n                    parser::Input::new_trim_tab_and_newlines(input, vfn),\n                )\n            });\n        } else {\n            self.query_start = None;\n            if fragment.is_none() {\n                self.strip_trailing_spaces_from_opaque_path();\n            }\n        }\n\n        self.restore_already_parsed_fragment(fragment);\n    }\n\n    /// Manipulate this URL’s query string, viewed as a sequence of name/value pairs\n    /// in `application/x-www-form-urlencoded` syntax.\n    ///\n    /// The return value has a method-chaining API:\n    ///\n    /// ```rust\n    /// # use url::{Url, ParseError};\n    ///\n    /// # fn run() -> Result<(), ParseError> {\n    /// let mut url = Url::parse(\"https://example.net?lang=fr#nav\")?;\n    /// assert_eq!(url.query(), Some(\"lang=fr\"));\n    ///\n    /// url.query_pairs_mut().append_pair(\"foo\", \"bar\");\n    /// assert_eq!(url.query(), Some(\"lang=fr&foo=bar\"));\n    /// assert_eq!(url.as_str(), \"https://example.net/?lang=fr&foo=bar#nav\");\n    ///\n    /// url.query_pairs_mut()\n    ///     .clear()\n    ///     .append_pair(\"foo\", \"bar & baz\")\n    ///     .append_pair(\"saisons\", \"\\u{00C9}t\\u{00E9}+hiver\");\n    /// assert_eq!(url.query(), Some(\"foo=bar+%26+baz&saisons=%C3%89t%C3%A9%2Bhiver\"));\n    /// assert_eq!(url.as_str(),\n    ///            \"https://example.net/?foo=bar+%26+baz&saisons=%C3%89t%C3%A9%2Bhiver#nav\");\n    /// # Ok(())\n    /// # }\n    /// # run().unwrap();\n    /// ```\n    ///\n    /// Note: `url.query_pairs_mut().clear();` is equivalent to `url.set_query(Some(\"\"))`,\n    /// not `url.set_query(None)`.\n    ///\n    /// The state of `Url` is unspecified if this return value is leaked without being dropped.\n    pub fn query_pairs_mut(&mut self) -> form_urlencoded::Serializer<'_, UrlQuery<'_>> {\n        let fragment = self.take_fragment();\n\n        let query_start;\n        if let Some(start) = self.query_start {\n            debug_assert!(self.byte_at(start) == b'?');\n            query_start = start as usize;\n        } else {\n            query_start = self.serialization.len();\n            self.query_start = Some(to_u32(query_start).unwrap());\n            self.serialization.push('?');\n        }\n\n        let query = UrlQuery {\n            url: Some(self),\n            fragment,\n        };\n        form_urlencoded::Serializer::for_suffix(query, query_start + \"?\".len())\n    }\n\n    fn take_after_path(&mut self) -> String {\n        match (self.query_start, self.fragment_start) {\n            (Some(i), _) | (None, Some(i)) => {\n                let after_path = self.slice(i..).to_owned();\n                self.serialization.truncate(i as usize);\n                after_path\n            }\n            (None, None) => String::new(),\n        }\n    }\n\n    /// Change this URL’s path.\n    ///\n    /// # Examples\n    ///\n    /// ```rust\n    /// use url::Url;\n    /// # use url::ParseError;\n    ///\n    /// # fn run() -> Result<(), ParseError> {\n    /// let mut url = Url::parse(\"https://example.com\")?;\n    /// url.set_path(\"api/comments\");\n    /// assert_eq!(url.as_str(), \"https://example.com/api/comments\");\n    /// assert_eq!(url.path(), \"/api/comments\");\n    ///\n    /// let mut url = Url::parse(\"https://example.com/api\")?;\n    /// url.set_path(\"data/report.csv\");\n    /// assert_eq!(url.as_str(), \"https://example.com/data/report.csv\");\n    /// assert_eq!(url.path(), \"/data/report.csv\");\n    ///\n    /// // `set_path` percent-encodes the given string if it's not already percent-encoded.\n    /// let mut url = Url::parse(\"https://example.com\")?;\n    /// url.set_path(\"api/some comments\");\n    /// assert_eq!(url.as_str(), \"https://example.com/api/some%20comments\");\n    /// assert_eq!(url.path(), \"/api/some%20comments\");\n    ///\n    /// // `set_path` will not double percent-encode the string if it's already percent-encoded.\n    /// let mut url = Url::parse(\"https://example.com\")?;\n    /// url.set_path(\"api/some%20comments\");\n    /// assert_eq!(url.as_str(), \"https://example.com/api/some%20comments\");\n    /// assert_eq!(url.path(), \"/api/some%20comments\");\n    ///\n    /// # Ok(())\n    /// # }\n    /// # run().unwrap();\n    /// ```\n    pub fn set_path(&mut self, mut path: &str) {\n        let after_path = self.take_after_path();\n        let old_after_path_pos = to_u32(self.serialization.len()).unwrap();\n        let cannot_be_a_base = self.cannot_be_a_base();\n        let scheme_type = SchemeType::from(self.scheme());\n        self.serialization.truncate(self.path_start as usize);\n        self.mutate(|parser| {\n            if cannot_be_a_base {\n                if path.starts_with('/') {\n                    parser.serialization.push_str(\"%2F\");\n                    path = &path[1..];\n                }\n                parser.parse_cannot_be_a_base_path(parser::Input::new_no_trim(path));\n            } else {\n                let mut has_host = true; // FIXME\n                parser.parse_path_start(\n                    scheme_type,\n                    &mut has_host,\n                    parser::Input::new_no_trim(path),\n                );\n            }\n        });\n        self.restore_after_path(old_after_path_pos, &after_path);\n    }\n\n    /// Return an object with methods to manipulate this URL’s path segments.\n    ///\n    /// Return `Err(())` if this URL is cannot-be-a-base.\n    #[allow(clippy::result_unit_err)]\n    pub fn path_segments_mut(&mut self) -> Result<PathSegmentsMut<'_>, ()> {\n        if self.cannot_be_a_base() {\n            Err(())\n        } else {\n            Ok(path_segments::new(self))\n        }\n    }\n\n    fn restore_after_path(&mut self, old_after_path_position: u32, after_path: &str) {\n        let new_after_path_position = to_u32(self.serialization.len()).unwrap();\n        let adjust = |index: &mut u32| {\n            *index -= old_after_path_position;\n            *index += new_after_path_position;\n        };\n        if let Some(ref mut index) = self.query_start {\n            adjust(index)\n        }\n        if let Some(ref mut index) = self.fragment_start {\n            adjust(index)\n        }\n        self.serialization.push_str(after_path)\n    }\n\n    /// Change this URL’s port number.\n    ///\n    /// Note that default port numbers are not reflected in the serialization.\n    ///\n    /// If this URL is cannot-be-a-base, does not have a host, or has the `file` scheme;\n    /// do nothing and return `Err`.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use url::Url;\n    /// # use std::error::Error;\n    ///\n    /// # fn run() -> Result<(), Box<dyn Error>> {\n    /// let mut url = Url::parse(\"ssh://example.net:2048/\")?;\n    ///\n    /// url.set_port(Some(4096)).map_err(|_| \"cannot be base\")?;\n    /// assert_eq!(url.as_str(), \"ssh://example.net:4096/\");\n    ///\n    /// url.set_port(None).map_err(|_| \"cannot be base\")?;\n    /// assert_eq!(url.as_str(), \"ssh://example.net/\");\n    /// # Ok(())\n    /// # }\n    /// # run().unwrap();\n    /// ```\n    ///\n    /// Known default port numbers are not reflected:\n    ///\n    /// ```rust\n    /// use url::Url;\n    /// # use std::error::Error;\n    ///\n    /// # fn run() -> Result<(), Box<dyn Error>> {\n    /// let mut url = Url::parse(\"https://example.org/\")?;\n    ///\n    /// url.set_port(Some(443)).map_err(|_| \"cannot be base\")?;\n    /// assert!(url.port().is_none());\n    /// # Ok(())\n    /// # }\n    /// # run().unwrap();\n    /// ```\n    ///\n    /// Cannot set port for cannot-be-a-base URLs:\n    ///\n    /// ```\n    /// use url::Url;\n    /// # use url::ParseError;\n    ///\n    /// # fn run() -> Result<(), ParseError> {\n    /// let mut url = Url::parse(\"mailto:rms@example.net\")?;\n    ///\n    /// let result = url.set_port(Some(80));\n    /// assert!(result.is_err());\n    ///\n    /// let result = url.set_port(None);\n    /// assert!(result.is_err());\n    /// # Ok(())\n    /// # }\n    /// # run().unwrap();\n    /// ```\n    #[allow(clippy::result_unit_err)]\n    pub fn set_port(&mut self, mut port: Option<u16>) -> Result<(), ()> {\n        // has_host implies !cannot_be_a_base\n        if !self.has_host() || self.host() == Some(Host::Domain(\"\")) || self.scheme() == \"file\" {\n            return Err(());\n        }\n        if port.is_some() && port == parser::default_port(self.scheme()) {\n            port = None\n        }\n        self.set_port_internal(port);\n        Ok(())\n    }\n\n    fn set_port_internal(&mut self, port: Option<u16>) {\n        match (self.port, port) {\n            (None, None) => {}\n            (Some(_), None) => {\n                self.serialization\n                    .drain(self.host_end as usize..self.path_start as usize);\n                let offset = self.path_start - self.host_end;\n                self.path_start = self.host_end;\n                if let Some(ref mut index) = self.query_start {\n                    *index -= offset\n                }\n                if let Some(ref mut index) = self.fragment_start {\n                    *index -= offset\n                }\n            }\n            (Some(old), Some(new)) if old == new => {}\n            (_, Some(new)) => {\n                let path_and_after = self.slice(self.path_start..).to_owned();\n                self.serialization.truncate(self.host_end as usize);\n                write!(&mut self.serialization, \":{}\", new).unwrap();\n                let old_path_start = self.path_start;\n                let new_path_start = to_u32(self.serialization.len()).unwrap();\n                self.path_start = new_path_start;\n                let adjust = |index: &mut u32| {\n                    *index -= old_path_start;\n                    *index += new_path_start;\n                };\n                if let Some(ref mut index) = self.query_start {\n                    adjust(index)\n                }\n                if let Some(ref mut index) = self.fragment_start {\n                    adjust(index)\n                }\n                self.serialization.push_str(&path_and_after);\n            }\n        }\n        self.port = port;\n    }\n\n    /// Change this URL’s host.\n    ///\n    /// Removing the host (calling this with `None`)\n    /// will also remove any username, password, and port number.\n    ///\n    /// # Examples\n    ///\n    /// Change host:\n    ///\n    /// ```\n    /// use url::Url;\n    /// # use url::ParseError;\n    ///\n    /// # fn run() -> Result<(), ParseError> {\n    /// let mut url = Url::parse(\"https://example.net\")?;\n    /// let result = url.set_host(Some(\"rust-lang.org\"));\n    /// assert!(result.is_ok());\n    /// assert_eq!(url.as_str(), \"https://rust-lang.org/\");\n    /// # Ok(())\n    /// # }\n    /// # run().unwrap();\n    /// ```\n    ///\n    /// Remove host:\n    ///\n    /// ```\n    /// use url::Url;\n    /// # use url::ParseError;\n    ///\n    /// # fn run() -> Result<(), ParseError> {\n    /// let mut url = Url::parse(\"foo://example.net\")?;\n    /// let result = url.set_host(None);\n    /// assert!(result.is_ok());\n    /// assert_eq!(url.as_str(), \"foo:/\");\n    /// # Ok(())\n    /// # }\n    /// # run().unwrap();\n    /// ```\n    ///\n    /// Cannot remove host for 'special' schemes (e.g. `http`):\n    ///\n    /// ```\n    /// use url::Url;\n    /// # use url::ParseError;\n    ///\n    /// # fn run() -> Result<(), ParseError> {\n    /// let mut url = Url::parse(\"https://example.net\")?;\n    /// let result = url.set_host(None);\n    /// assert!(result.is_err());\n    /// assert_eq!(url.as_str(), \"https://example.net/\");\n    /// # Ok(())\n    /// # }\n    /// # run().unwrap();\n    /// ```\n    ///\n    /// Cannot change or remove host for cannot-be-a-base URLs:\n    ///\n    /// ```\n    /// use url::Url;\n    /// # use url::ParseError;\n    ///\n    /// # fn run() -> Result<(), ParseError> {\n    /// let mut url = Url::parse(\"mailto:rms@example.net\")?;\n    ///\n    /// let result = url.set_host(Some(\"rust-lang.org\"));\n    /// assert!(result.is_err());\n    /// assert_eq!(url.as_str(), \"mailto:rms@example.net\");\n    ///\n    /// let result = url.set_host(None);\n    /// assert!(result.is_err());\n    /// assert_eq!(url.as_str(), \"mailto:rms@example.net\");\n    /// # Ok(())\n    /// # }\n    /// # run().unwrap();\n    /// ```\n    ///\n    /// # Errors\n    ///\n    /// If this URL is cannot-be-a-base or there is an error parsing the given `host`,\n    /// a [`ParseError`] variant will be returned.\n    ///\n    /// [`ParseError`]: enum.ParseError.html\n    pub fn set_host(&mut self, host: Option<&str>) -> Result<(), ParseError> {\n        if self.cannot_be_a_base() {\n            return Err(ParseError::SetHostOnCannotBeABaseUrl);\n        }\n\n        let scheme_type = SchemeType::from(self.scheme());\n\n        if let Some(host) = host {\n            if host.is_empty() && scheme_type.is_special() && !scheme_type.is_file() {\n                return Err(ParseError::EmptyHost);\n            }\n            let mut host_substr = host;\n            // Otherwise, if c is U+003A (:) and the [] flag is unset, then\n            if !host.starts_with('[') || !host.ends_with(']') {\n                match host.find(':') {\n                    Some(0) => {\n                        // If buffer is the empty string, validation error, return failure.\n                        return Err(ParseError::InvalidDomainCharacter);\n                    }\n                    // Let host be the result of host parsing buffer\n                    Some(colon_index) => {\n                        host_substr = &host[..colon_index];\n                    }\n                    None => {}\n                }\n            }\n            if SchemeType::from(self.scheme()).is_special() {\n                self.set_host_internal(Host::parse(host_substr)?, None);\n            } else {\n                self.set_host_internal(Host::parse_opaque(host_substr)?, None);\n            }\n        } else if self.has_host() {\n            if scheme_type.is_special() && !scheme_type.is_file() {\n                return Err(ParseError::EmptyHost);\n            } else if self.serialization.len() == self.path_start as usize {\n                self.serialization.push('/');\n            }\n            debug_assert!(self.byte_at(self.scheme_end) == b':');\n            debug_assert!(self.byte_at(self.path_start) == b'/');\n\n            let new_path_start = if scheme_type.is_file() {\n                self.scheme_end + 3\n            } else {\n                self.scheme_end + 1\n            };\n\n            self.serialization\n                .drain(new_path_start as usize..self.path_start as usize);\n            let offset = self.path_start - new_path_start;\n            self.path_start = new_path_start;\n            self.username_end = new_path_start;\n            self.host_start = new_path_start;\n            self.host_end = new_path_start;\n            self.port = None;\n            if let Some(ref mut index) = self.query_start {\n                *index -= offset\n            }\n            if let Some(ref mut index) = self.fragment_start {\n                *index -= offset\n            }\n        }\n        Ok(())\n    }\n\n    /// opt_new_port: None means leave unchanged, Some(None) means remove any port number.\n    fn set_host_internal(&mut self, host: Host<String>, opt_new_port: Option<Option<u16>>) {\n        let old_suffix_pos = if opt_new_port.is_some() {\n            self.path_start\n        } else {\n            self.host_end\n        };\n        let suffix = self.slice(old_suffix_pos..).to_owned();\n        self.serialization.truncate(self.host_start as usize);\n        if !self.has_authority() {\n            debug_assert!(self.slice(self.scheme_end..self.host_start) == \":\");\n            debug_assert!(self.username_end == self.host_start);\n            self.serialization.push('/');\n            self.serialization.push('/');\n            self.username_end += 2;\n            self.host_start += 2;\n        }\n        write!(&mut self.serialization, \"{}\", host).unwrap();\n        self.host_end = to_u32(self.serialization.len()).unwrap();\n        self.host = host.into();\n\n        if let Some(new_port) = opt_new_port {\n            self.port = new_port;\n            if let Some(port) = new_port {\n                write!(&mut self.serialization, \":{}\", port).unwrap();\n            }\n        }\n        let new_suffix_pos = to_u32(self.serialization.len()).unwrap();\n        self.serialization.push_str(&suffix);\n\n        let adjust = |index: &mut u32| {\n            *index -= old_suffix_pos;\n            *index += new_suffix_pos;\n        };\n        adjust(&mut self.path_start);\n        if let Some(ref mut index) = self.query_start {\n            adjust(index)\n        }\n        if let Some(ref mut index) = self.fragment_start {\n            adjust(index)\n        }\n    }\n\n    /// Change this URL’s host to the given IP address.\n    ///\n    /// If this URL is cannot-be-a-base, do nothing and return `Err`.\n    ///\n    /// Compared to `Url::set_host`, this skips the host parser.\n    ///\n    /// # Examples\n    ///\n    /// ```rust\n    /// use url::{Url, ParseError};\n    ///\n    /// # fn run() -> Result<(), ParseError> {\n    /// let mut url = Url::parse(\"http://example.com\")?;\n    /// url.set_ip_host(\"127.0.0.1\".parse().unwrap());\n    /// assert_eq!(url.host_str(), Some(\"127.0.0.1\"));\n    /// assert_eq!(url.as_str(), \"http://127.0.0.1/\");\n    /// # Ok(())\n    /// # }\n    /// # run().unwrap();\n    /// ```\n    ///\n    /// Cannot change URL's from mailto(cannot-be-base) to ip:\n    ///\n    /// ```rust\n    /// use url::{Url, ParseError};\n    ///\n    /// # fn run() -> Result<(), ParseError> {\n    /// let mut url = Url::parse(\"mailto:rms@example.com\")?;\n    /// let result = url.set_ip_host(\"127.0.0.1\".parse().unwrap());\n    ///\n    /// assert_eq!(url.as_str(), \"mailto:rms@example.com\");\n    /// assert!(result.is_err());\n    /// # Ok(())\n    /// # }\n    /// # run().unwrap();\n    /// ```\n    ///\n    #[allow(clippy::result_unit_err)]\n    pub fn set_ip_host(&mut self, address: IpAddr) -> Result<(), ()> {\n        if self.cannot_be_a_base() {\n            return Err(());\n        }\n\n        let address = match address {\n            IpAddr::V4(address) => Host::Ipv4(address),\n            IpAddr::V6(address) => Host::Ipv6(address),\n        };\n        self.set_host_internal(address, None);\n        Ok(())\n    }\n\n    /// Change this URL’s password.\n    ///\n    /// If this URL is cannot-be-a-base or does not have a host, do nothing and return `Err`.\n    ///\n    /// # Examples\n    ///\n    /// ```rust\n    /// use url::{Url, ParseError};\n    ///\n    /// # fn run() -> Result<(), ParseError> {\n    /// let mut url = Url::parse(\"mailto:rmz@example.com\")?;\n    /// let result = url.set_password(Some(\"secret_password\"));\n    /// assert!(result.is_err());\n    ///\n    /// let mut url = Url::parse(\"ftp://user1:secret1@example.com\")?;\n    /// let result = url.set_password(Some(\"secret_password\"));\n    /// assert_eq!(url.password(), Some(\"secret_password\"));\n    ///\n    /// let mut url = Url::parse(\"ftp://user2:@example.com\")?;\n    /// let result = url.set_password(Some(\"secret2\"));\n    /// assert!(result.is_ok());\n    /// assert_eq!(url.password(), Some(\"secret2\"));\n    /// # Ok(())\n    /// # }\n    /// # run().unwrap();\n    /// ```\n    #[allow(clippy::result_unit_err)]\n    pub fn set_password(&mut self, password: Option<&str>) -> Result<(), ()> {\n        // has_host implies !cannot_be_a_base\n        if !self.has_host() || self.host() == Some(Host::Domain(\"\")) || self.scheme() == \"file\" {\n            return Err(());\n        }\n        let password = password.unwrap_or_default();\n        if !password.is_empty() {\n            let host_and_after = self.slice(self.host_start..).to_owned();\n            self.serialization.truncate(self.username_end as usize);\n            self.serialization.push(':');\n            self.serialization\n                .extend(utf8_percent_encode(password, USERINFO));\n            self.serialization.push('@');\n\n            let old_host_start = self.host_start;\n            let new_host_start = to_u32(self.serialization.len()).unwrap();\n            let adjust = |index: &mut u32| {\n                *index -= old_host_start;\n                *index += new_host_start;\n            };\n            self.host_start = new_host_start;\n            adjust(&mut self.host_end);\n            adjust(&mut self.path_start);\n            if let Some(ref mut index) = self.query_start {\n                adjust(index)\n            }\n            if let Some(ref mut index) = self.fragment_start {\n                adjust(index)\n            }\n\n            self.serialization.push_str(&host_and_after);\n        } else if self.byte_at(self.username_end) == b':' {\n            // If there is a password to remove\n            let has_username_or_password = self.byte_at(self.host_start - 1) == b'@';\n            debug_assert!(has_username_or_password);\n            let username_start = self.scheme_end + 3;\n            let empty_username = username_start == self.username_end;\n            let start = self.username_end; // Remove the ':'\n            let end = if empty_username {\n                self.host_start // Remove the '@' as well\n            } else {\n                self.host_start - 1 // Keep the '@' to separate the username from the host\n            };\n            self.serialization.drain(start as usize..end as usize);\n            let offset = end - start;\n            self.host_start -= offset;\n            self.host_end -= offset;\n            self.path_start -= offset;\n            if let Some(ref mut index) = self.query_start {\n                *index -= offset\n            }\n            if let Some(ref mut index) = self.fragment_start {\n                *index -= offset\n            }\n        }\n        Ok(())\n    }\n\n    /// Change this URL’s username.\n    ///\n    /// If this URL is cannot-be-a-base or does not have a host, do nothing and return `Err`.\n    /// # Examples\n    ///\n    /// Cannot setup username from mailto(cannot-be-base)\n    ///\n    /// ```rust\n    /// use url::{Url, ParseError};\n    ///\n    /// # fn run() -> Result<(), ParseError> {\n    /// let mut url = Url::parse(\"mailto:rmz@example.com\")?;\n    /// let result = url.set_username(\"user1\");\n    /// assert_eq!(url.as_str(), \"mailto:rmz@example.com\");\n    /// assert!(result.is_err());\n    /// # Ok(())\n    /// # }\n    /// # run().unwrap();\n    /// ```\n    ///\n    /// Setup username to user1\n    ///\n    /// ```rust\n    /// use url::{Url, ParseError};\n    ///\n    /// # fn run() -> Result<(), ParseError> {\n    /// let mut url = Url::parse(\"ftp://:secre1@example.com/\")?;\n    /// let result = url.set_username(\"user1\");\n    /// assert!(result.is_ok());\n    /// assert_eq!(url.username(), \"user1\");\n    /// assert_eq!(url.as_str(), \"ftp://user1:secre1@example.com/\");\n    /// # Ok(())\n    /// # }\n    /// # run().unwrap();\n    /// ```\n    #[allow(clippy::result_unit_err)]\n    pub fn set_username(&mut self, username: &str) -> Result<(), ()> {\n        // has_host implies !cannot_be_a_base\n        if !self.has_host() || self.host() == Some(Host::Domain(\"\")) || self.scheme() == \"file\" {\n            return Err(());\n        }\n        let username_start = self.scheme_end + 3;\n        debug_assert!(self.slice(self.scheme_end..username_start) == \"://\");\n        if self.slice(username_start..self.username_end) == username {\n            return Ok(());\n        }\n        let after_username = self.slice(self.username_end..).to_owned();\n        self.serialization.truncate(username_start as usize);\n        self.serialization\n            .extend(utf8_percent_encode(username, USERINFO));\n\n        let mut removed_bytes = self.username_end;\n        self.username_end = to_u32(self.serialization.len()).unwrap();\n        let mut added_bytes = self.username_end;\n\n        let new_username_is_empty = self.username_end == username_start;\n        match (new_username_is_empty, after_username.chars().next()) {\n            (true, Some('@')) => {\n                removed_bytes += 1;\n                self.serialization.push_str(&after_username[1..]);\n            }\n            (false, Some('@')) | (_, Some(':')) | (true, _) => {\n                self.serialization.push_str(&after_username);\n            }\n            (false, _) => {\n                added_bytes += 1;\n                self.serialization.push('@');\n                self.serialization.push_str(&after_username);\n            }\n        }\n\n        let adjust = |index: &mut u32| {\n            *index -= removed_bytes;\n            *index += added_bytes;\n        };\n        adjust(&mut self.host_start);\n        adjust(&mut self.host_end);\n        adjust(&mut self.path_start);\n        if let Some(ref mut index) = self.query_start {\n            adjust(index)\n        }\n        if let Some(ref mut index) = self.fragment_start {\n            adjust(index)\n        }\n        Ok(())\n    }\n\n    /// Change this URL’s scheme.\n    ///\n    /// Do nothing and return `Err` under the following circumstances:\n    ///\n    /// * If the new scheme is not in `[a-zA-Z][a-zA-Z0-9+.-]+`\n    /// * If this URL is cannot-be-a-base and the new scheme is one of\n    ///   `http`, `https`, `ws`, `wss` or `ftp`\n    /// * If either the old or new scheme is `http`, `https`, `ws`,\n    ///   `wss` or `ftp` and the other is not one of these\n    /// * If the new scheme is `file` and this URL includes credentials\n    ///   or has a non-null port\n    /// * If this URL's scheme is `file` and its host is empty or null\n    ///\n    /// See also [the URL specification's section on legal scheme state\n    /// overrides](https://url.spec.whatwg.org/#scheme-state).\n    ///\n    /// # Examples\n    ///\n    /// Change the URL’s scheme from `https` to `http`:\n    ///\n    /// ```\n    /// use url::Url;\n    /// # use url::ParseError;\n    ///\n    /// # fn run() -> Result<(), ParseError> {\n    /// let mut url = Url::parse(\"https://example.net\")?;\n    /// let result = url.set_scheme(\"http\");\n    /// assert_eq!(url.as_str(), \"http://example.net/\");\n    /// assert!(result.is_ok());\n    /// # Ok(())\n    /// # }\n    /// # run().unwrap();\n    /// ```\n    /// Change the URL’s scheme from `foo` to `bar`:\n    ///\n    /// ```\n    /// use url::Url;\n    /// # use url::ParseError;\n    ///\n    /// # fn run() -> Result<(), ParseError> {\n    /// let mut url = Url::parse(\"foo://example.net\")?;\n    /// let result = url.set_scheme(\"bar\");\n    /// assert_eq!(url.as_str(), \"bar://example.net\");\n    /// assert!(result.is_ok());\n    /// # Ok(())\n    /// # }\n    /// # run().unwrap();\n    /// ```\n    ///\n    /// Cannot change URL’s scheme from `https` to `foõ`:\n    ///\n    /// ```\n    /// use url::Url;\n    /// # use url::ParseError;\n    ///\n    /// # fn run() -> Result<(), ParseError> {\n    /// let mut url = Url::parse(\"https://example.net\")?;\n    /// let result = url.set_scheme(\"foõ\");\n    /// assert_eq!(url.as_str(), \"https://example.net/\");\n    /// assert!(result.is_err());\n    /// # Ok(())\n    /// # }\n    /// # run().unwrap();\n    /// ```\n    ///\n    /// Cannot change URL’s scheme from `mailto` (cannot-be-a-base) to `https`:\n    ///\n    /// ```\n    /// use url::Url;\n    /// # use url::ParseError;\n    ///\n    /// # fn run() -> Result<(), ParseError> {\n    /// let mut url = Url::parse(\"mailto:rms@example.net\")?;\n    /// let result = url.set_scheme(\"https\");\n    /// assert_eq!(url.as_str(), \"mailto:rms@example.net\");\n    /// assert!(result.is_err());\n    /// # Ok(())\n    /// # }\n    /// # run().unwrap();\n    /// ```\n    /// Cannot change the URL’s scheme from `foo` to `https`:\n    ///\n    /// ```\n    /// use url::Url;\n    /// # use url::ParseError;\n    ///\n    /// # fn run() -> Result<(), ParseError> {\n    /// let mut url = Url::parse(\"foo://example.net\")?;\n    /// let result = url.set_scheme(\"https\");\n    /// assert_eq!(url.as_str(), \"foo://example.net\");\n    /// assert!(result.is_err());\n    /// # Ok(())\n    /// # }\n    /// # run().unwrap();\n    /// ```\n    /// Cannot change the URL’s scheme from `http` to `foo`:\n    ///\n    /// ```\n    /// use url::Url;\n    /// # use url::ParseError;\n    ///\n    /// # fn run() -> Result<(), ParseError> {\n    /// let mut url = Url::parse(\"http://example.net\")?;\n    /// let result = url.set_scheme(\"foo\");\n    /// assert_eq!(url.as_str(), \"http://example.net/\");\n    /// assert!(result.is_err());\n    /// # Ok(())\n    /// # }\n    /// # run().unwrap();\n    /// ```\n    #[allow(clippy::result_unit_err, clippy::suspicious_operation_groupings)]\n    pub fn set_scheme(&mut self, scheme: &str) -> Result<(), ()> {\n        let mut parser = Parser::for_setter(String::new());\n        let remaining = parser.parse_scheme(parser::Input::new_no_trim(scheme))?;\n        let new_scheme_type = SchemeType::from(&parser.serialization);\n        let old_scheme_type = SchemeType::from(self.scheme());\n        // If url’s scheme is a special scheme and buffer is not a special scheme, then return.\n        if (new_scheme_type.is_special() && !old_scheme_type.is_special()) ||\n            // If url’s scheme is not a special scheme and buffer is a special scheme, then return.\n            (!new_scheme_type.is_special() && old_scheme_type.is_special()) ||\n            // If url includes credentials or has a non-null port, and buffer is \"file\", then return.\n            // If url’s scheme is \"file\" and its host is an empty host or null, then return.\n            (new_scheme_type.is_file() && self.has_authority())\n        {\n            return Err(());\n        }\n\n        if !remaining.is_empty() || (!self.has_host() && new_scheme_type.is_special()) {\n            return Err(());\n        }\n        let old_scheme_end = self.scheme_end;\n        let new_scheme_end = to_u32(parser.serialization.len()).unwrap();\n        let adjust = |index: &mut u32| {\n            *index -= old_scheme_end;\n            *index += new_scheme_end;\n        };\n\n        self.scheme_end = new_scheme_end;\n        adjust(&mut self.username_end);\n        adjust(&mut self.host_start);\n        adjust(&mut self.host_end);\n        adjust(&mut self.path_start);\n        if let Some(ref mut index) = self.query_start {\n            adjust(index)\n        }\n        if let Some(ref mut index) = self.fragment_start {\n            adjust(index)\n        }\n\n        parser.serialization.push_str(self.slice(old_scheme_end..));\n        self.serialization = parser.serialization;\n\n        // Update the port so it can be removed\n        // If it is the scheme's default\n        // we don't mind it silently failing\n        // if there was no port in the first place\n        let previous_port = self.port();\n        let _ = self.set_port(previous_port);\n\n        Ok(())\n    }\n\n    /// Convert a file name as `std::path::Path` into an URL in the `file` scheme.\n    ///\n    /// This returns `Err` if the given path is not absolute or,\n    /// on Windows, if the prefix is not a disk prefix (e.g. `C:`) or a UNC prefix (`\\\\`).\n    ///\n    /// # Examples\n    ///\n    /// On Unix-like platforms:\n    ///\n    /// ```\n    /// # if cfg!(unix) {\n    /// use url::Url;\n    ///\n    /// # fn run() -> Result<(), ()> {\n    /// let url = Url::from_file_path(\"/tmp/foo.txt\")?;\n    /// assert_eq!(url.as_str(), \"file:///tmp/foo.txt\");\n    ///\n    /// let url = Url::from_file_path(\"../foo.txt\");\n    /// assert!(url.is_err());\n    ///\n    /// let url = Url::from_file_path(\"https://google.com/\");\n    /// assert!(url.is_err());\n    /// # Ok(())\n    /// # }\n    /// # run().unwrap();\n    /// # }\n    /// ```\n    #[cfg(any(unix, windows, target_os = \"redox\", target_os = \"wasi\"))]\n    #[allow(clippy::result_unit_err)]\n    pub fn from_file_path<P: AsRef<Path>>(path: P) -> Result<Url, ()> {\n        let mut serialization = \"file://\".to_owned();\n        let host_start = serialization.len() as u32;\n        let (host_end, host) = path_to_file_url_segments(path.as_ref(), &mut serialization)?;\n        Ok(Url {\n            serialization,\n            scheme_end: \"file\".len() as u32,\n            username_end: host_start,\n            host_start,\n            host_end,\n            host,\n            port: None,\n            path_start: host_end,\n            query_start: None,\n            fragment_start: None,\n        })\n    }\n\n    /// Convert a directory name as `std::path::Path` into an URL in the `file` scheme.\n    ///\n    /// This returns `Err` if the given path is not absolute or,\n    /// on Windows, if the prefix is not a disk prefix (e.g. `C:`) or a UNC prefix (`\\\\`).\n    ///\n    /// Compared to `from_file_path`, this ensure that URL’s the path has a trailing slash\n    /// so that the entire path is considered when using this URL as a base URL.\n    ///\n    /// For example:\n    ///\n    /// * `\"index.html\"` parsed with `Url::from_directory_path(Path::new(\"/var/www\"))`\n    ///   as the base URL is `file:///var/www/index.html`\n    /// * `\"index.html\"` parsed with `Url::from_file_path(Path::new(\"/var/www\"))`\n    ///   as the base URL is `file:///var/index.html`, which might not be what was intended.\n    ///\n    /// Note that `std::path` does not consider trailing slashes significant\n    /// and usually does not include them (e.g. in `Path::parent()`).\n    #[cfg(any(unix, windows, target_os = \"redox\", target_os = \"wasi\"))]\n    #[allow(clippy::result_unit_err)]\n    pub fn from_directory_path<P: AsRef<Path>>(path: P) -> Result<Url, ()> {\n        let mut url = Url::from_file_path(path)?;\n        if !url.serialization.ends_with('/') {\n            url.serialization.push('/')\n        }\n        Ok(url)\n    }\n\n    /// Serialize with Serde using the internal representation of the `Url` struct.\n    ///\n    /// The corresponding `deserialize_internal` method sacrifices some invariant-checking\n    /// for speed, compared to the `Deserialize` trait impl.\n    ///\n    /// This method is only available if the `serde` Cargo feature is enabled.\n    #[cfg(feature = \"serde\")]\n    #[deny(unused)]\n    pub fn serialize_internal<S>(&self, serializer: S) -> Result<S::Ok, S::Error>\n    where\n        S: serde::Serializer,\n    {\n        use serde::Serialize;\n        // Destructuring first lets us ensure that adding or removing fields forces this method\n        // to be updated\n        let Url {\n            ref serialization,\n            ref scheme_end,\n            ref username_end,\n            ref host_start,\n            ref host_end,\n            ref host,\n            ref port,\n            ref path_start,\n            ref query_start,\n            ref fragment_start,\n        } = *self;\n        (\n            serialization,\n            scheme_end,\n            username_end,\n            host_start,\n            host_end,\n            host,\n            port,\n            path_start,\n            query_start,\n            fragment_start,\n        )\n            .serialize(serializer)\n    }\n\n    /// Serialize with Serde using the internal representation of the `Url` struct.\n    ///\n    /// The corresponding `deserialize_internal` method sacrifices some invariant-checking\n    /// for speed, compared to the `Deserialize` trait impl.\n    ///\n    /// This method is only available if the `serde` Cargo feature is enabled.\n    #[cfg(feature = \"serde\")]\n    #[deny(unused)]\n    pub fn deserialize_internal<'de, D>(deserializer: D) -> Result<Self, D::Error>\n    where\n        D: serde::Deserializer<'de>,\n    {\n        use serde::de::{Deserialize, Error, Unexpected};\n        let (\n            serialization,\n            scheme_end,\n            username_end,\n            host_start,\n            host_end,\n            host,\n            port,\n            path_start,\n            query_start,\n            fragment_start,\n        ) = Deserialize::deserialize(deserializer)?;\n        let url = Url {\n            serialization,\n            scheme_end,\n            username_end,\n            host_start,\n            host_end,\n            host,\n            port,\n            path_start,\n            query_start,\n            fragment_start,\n        };\n        if cfg!(debug_assertions) {\n            url.check_invariants().map_err(|reason| {\n                let reason: &str = &reason;\n                Error::invalid_value(Unexpected::Other(\"value\"), &reason)\n            })?\n        }\n        Ok(url)\n    }\n\n    /// Assuming the URL is in the `file` scheme or similar,\n    /// convert its path to an absolute `std::path::Path`.\n    ///\n    /// **Note:** This does not actually check the URL’s `scheme`,\n    /// and may give nonsensical results for other schemes.\n    /// It is the user’s responsibility to check the URL’s scheme before calling this.\n    ///\n    /// ```\n    /// # use url::Url;\n    /// # let url = Url::parse(\"file:///etc/passwd\").unwrap();\n    /// let path = url.to_file_path();\n    /// ```\n    ///\n    /// Returns `Err` if the host is neither empty nor `\"localhost\"` (except on Windows, where\n    /// `file:` URLs may have a non-local host),\n    /// or if `Path::new_opt()` returns `None`.\n    /// (That is, if the percent-decoded path contains a NUL byte or,\n    /// for a Windows path, is not UTF-8.)\n    #[inline]\n    #[cfg(any(unix, windows, target_os = \"redox\", target_os = \"wasi\"))]\n    #[allow(clippy::result_unit_err)]\n    pub fn to_file_path(&self) -> Result<PathBuf, ()> {\n        if let Some(segments) = self.path_segments() {\n            let host = match self.host() {\n                None | Some(Host::Domain(\"localhost\")) => None,\n                Some(_) if cfg!(windows) && self.scheme() == \"file\" => {\n                    Some(&self.serialization[self.host_start as usize..self.host_end as usize])\n                }\n                _ => return Err(()),\n            };\n\n            return file_url_segments_to_pathbuf(host, segments);\n        }\n        Err(())\n    }\n\n    // Private helper methods:\n\n    #[inline]\n    fn slice<R>(&self, range: R) -> &str\n    where\n        R: RangeArg,\n    {\n        range.slice_of(&self.serialization)\n    }\n\n    #[inline]\n    fn byte_at(&self, i: u32) -> u8 {\n        self.serialization.as_bytes()[i as usize]\n    }\n}\n\n/// Parse a string as an URL, without a base URL or encoding override.\nimpl str::FromStr for Url {\n    type Err = ParseError;\n\n    #[inline]\n    fn from_str(input: &str) -> Result<Url, crate::ParseError> {\n        Url::parse(input)\n    }\n}\n\nimpl<'a> TryFrom<&'a str> for Url {\n    type Error = ParseError;\n\n    fn try_from(s: &'a str) -> Result<Self, Self::Error> {\n        Url::parse(s)\n    }\n}\n\n/// Display the serialization of this URL.\nimpl fmt::Display for Url {\n    #[inline]\n    fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n        fmt::Display::fmt(&self.serialization, formatter)\n    }\n}\n\n/// String conversion.\nimpl From<Url> for String {\n    fn from(value: Url) -> String {\n        value.serialization\n    }\n}\n\n/// Debug the serialization of this URL.\nimpl fmt::Debug for Url {\n    #[inline]\n    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n        formatter\n            .debug_struct(\"Url\")\n            .field(\"scheme\", &self.scheme())\n            .field(\"cannot_be_a_base\", &self.cannot_be_a_base())\n            .field(\"username\", &self.username())\n            .field(\"password\", &self.password())\n            .field(\"host\", &self.host())\n            .field(\"port\", &self.port())\n            .field(\"path\", &self.path())\n            .field(\"query\", &self.query())\n            .field(\"fragment\", &self.fragment())\n            .finish()\n    }\n}\n\n/// URLs compare like their serialization.\nimpl Eq for Url {}\n\n/// URLs compare like their serialization.\nimpl PartialEq for Url {\n    #[inline]\n    fn eq(&self, other: &Self) -> bool {\n        self.serialization == other.serialization\n    }\n}\n\n/// URLs compare like their serialization.\nimpl Ord for Url {\n    #[inline]\n    fn cmp(&self, other: &Self) -> cmp::Ordering {\n        self.serialization.cmp(&other.serialization)\n    }\n}\n\n/// URLs compare like their serialization.\nimpl PartialOrd for Url {\n    #[inline]\n    fn partial_cmp(&self, other: &Self) -> Option<cmp::Ordering> {\n        Some(self.cmp(other))\n    }\n}\n\n/// URLs hash like their serialization.\nimpl hash::Hash for Url {\n    #[inline]\n    fn hash<H>(&self, state: &mut H)\n    where\n        H: hash::Hasher,\n    {\n        hash::Hash::hash(&self.serialization, state)\n    }\n}\n\n/// Return the serialization of this URL.\nimpl AsRef<str> for Url {\n    #[inline]\n    fn as_ref(&self) -> &str {\n        &self.serialization\n    }\n}\n\ntrait RangeArg {\n    fn slice_of<'a>(&self, s: &'a str) -> &'a str;\n}\n\nimpl RangeArg for Range<u32> {\n    #[inline]\n    fn slice_of<'a>(&self, s: &'a str) -> &'a str {\n        &s[self.start as usize..self.end as usize]\n    }\n}\n\nimpl RangeArg for RangeFrom<u32> {\n    #[inline]\n    fn slice_of<'a>(&self, s: &'a str) -> &'a str {\n        &s[self.start as usize..]\n    }\n}\n\nimpl RangeArg for RangeTo<u32> {\n    #[inline]\n    fn slice_of<'a>(&self, s: &'a str) -> &'a str {\n        &s[..self.end as usize]\n    }\n}\n\n/// Serializes this URL into a `serde` stream.\n///\n/// This implementation is only available if the `serde` Cargo feature is enabled.\n#[cfg(feature = \"serde\")]\nimpl serde::Serialize for Url {\n    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>\n    where\n        S: serde::Serializer,\n    {\n        serializer.serialize_str(self.as_str())\n    }\n}\n\n/// Deserializes this URL from a `serde` stream.\n///\n/// This implementation is only available if the `serde` Cargo feature is enabled.\n#[cfg(feature = \"serde\")]\nimpl<'de> serde::Deserialize<'de> for Url {\n    fn deserialize<D>(deserializer: D) -> Result<Url, D::Error>\n    where\n        D: serde::Deserializer<'de>,\n    {\n        use serde::de::{Error, Unexpected, Visitor};\n\n        struct UrlVisitor;\n\n        impl<'de> Visitor<'de> for UrlVisitor {\n            type Value = Url;\n\n            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n                formatter.write_str(\"a string representing an URL\")\n            }\n\n            fn visit_str<E>(self, s: &str) -> Result<Self::Value, E>\n            where\n                E: Error,\n            {\n                Url::parse(s).map_err(|err| {\n                    let err_s = format!(\"{}\", err);\n                    Error::invalid_value(Unexpected::Str(s), &err_s.as_str())\n                })\n            }\n        }\n\n        deserializer.deserialize_str(UrlVisitor)\n    }\n}\n\n#[cfg(any(unix, target_os = \"redox\", target_os = \"wasi\"))]\nfn path_to_file_url_segments(\n    path: &Path,\n    serialization: &mut String,\n) -> Result<(u32, HostInternal), ()> {\n    #[cfg(any(unix, target_os = \"redox\"))]\n    use std::os::unix::prelude::OsStrExt;\n    #[cfg(target_os = \"wasi\")]\n    use std::os::wasi::prelude::OsStrExt;\n    if !path.is_absolute() {\n        return Err(());\n    }\n    let host_end = to_u32(serialization.len()).unwrap();\n    let mut empty = true;\n    // skip the root component\n    for component in path.components().skip(1) {\n        empty = false;\n        serialization.push('/');\n        serialization.extend(percent_encode(\n            component.as_os_str().as_bytes(),\n            SPECIAL_PATH_SEGMENT,\n        ));\n    }\n    if empty {\n        // An URL’s path must not be empty.\n        serialization.push('/');\n    }\n    Ok((host_end, HostInternal::None))\n}\n\n#[cfg(windows)]\nfn path_to_file_url_segments(\n    path: &Path,\n    serialization: &mut String,\n) -> Result<(u32, HostInternal), ()> {\n    path_to_file_url_segments_windows(path, serialization)\n}\n\n// Build this unconditionally to alleviate https://github.com/servo/rust-url/issues/102\n#[cfg_attr(not(windows), allow(dead_code))]\nfn path_to_file_url_segments_windows(\n    path: &Path,\n    serialization: &mut String,\n) -> Result<(u32, HostInternal), ()> {\n    use std::path::{Component, Prefix};\n    if !path.is_absolute() {\n        return Err(());\n    }\n    let mut components = path.components();\n\n    let host_start = serialization.len() + 1;\n    let host_end;\n    let host_internal;\n\n    match components.next() {\n        Some(Component::Prefix(ref p)) => match p.kind() {\n            Prefix::Disk(letter) | Prefix::VerbatimDisk(letter) => {\n                host_end = to_u32(serialization.len()).unwrap();\n                host_internal = HostInternal::None;\n                serialization.push('/');\n                serialization.push(letter as char);\n                serialization.push(':');\n            }\n            Prefix::UNC(server, share) | Prefix::VerbatimUNC(server, share) => {\n                let host = Host::parse(server.to_str().ok_or(())?).map_err(|_| ())?;\n                write!(serialization, \"{}\", host).unwrap();\n                host_end = to_u32(serialization.len()).unwrap();\n                host_internal = host.into();\n                serialization.push('/');\n                let share = share.to_str().ok_or(())?;\n                serialization.extend(percent_encode(share.as_bytes(), PATH_SEGMENT));\n            }\n            _ => return Err(()),\n        },\n        _ => return Err(()),\n    }\n\n    let mut path_only_has_prefix = true;\n    for component in components {\n        if component == Component::RootDir {\n            continue;\n        }\n\n        path_only_has_prefix = false;\n        // FIXME: somehow work with non-unicode?\n        let component = component.as_os_str().to_str().ok_or(())?;\n\n        serialization.push('/');\n        serialization.extend(percent_encode(component.as_bytes(), PATH_SEGMENT));\n    }\n\n    // A windows drive letter must end with a slash.\n    if serialization.len() > host_start\n        && parser::is_windows_drive_letter(&serialization[host_start..])\n        && path_only_has_prefix\n    {\n        serialization.push('/');\n    }\n\n    Ok((host_end, host_internal))\n}\n\n#[cfg(any(unix, target_os = \"redox\", target_os = \"wasi\"))]\nfn file_url_segments_to_pathbuf(\n    host: Option<&str>,\n    segments: str::Split<'_, char>,\n) -> Result<PathBuf, ()> {\n    use std::ffi::OsStr;\n    #[cfg(any(unix, target_os = \"redox\"))]\n    use std::os::unix::prelude::OsStrExt;\n    #[cfg(target_os = \"wasi\")]\n    use std::os::wasi::prelude::OsStrExt;\n\n    if host.is_some() {\n        return Err(());\n    }\n\n    let mut bytes = if cfg!(target_os = \"redox\") {\n        b\"file:\".to_vec()\n    } else {\n        Vec::new()\n    };\n\n    for segment in segments {\n        bytes.push(b'/');\n        bytes.extend(percent_decode(segment.as_bytes()));\n    }\n\n    // A windows drive letter must end with a slash.\n    if bytes.len() > 2\n        && bytes[bytes.len() - 2].is_ascii_alphabetic()\n        && matches!(bytes[bytes.len() - 1], b':' | b'|')\n    {\n        bytes.push(b'/');\n    }\n\n    let os_str = OsStr::from_bytes(&bytes);\n    let path = PathBuf::from(os_str);\n\n    debug_assert!(\n        path.is_absolute(),\n        \"to_file_path() failed to produce an absolute Path\"\n    );\n\n    Ok(path)\n}\n\n#[cfg(windows)]\nfn file_url_segments_to_pathbuf(\n    host: Option<&str>,\n    segments: str::Split<char>,\n) -> Result<PathBuf, ()> {\n    file_url_segments_to_pathbuf_windows(host, segments)\n}\n\n// Build this unconditionally to alleviate https://github.com/servo/rust-url/issues/102\n#[cfg_attr(not(windows), allow(dead_code))]\nfn file_url_segments_to_pathbuf_windows(\n    host: Option<&str>,\n    mut segments: str::Split<'_, char>,\n) -> Result<PathBuf, ()> {\n    let mut string = if let Some(host) = host {\n        r\"\\\\\".to_owned() + host\n    } else {\n        let first = segments.next().ok_or(())?;\n\n        match first.len() {\n            2 => {\n                if !first.starts_with(parser::ascii_alpha) || first.as_bytes()[1] != b':' {\n                    return Err(());\n                }\n\n                first.to_owned()\n            }\n\n            4 => {\n                if !first.starts_with(parser::ascii_alpha) {\n                    return Err(());\n                }\n                let bytes = first.as_bytes();\n                if bytes[1] != b'%' || bytes[2] != b'3' || (bytes[3] != b'a' && bytes[3] != b'A') {\n                    return Err(());\n                }\n\n                first[0..1].to_owned() + \":\"\n            }\n\n            _ => return Err(()),\n        }\n    };\n\n    for segment in segments {\n        string.push('\\\\');\n\n        // Currently non-unicode windows paths cannot be represented\n        match String::from_utf8(percent_decode(segment.as_bytes()).collect()) {\n            Ok(s) => string.push_str(&s),\n            Err(..) => return Err(()),\n        }\n    }\n    let path = PathBuf::from(string);\n    debug_assert!(\n        path.is_absolute(),\n        \"to_file_path() failed to produce an absolute Path\"\n    );\n    Ok(path)\n}\n\n/// Implementation detail of `Url::query_pairs_mut`. Typically not used directly.\n#[derive(Debug)]\npub struct UrlQuery<'a> {\n    url: Option<&'a mut Url>,\n    fragment: Option<String>,\n}\n\n// `as_mut_string` string here exposes the internal serialization of an `Url`,\n// which should not be exposed to users.\n// We achieve that by not giving users direct access to `UrlQuery`:\n// * Its fields are private\n//   (and so can not be constructed with struct literal syntax outside of this crate),\n// * It has no constructor\n// * It is only visible (on the type level) to users in the return type of\n//   `Url::query_pairs_mut` which is `Serializer<UrlQuery>`\n// * `Serializer` keeps its target in a private field\n// * Unlike in other `Target` impls, `UrlQuery::finished` does not return `Self`.\nimpl<'a> form_urlencoded::Target for UrlQuery<'a> {\n    fn as_mut_string(&mut self) -> &mut String {\n        &mut self.url.as_mut().unwrap().serialization\n    }\n\n    fn finish(mut self) -> &'a mut Url {\n        let url = self.url.take().unwrap();\n        url.restore_already_parsed_fragment(self.fragment.take());\n        url\n    }\n\n    type Finished = &'a mut Url;\n}\n\nimpl<'a> Drop for UrlQuery<'a> {\n    fn drop(&mut self) {\n        if let Some(url) = self.url.take() {\n            url.restore_already_parsed_fragment(self.fragment.take())\n        }\n    }\n}\n"
    },
    "url/src/parser.rs": {
      "language": "rust",
      "mutants": [
        {
          "id": "url/src/parser.rs:1104:9:1124:30:FnValue:ParseResult::from((Some(0), Default::default()))",
          "duration": 4.966552041,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1104,
              "column": 9
            },
            "end": {
              "line": 1124,
              "column": 30
            }
          },
          "replacement": "ParseResult::from((Some(0), Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from((Some(0), Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:415:9:456:10:FnValue:ParseResult::from(Default::default())",
          "duration": 5.168647244,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 415,
              "column": 9
            },
            "end": {
              "line": 456,
              "column": 10
            }
          },
          "replacement": "ParseResult::from(Default::default())",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from(Default::default())",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:714:9:825:10:FnValue:ParseResult::new(Default::default())",
          "duration": 5.718517176,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 714,
              "column": 9
            },
            "end": {
              "line": 825,
              "column": 10
            }
          },
          "replacement": "ParseResult::new(Default::default())",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new(Default::default())",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1159:41:1159:43:BinaryOperator:==",
          "duration": 0.503278537,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1159,
              "column": 41
            },
            "end": {
              "line": 1159,
              "column": 43
            }
          },
          "replacement": "==",
          "status": "Killed",
          "description": "Replace BinaryOperator by ==",
          "statusReason": "thread 'test_non_special_path' panicked at url/tests/unit.rs:946:5:\nassertion `left == right` failed\n  left: \"postgres://postgres@localhost//\"\n right: \"postgres://postgres@localhost/\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_non_special_path",
            "test_non_special_path2",
            "test_non_special_path3",
            "test_set_empty_hostname",
            "test_set_empty_host",
            "test_set_empty_password",
            "test_set_empty_query",
            "test_set_empty_username_and_password",
            "test_set_host"
          ]
        },
        {
          "id": "url/src/parser.rs:896:26:896:28:BinaryOperator:!=",
          "duration": 3.8806840289999998,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 896,
              "column": 26
            },
            "end": {
              "line": 896,
              "column": 28
            }
          },
          "replacement": "!=",
          "status": "Killed",
          "description": "Replace BinaryOperator by !=",
          "statusReason": "thread 'test_serialization' panicked at url/tests/unit.rs:388:37:\ncalled `Result::unwrap()` on an `Err` value: EmptyHost\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_serialization"
          ]
        },
        {
          "id": "url/src/parser.rs:1605:19:1605:21:BinaryOperator:!=",
          "duration": 0.854346095,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1605,
              "column": 19
            },
            "end": {
              "line": 1605,
              "column": 21
            }
          },
          "replacement": "!=",
          "status": "Killed",
          "description": "Replace BinaryOperator by !=",
          "statusReason": "thread 'test_file_with_drive' panicked at url/tests/unit.rs:1286:9:\nassertion `left == right` failed\n  left: \"file:///a\"\n right: \"file:///p:/a\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_file_with_drive",
            "test_file_with_drive_and_path",
            "test_syntax_violation_callback_types"
          ]
        },
        {
          "id": "url/src/parser.rs:1029:9:1034:30:FnValue:ParseResult::from((Host::new(\"xyzzy\".into()), Default::default()))",
          "duration": 0.559851316,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1029,
              "column": 9
            },
            "end": {
              "line": 1034,
              "column": 30
            }
          },
          "replacement": "ParseResult::from((Host::new(\"xyzzy\".into()), Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from((Host::new(\"xyzzy\".into()), Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:158:9:158:42:FnValue:false",
          "duration": 1.614575409,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 158,
              "column": 9
            },
            "end": {
              "line": 158,
              "column": 42
            }
          },
          "replacement": "false",
          "status": "Killed",
          "description": "Replace FnValue by false",
          "statusReason": "thread 'test_file_with_drive' panicked at url/tests/unit.rs:1286:9:\nassertion `left == right` failed\n  left: \"file:///a\"\n right: \"file:///p:/a\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_file_with_drive",
            "issue_197",
            "test_set_empty_host",
            "test_syntax_violation_callback_types",
            "test_set_scheme_to_file_with_host"
          ]
        },
        {
          "id": "url/src/parser.rs:1205:57:1205:58:BinaryOperator:<",
          "duration": 1.7217915560000001,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1205,
              "column": 57
            },
            "end": {
              "line": 1205,
              "column": 58
            }
          },
          "replacement": "<",
          "status": "Killed",
          "description": "Replace BinaryOperator by <",
          "statusReason": "thread 'test_file_with_drive' panicked at url/tests/unit.rs:1286:9:\nassertion `left == right` failed\n  left: \"file:///p:a\"\n right: \"file:///p:/a\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_file_with_drive"
          ]
        },
        {
          "id": "url/src/parser.rs:834:9:860:10:FnValue:ParseResult::new()",
          "duration": 0.917250324,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 834,
              "column": 9
            },
            "end": {
              "line": 860,
              "column": 10
            }
          },
          "replacement": "ParseResult::new()",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new()",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:944:9:968:53:FnValue:ParseResult::from((1, Default::default(), Some(1), Default::default()))",
          "duration": 1.470686965,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 944,
              "column": 9
            },
            "end": {
              "line": 968,
              "column": 53
            }
          },
          "replacement": "ParseResult::from((1, Default::default(), Some(1), Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from((1, Default::default(), Some(1), Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:364:9:385:10:FnValue:ParseResult::new()",
          "duration": 0.452352981,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 364,
              "column": 9
            },
            "end": {
              "line": 385,
              "column": 10
            }
          },
          "replacement": "ParseResult::new()",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new()",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:251:9:252:38:FnValue:(None, Default::default())",
          "duration": 0.363022698,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 251,
              "column": 9
            },
            "end": {
              "line": 252,
              "column": 38
            }
          },
          "replacement": "(None, Default::default())",
          "status": "CompileError",
          "description": "Replace FnValue by (None, Default::default())",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1145:52:1145:54:BinaryOperator:!=",
          "duration": 1.44251369,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1145,
              "column": 52
            },
            "end": {
              "line": 1145,
              "column": 54
            }
          },
          "replacement": "!=",
          "status": "Killed",
          "description": "Replace BinaryOperator by !=",
          "statusReason": "thread 'test_syntax_violation_callback_lifetimes' panicked at url/tests/unit.rs:866:5:\nassertion `left == right` failed\n  left: \"//path\"\n right: \"/path\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_syntax_violation_callback_lifetimes"
          ]
        },
        {
          "id": "url/src/parser.rs:1436:9:1456:48:FnValue:ParseResult::new((Some(0), None))",
          "duration": 0.454000817,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1436,
              "column": 9
            },
            "end": {
              "line": 1456,
              "column": 48
            }
          },
          "replacement": "ParseResult::new((Some(0), None))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new((Some(0), None))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1436:9:1456:48:FnValue:ParseResult::from((Some(1), None))",
          "duration": 0.704584413,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1436,
              "column": 9
            },
            "end": {
              "line": 1456,
              "column": 48
            }
          },
          "replacement": "ParseResult::from((Some(1), None))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from((Some(1), None))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:896:50:896:52:BinaryOperator:!=",
          "duration": 1.988847137,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 896,
              "column": 50
            },
            "end": {
              "line": 896,
              "column": 52
            }
          },
          "replacement": "!=",
          "status": "Killed",
          "description": "Replace BinaryOperator by !=",
          "statusReason": "thread 'test_serialization' panicked at url/tests/unit.rs:388:37:\ncalled `Result::unwrap()` on an `Err` value: EmptyHost\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_serialization"
          ]
        },
        {
          "id": "url/src/parser.rs:749:34:749:36:BinaryOperator:<",
          "duration": 1.876723674,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 749,
              "column": 34
            },
            "end": {
              "line": 749,
              "column": 36
            }
          },
          "replacement": "<",
          "status": "Killed",
          "description": "Replace BinaryOperator by <",
          "statusReason": "thread 'test_options_reuse' panicked at url/tests/unit.rs:913:5:\nassertion `left == right` failed\n  left: \"http://sub/path\"\n right: \"http://mozilla.org/sub/path\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_options_reuse",
            "test_relative"
          ]
        },
        {
          "id": "url/src/parser.rs:755:29:755:31:BinaryOperator:==",
          "duration": 3.026536168,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 755,
              "column": 29
            },
            "end": {
              "line": 755,
              "column": 31
            }
          },
          "replacement": "==",
          "status": "Survived",
          "description": "Replace BinaryOperator by ==",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:896:91:896:93:BinaryOperator:!=",
          "duration": 1.269087304,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 896,
              "column": 91
            },
            "end": {
              "line": 896,
              "column": 93
            }
          },
          "replacement": "!=",
          "status": "Killed",
          "description": "Replace BinaryOperator by !=",
          "statusReason": "thread 'test_serialization' panicked at url/tests/unit.rs:388:37:\ncalled `Result::unwrap()` on an `Err` value: EmptyHost\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_serialization"
          ]
        },
        {
          "id": "url/src/parser.rs:437:25:437:27:BinaryOperator:||",
          "duration": 3.9779450599999997,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 437,
              "column": 25
            },
            "end": {
              "line": 437,
              "column": 27
            }
          },
          "replacement": "||",
          "status": "Survived",
          "description": "Replace BinaryOperator by ||",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1191:25:1191:27:BinaryOperator:||",
          "duration": 2.5964855900000003,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1191,
              "column": 25
            },
            "end": {
              "line": 1191,
              "column": 27
            }
          },
          "replacement": "||",
          "status": "Killed",
          "description": "Replace BinaryOperator by ||",
          "statusReason": "thread 'path_backslash_fun' panicked at url/tests/unit.rs:215:5:\nassertion `left == right` failed\n  left: \"http://foobar.com/foo/bar\"\n right: \"http://foobar.com/foo%5Cbar\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "path_backslash_fun"
          ]
        },
        {
          "id": "url/src/parser.rs:1133:9:1163:66:FnValue:Default::default()",
          "duration": 0.760413831,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1133,
              "column": 9
            },
            "end": {
              "line": 1163,
              "column": 66
            }
          },
          "replacement": "Default::default()",
          "status": "CompileError",
          "description": "Replace FnValue by Default::default()",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1436:9:1456:48:FnValue:ParseResult::from_iter([(Some(1), None)])",
          "duration": 0.361674941,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1436,
              "column": 9
            },
            "end": {
              "line": 1456,
              "column": 48
            }
          },
          "replacement": "ParseResult::from_iter([(Some(1), None)])",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from_iter([(Some(1), None)])",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:975:9:1025:26:FnValue:ParseResult::from_iter([(Host::new(), Default::default())])",
          "duration": 0.309440025,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 975,
              "column": 9
            },
            "end": {
              "line": 1025,
              "column": 26
            }
          },
          "replacement": "ParseResult::from_iter([(Host::new(), Default::default())])",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from_iter([(Host::new(), Default::default())])",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:995:39:995:41:BinaryOperator:-=",
          "duration": 1.477438096,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 995,
              "column": 39
            },
            "end": {
              "line": 995,
              "column": 41
            }
          },
          "replacement": "-=",
          "status": "Killed",
          "description": "Replace BinaryOperator by -=",
          "statusReason": "thread 'host' panicked at url/src/parser.rs:995:21:\nattempt to subtract with overflow\n",
          "killedBy": [
            "host",
            "host_serialization",
            "test_authority",
            "test_socket_addrs"
          ]
        },
        {
          "id": "url/src/parser.rs:944:9:968:53:FnValue:ParseResult::from_iter([(1, Default::default(), Some(1), Default::default())])",
          "duration": 0.403936321,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 944,
              "column": 9
            },
            "end": {
              "line": 968,
              "column": 53
            }
          },
          "replacement": "ParseResult::from_iter([(1, Default::default(), Some(1), Default::default())])",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from_iter([(1, Default::default(), Some(1), Default::default())])",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1388:28:1388:30:BinaryOperator:*=",
          "duration": 2.980821814,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1388,
              "column": 28
            },
            "end": {
              "line": 1388,
              "column": 30
            }
          },
          "replacement": "*=",
          "status": "Survived",
          "description": "Replace BinaryOperator by *=",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1469:41:1469:43:BinaryOperator:!=",
          "duration": 1.8209206779999998,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1469,
              "column": 41
            },
            "end": {
              "line": 1469,
              "column": 43
            }
          },
          "replacement": "!=",
          "status": "Killed",
          "description": "Replace BinaryOperator by !=",
          "statusReason": "thread 'test_query' panicked at url/tests/unit.rs:690:5:\nassertion `left == right` failed\n  left: Some(\"page=2%23fragment\")\n right: Some(\"page=2\")\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_query",
            "test_make_relative",
            "test_slicing"
          ]
        },
        {
          "id": "url/src/parser.rs:975:9:1025:26:FnValue:ParseResult::from_iter([(Host::from_iter([\"xyzzy\".into()]), Default::default())])",
          "duration": 0.47102155,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 975,
              "column": 9
            },
            "end": {
              "line": 1025,
              "column": 26
            }
          },
          "replacement": "ParseResult::from_iter([(Host::from_iter([\"xyzzy\".into()]), Default::default())])",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from_iter([(Host::from_iter([\"xyzzy\".into()]), Default::default())])",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:364:9:385:10:FnValue:ParseResult::new(Default::default())",
          "duration": 0.408682401,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 364,
              "column": 9
            },
            "end": {
              "line": 385,
              "column": 10
            }
          },
          "replacement": "ParseResult::new(Default::default())",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new(Default::default())",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:911:18:911:20:BinaryOperator:!=",
          "duration": 2.227370902,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 911,
              "column": 18
            },
            "end": {
              "line": 911,
              "column": 20
            }
          },
          "replacement": "!=",
          "status": "Killed",
          "description": "Replace BinaryOperator by !=",
          "statusReason": "thread 'test_non_special_path2' panicked at url/tests/unit.rs:955:5:\nassertion `left == right` failed\n  left: \"postgres://:ostgres@localhost/\"\n right: \"postgres://postgres@localhost/\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_non_special_path2",
            "test_non_special_path3",
            "test_authority",
            "test_non_special_path",
            "test_set_empty_username_and_password",
            "test_set_empty_password",
            "test_serialization",
            "test_slicing",
            "test_set_empty_host"
          ]
        },
        {
          "id": "url/src/parser.rs:1408:28:1408:30:BinaryOperator:+=",
          "duration": 3.522272497,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1408,
              "column": 28
            },
            "end": {
              "line": 1408,
              "column": 30
            }
          },
          "replacement": "+=",
          "status": "Survived",
          "description": "Replace BinaryOperator by +=",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:217:28:217:29:BinaryOperator:>",
          "duration": 1.872390818,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 217,
              "column": 28
            },
            "end": {
              "line": 217,
              "column": 29
            }
          },
          "replacement": ">",
          "status": "Killed",
          "description": "Replace BinaryOperator by >",
          "statusReason": "thread 'test_syntax_violation_callback_types' panicked at url/tests/unit.rs:896:9:\nassertion `left == right` failed\n  left: None\n right: Some(C0SpaceIgnored)\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_syntax_violation_callback_types"
          ]
        },
        {
          "id": "url/src/parser.rs:798:21:798:23:BinaryOperator:||",
          "duration": 2.114160942,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 798,
              "column": 21
            },
            "end": {
              "line": 798,
              "column": 23
            }
          },
          "replacement": "||",
          "status": "Killed",
          "description": "Replace BinaryOperator by ||",
          "statusReason": "thread 'test_make_relative' panicked at url/tests/unit.rs:1198:9:\nassertion `left == right` failed: base: http://127.0.0.1:8080/test, uri: http://127.0.0.1:8080/test/, relative: test/\n  left: \"http://127.0.0.1:8080//test/\"\n right: \"http://127.0.0.1:8080/test/\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_make_relative"
          ]
        },
        {
          "id": "url/src/parser.rs:353:9:359:10:FnValue:Default::default()",
          "duration": 0.151962009,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 353,
              "column": 9
            },
            "end": {
              "line": 359,
              "column": 10
            }
          },
          "replacement": "Default::default()",
          "status": "CompileError",
          "description": "Replace FnValue by Default::default()",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:844:39:844:41:BinaryOperator:||",
          "duration": 1.420355059,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 844,
              "column": 39
            },
            "end": {
              "line": 844,
              "column": 41
            }
          },
          "replacement": "||",
          "status": "Killed",
          "description": "Replace BinaryOperator by ||",
          "statusReason": "thread 'pop_if_empty_in_bounds' panicked at url/tests/unit.rs:1005:38:\ncalled `Result::unwrap()` on an `Err` value: EmptyHost\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "pop_if_empty_in_bounds",
            "test_authority",
            "test_non_special_path",
            "test_non_special_path2",
            "test_non_special_path3",
            "test_origin_hash",
            "test_origin_unicode_serialization",
            "test_serialization",
            "test_set_empty_host",
            "test_set_empty_hostname",
            "test_set_empty_password",
            "test_set_empty_username_and_password",
            "test_set_href",
            "test_slicing",
            "test_syntax_violation_callback_types"
          ]
        },
        {
          "id": "url/src/parser.rs:1579:5:1579:37:FnValue:false",
          "duration": 3.013058473,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1579,
              "column": 5
            },
            "end": {
              "line": 1579,
              "column": 37
            }
          },
          "replacement": "false",
          "status": "Survived",
          "description": "Replace FnValue by false",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1041:9:1059:40:FnValue:ParseResult::new((false, Default::default(), Default::default()))",
          "duration": 0.260125539,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1041,
              "column": 9
            },
            "end": {
              "line": 1059,
              "column": 40
            }
          },
          "replacement": "ParseResult::new((false, Default::default(), Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new((false, Default::default(), Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:896:45:896:47:BinaryOperator:&&",
          "duration": 4.06409784,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 896,
              "column": 45
            },
            "end": {
              "line": 896,
              "column": 47
            }
          },
          "replacement": "&&",
          "status": "Survived",
          "description": "Replace BinaryOperator by &&",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1585:5:1585:29:FnValue:true",
          "duration": 4.126382556,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1585,
              "column": 5
            },
            "end": {
              "line": 1585,
              "column": 29
            }
          },
          "replacement": "true",
          "status": "Survived",
          "description": "Replace FnValue by true",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1239:25:1239:27:BinaryOperator:||",
          "duration": 2.962355266,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1239,
              "column": 25
            },
            "end": {
              "line": 1239,
              "column": 27
            }
          },
          "replacement": "||",
          "status": "Killed",
          "description": "Replace BinaryOperator by ||",
          "statusReason": "thread 'test_file_with_drive' panicked at url/tests/unit.rs:1286:9:\nassertion `left == right` failed\n  left: \"file:///p:\"\n right: \"file:///p:/\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_file_with_drive"
          ]
        },
        {
          "id": "url/src/parser.rs:975:9:1025:26:FnValue:ParseResult::from((Host::new(), Default::default()))",
          "duration": 0.553118963,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 975,
              "column": 9
            },
            "end": {
              "line": 1025,
              "column": 26
            }
          },
          "replacement": "ParseResult::from((Host::new(), Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from((Host::new(), Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1017:54:1017:56:BinaryOperator:||",
          "duration": 1.480180989,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1017,
              "column": 54
            },
            "end": {
              "line": 1017,
              "column": 56
            }
          },
          "replacement": "||",
          "status": "Killed",
          "description": "Replace BinaryOperator by ||",
          "statusReason": "thread 'from_str' panicked at url/tests/unit.rs:224:5:\nassertion failed: \"http://testing.com/this\".parse::<Url>().is_ok()\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "from_str",
            "append_empty_segment_then_mutate",
            "append_trailing_slash",
            "test_fragment",
            "test_has_authority",
            "test_idna",
            "extend_query_pairs_then_mutate",
            "host",
            "test_origin_hash",
            "test_origin_unicode_serialization",
            "parse_with_params",
            "test_serialization",
            "issue_61",
            "no_panic",
            "test_set_host",
            "test_set_href",
            "test_set_ip_host",
            "test_set_empty_hostname",
            "test_syntax_violation_callback_types",
            "test_set_scheme_to_file_with_host",
            "test_syntax_violation_callback",
            "host_serialization",
            "pop_if_empty_in_bounds",
            "test_authority",
            "test_equality",
            "test_make_relative",
            "test_socket_addrs",
            "test_slicing",
            "path_backslash_fun",
            "test_syntax_violation_callback_lifetimes",
            "test_options_reuse",
            "test_origin_blob_equality",
            "test_query",
            "test_domain"
          ]
        },
        {
          "id": "url/src/parser.rs:1553:5:1567:65:FnValue:false",
          "duration": 3.020642954,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1553,
              "column": 5
            },
            "end": {
              "line": 1567,
              "column": 65
            }
          },
          "replacement": "false",
          "status": "Killed",
          "description": "Replace FnValue by false",
          "statusReason": "thread 'test_options_reuse' panicked at url/tests/unit.rs:914:5:\nassertion `left == right` failed\n  left: [ExpectedDoubleSlash, NonUrlCodePoint, NonUrlCodePoint, NonUrlCodePoint, Backslash, NonUrlCodePoint, NonUrlCodePoint, NonUrlCodePoint, NonUrlCodePoint]\n right: [ExpectedDoubleSlash, Backslash]\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_options_reuse",
            "test_syntax_violation_callback_types",
            "test_syntax_violation_callback_lifetimes"
          ]
        },
        {
          "id": "url/src/parser.rs:714:9:825:10:FnValue:ParseResult::from(Default::default())",
          "duration": 0.467382388,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 714,
              "column": 9
            },
            "end": {
              "line": 825,
              "column": 10
            }
          },
          "replacement": "ParseResult::from(Default::default())",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from(Default::default())",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:299:29:299:31:BinaryOperator:==",
          "duration": 2.651094664,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 299,
              "column": 29
            },
            "end": {
              "line": 299,
              "column": 31
            }
          },
          "replacement": "==",
          "status": "Killed",
          "description": "Replace BinaryOperator by ==",
          "statusReason": "thread 'path_backslash_fun' panicked at url/tests/unit.rs:219:5:\nassertion `left == right` failed\n  left: \"thing:/.//foobar.com/foo\\\\bar\"\n right: \"thing://foobar.com/foo\\\\bar\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "path_backslash_fun",
            "test_authority",
            "test_domain",
            "issue_241",
            "test_has_authority",
            "test_non_special_path2",
            "test_make_relative",
            "test_non_special_path3",
            "test_relative",
            "test_set_empty_query",
            "test_relative_empty",
            "test_no_base_url",
            "test_set_empty_host",
            "test_set_empty_hostname",
            "test_set_empty_password",
            "test_origin_blob_equality",
            "test_non_special_path",
            "test_slicing",
            "test_strip_trailing_spaces_from_opaque_path",
            "test_socket_addrs",
            "test_set_empty_username_and_password",
            "test_set_host"
          ]
        },
        {
          "id": "url/src/parser.rs:975:9:1025:26:FnValue:ParseResult::new((Host::new(), Default::default()))",
          "duration": 0.60905539,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 975,
              "column": 9
            },
            "end": {
              "line": 1025,
              "column": 26
            }
          },
          "replacement": "ParseResult::new((Host::new(), Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new((Host::new(), Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:154:9:154:49:FnValue:true",
          "duration": 0.931394583,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 154,
              "column": 9
            },
            "end": {
              "line": 154,
              "column": 49
            }
          },
          "replacement": "true",
          "status": "Killed",
          "description": "Replace FnValue by true",
          "statusReason": "thread 'no_panic' panicked at url/tests/unit.rs:990:79:\ncalled `Result::unwrap()` on an `Err` value: ()\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "no_panic",
            "path_backslash_fun",
            "pop_if_empty_in_bounds",
            "test_authority",
            "test_relative",
            "test_relative_empty",
            "test_set_empty_host",
            "test_set_host",
            "test_set_empty_hostname",
            "test_non_special_path2"
          ]
        },
        {
          "id": "url/src/parser.rs:173:5:178:6:FnValue:Some(1)",
          "duration": 1.267841523,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 173,
              "column": 5
            },
            "end": {
              "line": 178,
              "column": 6
            }
          },
          "replacement": "Some(1)",
          "status": "Killed",
          "description": "Replace FnValue by Some(1)",
          "statusReason": "thread 'issue_61' panicked at url/tests/unit.rs:437:5:\nassertion `left == right` failed\n  left: Some(1)\n right: Some(443)\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "issue_61",
            "test_authority",
            "test_equality",
            "test_socket_addrs"
          ]
        },
        {
          "id": "url/src/parser.rs:423:38:423:40:BinaryOperator:!=",
          "duration": 3.831491814,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 423,
              "column": 38
            },
            "end": {
              "line": 423,
              "column": 40
            }
          },
          "replacement": "!=",
          "status": "Survived",
          "description": "Replace BinaryOperator by !=",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1041:9:1059:40:FnValue:ParseResult::from_iter([(true, Default::default(), Default::default())])",
          "duration": 0.462134191,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1041,
              "column": 9
            },
            "end": {
              "line": 1059,
              "column": 40
            }
          },
          "replacement": "ParseResult::from_iter([(true, Default::default(), Default::default())])",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from_iter([(true, Default::default(), Default::default())])",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:944:9:968:53:FnValue:ParseResult::from((1, Default::default(), None, Default::default()))",
          "duration": 0.373127751,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 944,
              "column": 9
            },
            "end": {
              "line": 968,
              "column": 53
            }
          },
          "replacement": "ParseResult::from((1, Default::default(), None, Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from((1, Default::default(), None, Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1300:71:1300:72:BinaryOperator:/",
          "duration": 0.970357647,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1300,
              "column": 71
            },
            "end": {
              "line": 1300,
              "column": 72
            }
          },
          "replacement": "/",
          "status": "Killed",
          "description": "Replace BinaryOperator by /",
          "statusReason": "thread 'test_file_with_drive' panicked at url/tests/unit.rs:1286:9:\nassertion `left == right` failed\n  left: \"file:///p:\"\n right: \"file:///p:/\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_file_with_drive"
          ]
        },
        {
          "id": "url/src/parser.rs:1113:53:1113:55:BinaryOperator:||",
          "duration": 0.959110762,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1113,
              "column": 53
            },
            "end": {
              "line": 1113,
              "column": 55
            }
          },
          "replacement": "||",
          "status": "Killed",
          "description": "Replace BinaryOperator by ||",
          "statusReason": "thread 'test_authority' panicked at url/tests/unit.rs:1245:49:\ncalled `Result::unwrap()` on an `Err` value: InvalidPort\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_authority",
            "test_equality",
            "test_origin_unicode_serialization",
            "test_origin_hash",
            "test_set_href",
            "test_slicing",
            "test_set_scheme_to_file_with_host",
            "append_empty_segment_then_mutate",
            "test_socket_addrs",
            "append_trailing_slash",
            "extend_query_pairs_then_mutate",
            "test_make_relative"
          ]
        },
        {
          "id": "url/src/parser.rs:1436:9:1456:48:FnValue:ParseResult::from_iter([(None, Some(0))])",
          "duration": 0.609404161,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1436,
              "column": 9
            },
            "end": {
              "line": 1456,
              "column": 48
            }
          },
          "replacement": "ParseResult::from_iter([(None, Some(0))])",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from_iter([(None, Some(0))])",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1145:41:1145:43:BinaryOperator:&&",
          "duration": 1.9175608419999999,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1145,
              "column": 41
            },
            "end": {
              "line": 1145,
              "column": 43
            }
          },
          "replacement": "&&",
          "status": "Killed",
          "description": "Replace BinaryOperator by &&",
          "statusReason": "thread 'extend_query_pairs_then_mutate' panicked at url/tests/unit.rs:477:28:\ncalled `Result::unwrap()` on an `Err` value: \"\\\"http://localhost:6767//foo/bar?auth=my-token\\\" != \\\"http://localhost:6767///foo/bar?auth=my-token\\\" (&self.serialization != &other.serialization) for URL \\\"http://localhost:6767//foo/bar?auth=my-token\\\"\"\n",
          "killedBy": [
            "extend_query_pairs_then_mutate",
            "test_make_relative",
            "test_equality",
            "append_empty_segment_then_mutate",
            "append_trailing_slash",
            "parse_with_params",
            "issue_61",
            "test_serialization",
            "test_set_scheme_to_file_with_host",
            "test_slicing",
            "test_syntax_violation_callback_types",
            "test_set_host",
            "test_syntax_violation_callback_lifetimes"
          ]
        },
        {
          "id": "url/src/parser.rs:944:9:968:53:FnValue:ParseResult::from((0, Default::default(), None, Default::default()))",
          "duration": 0.407685692,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 944,
              "column": 9
            },
            "end": {
              "line": 968,
              "column": 53
            }
          },
          "replacement": "ParseResult::from((0, Default::default(), None, Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from((0, Default::default(), None, Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1104:9:1124:30:FnValue:ParseResult::from((None, Default::default()))",
          "duration": 1.665937715,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1104,
              "column": 9
            },
            "end": {
              "line": 1124,
              "column": 30
            }
          },
          "replacement": "ParseResult::from((None, Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from((None, Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1503:44:1503:45:BinaryOperator:*",
          "duration": 4.683658078,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1503,
              "column": 44
            },
            "end": {
              "line": 1503,
              "column": 45
            }
          },
          "replacement": "*",
          "status": "Survived",
          "description": "Replace BinaryOperator by *",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:436:38:436:39:BinaryOperator:==",
          "duration": 5.1277959840000005,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 436,
              "column": 38
            },
            "end": {
              "line": 436,
              "column": 39
            }
          },
          "replacement": "==",
          "status": "Survived",
          "description": "Replace BinaryOperator by ==",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1436:9:1456:48:FnValue:ParseResult::new()",
          "duration": 0.252179446,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1436,
              "column": 9
            },
            "end": {
              "line": 1456,
              "column": 48
            }
          },
          "replacement": "ParseResult::new()",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new()",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:944:9:968:53:FnValue:ParseResult::from_iter([(1, Default::default(), Some(0), Default::default())])",
          "duration": 0.302546937,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 944,
              "column": 9
            },
            "end": {
              "line": 968,
              "column": 53
            }
          },
          "replacement": "ParseResult::from_iter([(1, Default::default(), Some(0), Default::default())])",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from_iter([(1, Default::default(), Some(0), Default::default())])",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:944:9:968:53:FnValue:ParseResult::new((0, Default::default(), Some(1), Default::default()))",
          "duration": 0.66072872,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 944,
              "column": 9
            },
            "end": {
              "line": 968,
              "column": 53
            }
          },
          "replacement": "ParseResult::new((0, Default::default(), Some(1), Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new((0, Default::default(), Some(1), Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1031:38:1031:40:BinaryOperator:!=",
          "duration": 4.776857785,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1031,
              "column": 38
            },
            "end": {
              "line": 1031,
              "column": 40
            }
          },
          "replacement": "!=",
          "status": "Survived",
          "description": "Replace BinaryOperator by !=",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:975:9:1025:26:FnValue:ParseResult::from_iter([(Host::new(String::new()), Default::default())])",
          "duration": 0.369702789,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 975,
              "column": 9
            },
            "end": {
              "line": 1025,
              "column": 26
            }
          },
          "replacement": "ParseResult::from_iter([(Host::new(String::new()), Default::default())])",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from_iter([(Host::new(String::new()), Default::default())])",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1190:42:1190:44:BinaryOperator:==",
          "duration": 1.405954633,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1190,
              "column": 42
            },
            "end": {
              "line": 1190,
              "column": 44
            }
          },
          "replacement": "==",
          "status": "Killed",
          "description": "Replace BinaryOperator by ==",
          "statusReason": "thread 'path_backslash_fun' panicked at url/tests/unit.rs:215:5:\nassertion `left == right` failed\n  left: \"http://foobar.com/foo/bar\"\n right: \"http://foobar.com/foo%5Cbar\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "path_backslash_fun",
            "test_options_reuse",
            "test_syntax_violation_callback_types"
          ]
        },
        {
          "id": "url/src/parser.rs:1436:9:1456:48:FnValue:ParseResult::from((Some(1), Some(1)))",
          "duration": 0.151642473,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1436,
              "column": 9
            },
            "end": {
              "line": 1456,
              "column": 48
            }
          },
          "replacement": "ParseResult::from((Some(1), Some(1)))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from((Some(1), Some(1)))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1622:26:1622:28:BinaryOperator:&&",
          "duration": 1.2666857969999998,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1622,
              "column": 26
            },
            "end": {
              "line": 1622,
              "column": 28
            }
          },
          "replacement": "&&",
          "status": "Killed",
          "description": "Replace BinaryOperator by &&",
          "statusReason": "thread 'test_file_with_drive' panicked at url/src/parser.rs:1622:73:\nindex out of bounds: the len is 2 but the index is 2\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_file_with_drive",
            "test_file_with_drive_and_path",
            "test_syntax_violation_callback_types"
          ]
        },
        {
          "id": "url/src/parser.rs:1332:44:1332:45:BinaryOperator:-",
          "duration": 0.654267238,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1332,
              "column": 44
            },
            "end": {
              "line": 1332,
              "column": 45
            }
          },
          "replacement": "-",
          "status": "Killed",
          "description": "Replace BinaryOperator by -",
          "statusReason": "thread 'test_file_with_drive' panicked at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/alloc/src/string.rs:1791:9:\nassertion failed: self.is_char_boundary(at)\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_file_with_drive",
            "test_file_with_drive_and_path",
            "test_make_relative"
          ]
        },
        {
          "id": "url/src/parser.rs:1003:19:1003:21:BinaryOperator:-=",
          "duration": 0.854449732,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1003,
              "column": 19
            },
            "end": {
              "line": 1003,
              "column": 21
            }
          },
          "replacement": "-=",
          "status": "Killed",
          "description": "Replace BinaryOperator by -=",
          "statusReason": "thread 'append_trailing_slash' panicked at url/src/parser.rs:1003:13:\nattempt to subtract with overflow\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "append_trailing_slash",
            "append_empty_segment_then_mutate",
            "extend_query_pairs_then_mutate",
            "from_str",
            "host",
            "host_serialization",
            "issue_61",
            "parse_with_params",
            "path_backslash_fun",
            "test_authority",
            "test_domain",
            "test_equality",
            "test_fragment",
            "test_has_authority",
            "test_idna",
            "test_make_relative",
            "test_non_special_path",
            "test_non_special_path2",
            "test_non_special_path3",
            "test_options_reuse",
            "test_origin_blob_equality",
            "test_origin_unicode_serialization",
            "test_origin_hash",
            "test_query",
            "test_relative",
            "test_relative_empty",
            "test_serialization",
            "test_set_empty_host",
            "test_set_empty_hostname",
            "test_set_empty_password",
            "test_set_empty_query",
            "test_set_empty_username_and_password",
            "test_set_host",
            "test_set_href",
            "test_set_ip_host",
            "test_set_scheme_to_file_with_host",
            "test_slicing",
            "test_socket_addrs",
            "test_syntax_violation_callback",
            "test_syntax_violation_callback_lifetimes",
            "test_syntax_violation_callback_types"
          ]
        },
        {
          "id": "url/src/parser.rs:886:24:886:26:BinaryOperator:-=",
          "duration": 0.704158131,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 886,
              "column": 24
            },
            "end": {
              "line": 886,
              "column": 26
            }
          },
          "replacement": "-=",
          "status": "Killed",
          "description": "Replace BinaryOperator by -=",
          "statusReason": "thread 'test_authority' panicked at url/tests/unit.rs:1248:5:\nassertion `left == right` failed\n  left: \"127.0.0.1:2121\"\n right: \"user@127.0.0.1:2121\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_authority",
            "test_non_special_path",
            "test_non_special_path2",
            "test_non_special_path3",
            "test_serialization",
            "test_set_empty_host",
            "test_set_empty_hostname",
            "test_set_empty_password",
            "test_set_empty_username_and_password",
            "test_slicing"
          ]
        },
        {
          "id": "url/src/parser.rs:1121:39:1121:41:BinaryOperator:!=",
          "duration": 0.754855798,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1121,
              "column": 39
            },
            "end": {
              "line": 1121,
              "column": 41
            }
          },
          "replacement": "!=",
          "status": "Killed",
          "description": "Replace BinaryOperator by !=",
          "statusReason": "thread 'append_empty_segment_then_mutate' panicked at url/tests/unit.rs:497:5:\nassertion `left == right` failed\n  left: \"http://localhost/foo/bar?a=b\"\n right: \"http://localhost:6767/foo/bar?a=b\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "append_empty_segment_then_mutate",
            "extend_query_pairs_then_mutate",
            "append_trailing_slash",
            "test_make_relative",
            "test_slicing",
            "test_socket_addrs",
            "test_authority",
            "test_syntax_violation_callback",
            "test_origin_unicode_serialization",
            "test_set_scheme_to_file_with_host",
            "test_equality",
            "test_syntax_violation_callback_lifetimes"
          ]
        },
        {
          "id": "url/src/parser.rs:1382:55:1382:56:BinaryOperator:-",
          "duration": 1.260229556,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1382,
              "column": 55
            },
            "end": {
              "line": 1382,
              "column": 56
            }
          },
          "replacement": "-",
          "status": "Killed",
          "description": "Replace BinaryOperator by -",
          "statusReason": "thread 'test_null_host_with_leading_empty_path_segment' panicked at url/tests/unit.rs:999:40:\ncalled `Result::unwrap()` on an `Err` value: InvalidDomainCharacter\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_null_host_with_leading_empty_path_segment"
          ]
        },
        {
          "id": "url/src/parser.rs:1065:9:1093:52:FnValue:ParseResult::new((true, String::new(), Default::default()))",
          "duration": 0.409706384,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1065,
              "column": 9
            },
            "end": {
              "line": 1093,
              "column": 52
            }
          },
          "replacement": "ParseResult::new((true, String::new(), Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new((true, String::new(), Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1314:9:1324:48:FnValue:()",
          "duration": 1.457284601,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1314,
              "column": 9
            },
            "end": {
              "line": 1324,
              "column": 48
            }
          },
          "replacement": "()",
          "status": "Killed",
          "description": "Replace FnValue by ()",
          "statusReason": "thread 'test_file_with_drive_and_path' panicked at url/tests/unit.rs:1300:5:\nassertion `left == right` failed\n  left: \"file:///p:/x|a\"\n right: \"file:///p:/a\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_file_with_drive_and_path",
            "test_make_relative"
          ]
        },
        {
          "id": "url/src/parser.rs:1598:5:1598:70:FnValue:true",
          "duration": 1.354844494,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1598,
              "column": 5
            },
            "end": {
              "line": 1598,
              "column": 70
            }
          },
          "replacement": "true",
          "status": "Killed",
          "description": "Replace FnValue by true",
          "statusReason": "thread 'issue_124' panicked at url/tests/unit.rs:246:5:\nassertion `left == right` failed\n  left: \"/././.\"\n right: \"/...\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "issue_124",
            "test_file_with_drive",
            "test_file_with_drive_and_path",
            "test_set_empty_host",
            "test_syntax_violation_callback_types"
          ]
        },
        {
          "id": "url/src/parser.rs:1108:29:1108:30:BinaryOperator:+",
          "duration": 1.219924848,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1108,
              "column": 29
            },
            "end": {
              "line": 1108,
              "column": 30
            }
          },
          "replacement": "+",
          "status": "Killed",
          "description": "Replace BinaryOperator by +",
          "statusReason": "thread 'append_trailing_slash' panicked at url/tests/unit.rs:465:28:\ncalled `Result::unwrap()` on an `Err` value: \"\\\"http://localhost:66/foo/bar?a=b\\\" != \\\"http://localhost:32/foo/bar?a=b\\\" (&self.serialization != &other.serialization) for URL \\\"http://localhost:66/foo/bar?a=b\\\"\"\n",
          "killedBy": [
            "append_trailing_slash",
            "append_empty_segment_then_mutate",
            "extend_query_pairs_then_mutate",
            "test_authority",
            "test_equality",
            "test_make_relative",
            "test_origin_unicode_serialization",
            "test_set_scheme_to_file_with_host",
            "test_slicing",
            "test_socket_addrs",
            "test_syntax_violation_callback",
            "test_syntax_violation_callback_lifetimes"
          ]
        },
        {
          "id": "url/src/parser.rs:1029:9:1034:30:FnValue:ParseResult::from((Host::from_iter([String::new()]), Default::default()))",
          "duration": 0.20177217,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1029,
              "column": 9
            },
            "end": {
              "line": 1034,
              "column": 30
            }
          },
          "replacement": "ParseResult::from((Host::from_iter([String::new()]), Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from((Host::from_iter([String::new()]), Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1620:9:1620:11:BinaryOperator:||",
          "duration": 0.910967935,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1620,
              "column": 9
            },
            "end": {
              "line": 1620,
              "column": 11
            }
          },
          "replacement": "||",
          "status": "Killed",
          "description": "Replace BinaryOperator by ||",
          "statusReason": "thread 'test_make_relative' panicked at url/tests/unit.rs:1198:9:\nassertion `left == right` failed: base: http://127.0.0.1:8080/test/, uri: http://127.0.0.1:8080/test, relative: ../test\n  left: \"http://127.0.0.1:8080/test/test\"\n right: \"http://127.0.0.1:8080/test\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_make_relative"
          ]
        },
        {
          "id": "url/src/parser.rs:215:9:226:10:FnValue:Default::default()",
          "duration": 0.252173456,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 215,
              "column": 9
            },
            "end": {
              "line": 226,
              "column": 10
            }
          },
          "replacement": "Default::default()",
          "status": "CompileError",
          "description": "Replace FnValue by Default::default()",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:975:9:1025:26:FnValue:ParseResult::new((Host::from_iter([\"xyzzy\".into()]), Default::default()))",
          "duration": 0.151423864,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 975,
              "column": 9
            },
            "end": {
              "line": 1025,
              "column": 26
            }
          },
          "replacement": "ParseResult::new((Host::from_iter([\"xyzzy\".into()]), Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new((Host::from_iter([\"xyzzy\".into()]), Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1065:9:1093:52:FnValue:ParseResult::new()",
          "duration": 0.201610569,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1065,
              "column": 9
            },
            "end": {
              "line": 1093,
              "column": 52
            }
          },
          "replacement": "ParseResult::new()",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new()",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1332:61:1332:62:BinaryOperator:-",
          "duration": 0.6532715,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1332,
              "column": 61
            },
            "end": {
              "line": 1332,
              "column": 62
            }
          },
          "replacement": "-",
          "status": "Killed",
          "description": "Replace BinaryOperator by -",
          "statusReason": "thread 'issue_124' panicked at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/alloc/src/string.rs:1791:9:\nassertion failed: self.is_char_boundary(at)\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "issue_124",
            "test_file_with_drive",
            "test_file_with_drive_and_path",
            "test_make_relative"
          ]
        },
        {
          "id": "url/src/parser.rs:467:9:493:10:FnValue:ParseResult::new()",
          "duration": 0.566249885,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 467,
              "column": 9
            },
            "end": {
              "line": 493,
              "column": 10
            }
          },
          "replacement": "ParseResult::new()",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new()",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1145:28:1145:30:BinaryOperator:!=",
          "duration": 1.345773303,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1145,
              "column": 28
            },
            "end": {
              "line": 1145,
              "column": 30
            }
          },
          "replacement": "!=",
          "status": "Killed",
          "description": "Replace BinaryOperator by !=",
          "statusReason": "thread 'extend_query_pairs_then_mutate' panicked at url/tests/unit.rs:477:28:\ncalled `Result::unwrap()` on an `Err` value: \"\\\"http://localhost:6767//foo/bar?auth=my-token\\\" != \\\"http://localhost:6767///foo/bar?auth=my-token\\\" (&self.serialization != &other.serialization) for URL \\\"http://localhost:6767//foo/bar?auth=my-token\\\"\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "extend_query_pairs_then_mutate",
            "append_empty_segment_then_mutate",
            "parse_with_params",
            "issue_61",
            "append_trailing_slash",
            "test_set_host",
            "test_make_relative",
            "test_serialization",
            "test_equality",
            "test_set_scheme_to_file_with_host",
            "test_syntax_violation_callback_types",
            "test_slicing"
          ]
        },
        {
          "id": "url/src/parser.rs:1104:9:1124:30:FnValue:ParseResult::from_iter([(None, Default::default())])",
          "duration": 1.120999874,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1104,
              "column": 9
            },
            "end": {
              "line": 1124,
              "column": 30
            }
          },
          "replacement": "ParseResult::from_iter([(None, Default::default())])",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from_iter([(None, Default::default())])",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1530:18:1530:20:BinaryOperator:!=",
          "duration": 2.3298715199999998,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1530,
              "column": 18
            },
            "end": {
              "line": 1530,
              "column": 20
            }
          },
          "replacement": "!=",
          "status": "Killed",
          "description": "Replace BinaryOperator by !=",
          "statusReason": "thread 'test_options_reuse' panicked at url/tests/unit.rs:914:5:\nassertion `left == right` failed\n  left: [ExpectedDoubleSlash, PercentDecode, PercentDecode, PercentDecode, Backslash, PercentDecode, PercentDecode, PercentDecode, PercentDecode]\n right: [ExpectedDoubleSlash, Backslash]\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_options_reuse",
            "test_syntax_violation_callback_lifetimes",
            "test_syntax_violation_callback_types"
          ]
        },
        {
          "id": "url/src/parser.rs:944:9:968:53:FnValue:ParseResult::new()",
          "duration": 0.602925789,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 944,
              "column": 9
            },
            "end": {
              "line": 968,
              "column": 53
            }
          },
          "replacement": "ParseResult::new()",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new()",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1065:9:1093:52:FnValue:ParseResult::new((true, \"xyzzy\".into(), Default::default()))",
          "duration": 1.269377563,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1065,
              "column": 9
            },
            "end": {
              "line": 1093,
              "column": 52
            }
          },
          "replacement": "ParseResult::new((true, \"xyzzy\".into(), Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new((true, \"xyzzy\".into(), Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:834:9:860:10:FnValue:ParseResult::new(Default::default())",
          "duration": 1.228598911,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 834,
              "column": 9
            },
            "end": {
              "line": 860,
              "column": 10
            }
          },
          "replacement": "ParseResult::new(Default::default())",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new(Default::default())",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1529:9:1540:10:FnValue:()",
          "duration": 3.833747867,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1529,
              "column": 9
            },
            "end": {
              "line": 1540,
              "column": 10
            }
          },
          "replacement": "()",
          "status": "Killed",
          "description": "Replace FnValue by ()",
          "statusReason": "thread 'test_syntax_violation_callback_types' panicked at url/tests/unit.rs:896:9:\nassertion `left == right` failed\n  left: None\n right: Some(NonUrlCodePoint)\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_syntax_violation_callback_types"
          ]
        },
        {
          "id": "url/src/parser.rs:1029:9:1034:30:FnValue:ParseResult::new((Host::from_iter([\"xyzzy\".into()]), Default::default()))",
          "duration": 0.974936527,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1029,
              "column": 9
            },
            "end": {
              "line": 1034,
              "column": 30
            }
          },
          "replacement": "ParseResult::new((Host::from_iter([\"xyzzy\".into()]), Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new((Host::from_iter([\"xyzzy\".into()]), Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:869:9:935:38:FnValue:ParseResult::new((0, Default::default()))",
          "duration": 0.914689854,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 869,
              "column": 9
            },
            "end": {
              "line": 935,
              "column": 38
            }
          },
          "replacement": "ParseResult::new((0, Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new((0, Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1109:25:1109:26:BinaryOperator:==",
          "duration": 4.893941503,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1109,
              "column": 25
            },
            "end": {
              "line": 1109,
              "column": 26
            }
          },
          "replacement": "==",
          "status": "Survived",
          "description": "Replace BinaryOperator by ==",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:571:46:571:48:BinaryOperator:&&",
          "duration": 5.185880769,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 571,
              "column": 46
            },
            "end": {
              "line": 571,
              "column": 48
            }
          },
          "replacement": "&&",
          "status": "Survived",
          "description": "Replace BinaryOperator by &&",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1029:9:1034:30:FnValue:ParseResult::from((Host::from(String::new()), Default::default()))",
          "duration": 0.201592034,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1029,
              "column": 9
            },
            "end": {
              "line": 1034,
              "column": 30
            }
          },
          "replacement": "ParseResult::from((Host::from(String::new()), Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from((Host::from(String::new()), Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1211:43:1211:45:BinaryOperator:*=",
          "duration": 0.7041245979999999,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1211,
              "column": 43
            },
            "end": {
              "line": 1211,
              "column": 45
            }
          },
          "replacement": "*=",
          "status": "Killed",
          "description": "Replace BinaryOperator by *=",
          "statusReason": "thread 'test_file_with_drive' panicked at url/tests/unit.rs:1286:9:\nassertion `left == right` failed\n  left: \"file:///p:/.\"\n right: \"file:///p:/\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_file_with_drive"
          ]
        },
        {
          "id": "url/src/parser.rs:1262:25:1262:27:BinaryOperator:||",
          "duration": 0.75392388,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1262,
              "column": 25
            },
            "end": {
              "line": 1262,
              "column": 27
            }
          },
          "replacement": "||",
          "status": "Killed",
          "description": "Replace BinaryOperator by ||",
          "statusReason": "thread 'issue_124' panicked at url/tests/unit.rs:244:5:\nassertion `left == right` failed\n  left: \"/a:\"\n right: \"/a\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "issue_124",
            "test_file_with_drive_and_path",
            "test_leading_dots",
            "test_set_empty_host"
          ]
        },
        {
          "id": "url/src/parser.rs:944:9:968:53:FnValue:ParseResult::from_iter([(0, Default::default(), Some(0), Default::default())])",
          "duration": 0.456101791,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 944,
              "column": 9
            },
            "end": {
              "line": 968,
              "column": 53
            }
          },
          "replacement": "ParseResult::from_iter([(0, Default::default(), Some(0), Default::default())])",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from_iter([(0, Default::default(), Some(0), Default::default())])",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1137:24:1137:26:BinaryOperator:!=",
          "duration": 1.576255997,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1137,
              "column": 24
            },
            "end": {
              "line": 1137,
              "column": 26
            }
          },
          "replacement": "!=",
          "status": "Killed",
          "description": "Replace BinaryOperator by !=",
          "statusReason": "thread 'test_syntax_violation_callback_lifetimes' panicked at url/tests/unit.rs:860:5:\nassertion `left == right` failed\n  left: Some(Backslash)\n right: Some(ExpectedDoubleSlash)\n",
          "killedBy": [
            "test_syntax_violation_callback_lifetimes",
            "test_syntax_violation_callback_types",
            "test_syntax_violation_callback",
            "test_options_reuse"
          ]
        },
        {
          "id": "url/src/parser.rs:1436:9:1456:48:FnValue:ParseResult::new((None, None))",
          "duration": 1.128997194,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1436,
              "column": 9
            },
            "end": {
              "line": 1456,
              "column": 48
            }
          },
          "replacement": "ParseResult::new((None, None))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new((None, None))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1612:49:1612:51:BinaryOperator:||",
          "duration": 1.985344619,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1612,
              "column": 49
            },
            "end": {
              "line": 1612,
              "column": 51
            }
          },
          "replacement": "||",
          "status": "Killed",
          "description": "Replace BinaryOperator by ||",
          "statusReason": "thread 'test_make_relative' panicked at url/tests/unit.rs:1198:9:\nassertion `left == right` failed: base: http://127.0.0.1:8080/test/, uri: http://127.0.0.1:8080/test, relative: ../test\n  left: \"http://127.0.0.1:8080/test/test\"\n right: \"http://127.0.0.1:8080/test\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_make_relative"
          ]
        },
        {
          "id": "url/src/parser.rs:1622:21:1622:23:BinaryOperator:!=",
          "duration": 1.985142382,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1622,
              "column": 21
            },
            "end": {
              "line": 1622,
              "column": 23
            }
          },
          "replacement": "!=",
          "status": "Killed",
          "description": "Replace BinaryOperator by !=",
          "statusReason": "thread 'test_file_with_drive_and_path' panicked at url/src/parser.rs:1622:73:\nindex out of bounds: the len is 2 but the index is 2\n",
          "killedBy": [
            "test_file_with_drive_and_path",
            "test_file_with_drive",
            "test_syntax_violation_callback_types"
          ]
        },
        {
          "id": "url/src/parser.rs:944:9:968:53:FnValue:ParseResult::from((0, Default::default(), Some(1), Default::default()))",
          "duration": 0.564367051,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 944,
              "column": 9
            },
            "end": {
              "line": 968,
              "column": 53
            }
          },
          "replacement": "ParseResult::from((0, Default::default(), Some(1), Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from((0, Default::default(), Some(1), Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1104:9:1124:30:FnValue:ParseResult::new()",
          "duration": 0.456065153,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1104,
              "column": 9
            },
            "end": {
              "line": 1124,
              "column": 30
            }
          },
          "replacement": "ParseResult::new()",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new()",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1104:9:1124:30:FnValue:ParseResult::new((Some(0), Default::default()))",
          "duration": 0.317868129,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1104,
              "column": 9
            },
            "end": {
              "line": 1124,
              "column": 30
            }
          },
          "replacement": "ParseResult::new((Some(0), Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new((Some(0), Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1573:8:1573:10:BinaryOperator:>",
          "duration": 1.514860912,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1573,
              "column": 8
            },
            "end": {
              "line": 1573,
              "column": 10
            }
          },
          "replacement": ">",
          "status": "Killed",
          "description": "Replace BinaryOperator by >",
          "statusReason": "thread 'extend_query_pairs_then_mutate' panicked at url/tests/unit.rs:474:64:\ncalled `Result::unwrap()` on an `Err` value: RelativeUrlWithoutBase\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "extend_query_pairs_then_mutate",
            "test_file_with_drive_and_path",
            "from_str",
            "issue_864",
            "pop_if_empty_in_bounds",
            "issue_124",
            "append_empty_segment_then_mutate",
            "append_trailing_slash",
            "host",
            "test_non_special_path3",
            "test_equality",
            "test_null_host_with_leading_empty_path_segment",
            "test_non_special_path2",
            "test_authority",
            "test_origin_blob_equality",
            "test_options_reuse",
            "path_backslash_fun",
            "parse_with_params",
            "test_origin_hash",
            "test_file_with_drive",
            "test_idna",
            "test_origin_unicode_serialization",
            "test_query",
            "test_relative",
            "test_origin_opaque",
            "issue_61",
            "test_relative_empty",
            "issue_241",
            "test_serialization",
            "test_leading_dots",
            "test_no_base_url",
            "test_make_relative",
            "test_set_empty_password",
            "test_set_empty_hostname",
            "test_slicing",
            "test_set_ip_host",
            "test_strip_trailing_spaces_from_opaque_path",
            "test_set_href",
            "test_set_empty_host",
            "test_syntax_violation_callback",
            "test_domain",
            "no_panic",
            "issue_197",
            "test_set_empty_query",
            "test_set_empty_username_and_password",
            "test_socket_addrs",
            "test_set_scheme_to_file_with_host",
            "test_non_special_path",
            "test_set_host",
            "test_syntax_violation_callback_lifetimes",
            "test_has_authority",
            "test_fragment",
            "host_serialization",
            "test_syntax_violation_callback_types"
          ]
        },
        {
          "id": "url/src/parser.rs:415:9:456:10:FnValue:ParseResult::new()",
          "duration": 0.303428855,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 415,
              "column": 9
            },
            "end": {
              "line": 456,
              "column": 10
            }
          },
          "replacement": "ParseResult::new()",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new()",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:911:25:911:27:BinaryOperator:||",
          "duration": 1.6205001589999999,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 911,
              "column": 25
            },
            "end": {
              "line": 911,
              "column": 27
            }
          },
          "replacement": "||",
          "status": "Killed",
          "description": "Replace BinaryOperator by ||",
          "statusReason": "thread 'test_non_special_path' panicked at url/tests/unit.rs:946:5:\nassertion `left == right` failed\n  left: \"postgres://:ostgres@localhost/\"\n right: \"postgres://postgres@localhost/\"\n",
          "killedBy": [
            "test_non_special_path",
            "test_non_special_path2",
            "test_authority",
            "test_non_special_path3",
            "test_set_empty_password",
            "test_serialization",
            "test_slicing"
          ]
        },
        {
          "id": "url/src/parser.rs:910:33:910:35:BinaryOperator:+=",
          "duration": 1.768545156,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 910,
              "column": 33
            },
            "end": {
              "line": 910,
              "column": 35
            }
          },
          "replacement": "+=",
          "status": "Killed",
          "description": "Replace BinaryOperator by +=",
          "statusReason": "thread 'test_non_special_path' panicked at url/src/parser.rs:909:49:\ncalled `Option::unwrap()` on a `None` value\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_non_special_path",
            "test_non_special_path2",
            "test_non_special_path3",
            "test_origin_hash",
            "test_origin_unicode_serialization",
            "test_authority",
            "test_serialization",
            "test_set_href",
            "test_slicing",
            "test_syntax_violation_callback_types",
            "test_set_empty_host",
            "test_set_empty_hostname",
            "test_set_empty_username_and_password",
            "test_set_empty_password"
          ]
        },
        {
          "id": "url/src/parser.rs:975:9:1025:26:FnValue:ParseResult::new((Host::new(\"xyzzy\".into()), Default::default()))",
          "duration": 0.968063257,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 975,
              "column": 9
            },
            "end": {
              "line": 1025,
              "column": 26
            }
          },
          "replacement": "ParseResult::new((Host::new(\"xyzzy\".into()), Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new((Host::new(\"xyzzy\".into()), Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:173:5:178:6:FnValue:None",
          "duration": 2.335100455,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 173,
              "column": 5
            },
            "end": {
              "line": 178,
              "column": 6
            }
          },
          "replacement": "None",
          "status": "Killed",
          "description": "Replace FnValue by None",
          "statusReason": "thread 'test_equality' panicked at url/tests/unit.rs:257:9:\nassertion `left == right` failed\n  left: Url { scheme: \"https\", cannot_be_a_base: false, username: \"\", password: None, host: Some(Domain(\"example.com\")), port: None, path: \"/\", query: None, fragment: None }\n right: Url { scheme: \"https\", cannot_be_a_base: false, username: \"\", password: None, host: Some(Domain(\"example.com\")), port: Some(443), path: \"/\", query: None, fragment: None }\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_equality",
            "issue_61",
            "test_authority",
            "test_origin_hash",
            "test_origin_unicode_serialization",
            "test_socket_addrs",
            "test_origin_blob_equality"
          ]
        },
        {
          "id": "url/src/parser.rs:1436:9:1456:48:FnValue:ParseResult::from((Some(0), Some(1)))",
          "duration": 0.917476136,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1436,
              "column": 9
            },
            "end": {
              "line": 1456,
              "column": 48
            }
          },
          "replacement": "ParseResult::from((Some(0), Some(1)))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from((Some(0), Some(1)))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1579:5:1579:37:FnValue:true",
          "duration": 4.692670716,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1579,
              "column": 5
            },
            "end": {
              "line": 1579,
              "column": 37
            }
          },
          "replacement": "true",
          "status": "Killed",
          "description": "Replace FnValue by true",
          "statusReason": "Test executable failed (exit status: 101).\n\nstderr:\nthread 'main' panicked at url/src/lib.rs:13:1:\nassertion `left == right` failed\n  left: \"https://example.com/products?\"\n right: \"https://example.com/products?page=2\"\nstack backtrace:\n   0:     0x5576cfd5cbf6 - std::backtrace_rs::backtrace::libunwind::trace::h5aa1f3f50fd6005d\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/../../backtrace/src/backtrace/libunwind.rs:104:5\n   1:     0x5576cfd5cbf6 - std::backtrace_rs::backtrace::trace_unsynchronized::h39f759d0ceaa839b\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/../../backtrace/src/backtrace/mod.rs:66:5\n   2:     0x5576cfd5cbf6 - std::sys_common::backtrace::_print_fmt::hfd4aa038a1413f7f\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:68:5\n   3:     0x5576cfd5cbf6 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::ha47fba1de44cec55\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:44:22\n   4:     0x5576cfd7a50c - core::fmt::rt::Argument::fmt::h375396e1292b08cb\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/fmt/rt.rs:142:9\n   5:     0x5576cfd7a50c - core::fmt::write::h93e0b545aa9eb320\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/fmt/mod.rs:1120:17\n   6:     0x5576cfd5ae0f - std::io::Write::write_fmt::h97fad0674ecdf154\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/io/mod.rs:1854:15\n   7:     0x5576cfd5c9a4 - std::sys_common::backtrace::_print::hb7626a1b4ea382df\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:47:5\n   8:     0x5576cfd5c9a4 - std::sys_common::backtrace::print::h89f2abc5b98b82a2\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:34:9\n   9:     0x5576cfd5de9b - std::panicking::default_hook::{{closure}}::h73fe684137831048\n  10:     0x5576cfd5dbe9 - std::panicking::default_hook::h8dfe6e62b35915a0\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:292:9\n  11:     0x5576cfd5e33d - std::panicking::rust_panic_with_hook::hc33e259baf535986\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:781:13\n  12:     0x5576cfd5e212 - std::panicking::begin_panic_handler::{{closure}}::hcfbf8e29c9418131\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:659:13\n  13:     0x5576cfd5d0d6 - std::sys_common::backtrace::__rust_end_short_backtrace::h99b80dfa4797f5b6\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:171:18\n  14:     0x5576cfd5df44 - rust_begin_unwind\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:647:5\n  15:     0x5576cfcf7cf5 - core::panicking::panic_fmt::h96700527d99a56a9\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/panicking.rs:72:14\n  16:     0x5576cfcf7ffb - core::panicking::assert_failed_inner::h88ed53873568fcef\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/panicking.rs:342:17\n  17:     0x5576cfcf85ca - core::panicking::assert_failed::h03f34daddd0b0bf6\n  18:     0x5576cfcf8c07 - rust_out::main::_doctest_main_url_src_lib_rs_1534_0::run::hda12ab8ac0b06dda\n  19:     0x5576cfcf8879 - rust_out::main::_doctest_main_url_src_lib_rs_1534_0::hd7b5ebaee92059ca\n  20:     0x5576cfcf8866 - rust_out::main::h11d1a6ed4289a3df\n  21:     0x5576cfcf8503 - core::ops::function::FnOnce::call_once::h903f19ac3af5d648\n  22:     0x5576cfcf83f6 - std::sys_common::backtrace::__rust_begin_short_backtrace::ha11011b11b4aaa1f\n  23:     0x5576cfcf8449 - std::rt::lang_start::{{closure}}::h196360a935ed97d8\n  24:     0x5576cfd59113 - core::ops::function::impls::<impl core::ops::function::FnOnce<A> for &F>::call_once::hb12a069c52b9e638\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/ops/function.rs:284:13\n  25:     0x5576cfd59113 - std::panicking::try::do_call::h34ba557680a1662c\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:554:40\n  26:     0x5576cfd59113 - std::panicking::try::hb88778117e3deeb6\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:518:19\n  27:     0x5576cfd59113 - std::panic::catch_unwind::hbd3c1fafc0d9693e\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panic.rs:142:14\n  28:     0x5576cfd59113 - std::rt::lang_start_internal::{{closure}}::h0b81b8de0028b6f3\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/rt.rs:148:48\n  29:     0x5576cfd59113 - std::panicking::try::do_call::hbbb521b5391ac872\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:554:40\n  30:     0x5576cfd59113 - std::panicking::try::hf108a0b7deb842f7\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:518:19\n  31:     0x5576cfd59113 - std::panic::catch_unwind::h6451f9c53324fd81\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panic.rs:142:14\n  32:     0x5576cfd59113 - std::rt::lang_start_internal::hc6ad905f9af5ea03\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/rt.rs:148:20\n  33:     0x5576cfcf8427 - std::rt::lang_start::h4d1167809e102347\n  34:     0x5576cfcf8d25 - main\n  35:     0x7ff058585cd0 - <unknown>\n  36:     0x7ff058585d8a - __libc_start_main\n  37:     0x5576cfcf8315 - _start\n  38:                0x0 - <unknown>\n\n",
          "killedBy": [
            "url/src/lib.rs - Url::set_query (line 1534)"
          ]
        },
        {
          "id": "url/src/parser.rs:236:9:236:42:FnValue:true",
          "duration": 1.824351023,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 236,
              "column": 9
            },
            "end": {
              "line": 236,
              "column": 42
            }
          },
          "replacement": "true",
          "status": "Killed",
          "description": "Replace FnValue by true",
          "statusReason": "thread 'pop_if_empty_in_bounds' panicked at url/tests/unit.rs:1005:38:\ncalled `Result::unwrap()` on an `Err` value: EmptyHost\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "pop_if_empty_in_bounds",
            "test_file_with_drive",
            "test_file_with_drive_and_path",
            "test_make_relative",
            "test_options_reuse",
            "test_relative",
            "test_relative_empty",
            "test_syntax_violation_callback_types"
          ]
        },
        {
          "id": "url/src/parser.rs:1590:5:1594:6:FnValue:ParseResult::from_iter([1])",
          "duration": 0.309005344,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1590,
              "column": 5
            },
            "end": {
              "line": 1594,
              "column": 6
            }
          },
          "replacement": "ParseResult::from_iter([1])",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from_iter([1])",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1303:34:1303:36:BinaryOperator:<",
          "duration": 2.6850118099999998,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1303,
              "column": 34
            },
            "end": {
              "line": 1303,
              "column": 36
            }
          },
          "replacement": "<",
          "status": "Killed",
          "description": "Replace BinaryOperator by <",
          "statusReason": "thread 'test_make_relative' panicked at url/tests/unit.rs:1198:9:\nassertion `left == right` failed: base: http://127.0.0.1:8080/test/, uri: http://127.0.0.1:8080/test, relative: ../test\n  left: \"http://127.0.0.1:8080/test/test\"\n right: \"http://127.0.0.1:8080/test\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_make_relative"
          ]
        },
        {
          "id": "url/src/parser.rs:975:9:1025:26:FnValue:ParseResult::from_iter([(Host::new(\"xyzzy\".into()), Default::default())])",
          "duration": 0.201510933,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 975,
              "column": 9
            },
            "end": {
              "line": 1025,
              "column": 26
            }
          },
          "replacement": "ParseResult::from_iter([(Host::new(\"xyzzy\".into()), Default::default())])",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from_iter([(Host::new(\"xyzzy\".into()), Default::default())])",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1029:9:1034:30:FnValue:ParseResult::new((Host::from(\"xyzzy\".into()), Default::default()))",
          "duration": 0.202262366,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1029,
              "column": 9
            },
            "end": {
              "line": 1034,
              "column": 30
            }
          },
          "replacement": "ParseResult::new((Host::from(\"xyzzy\".into()), Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new((Host::from(\"xyzzy\".into()), Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1392:13:1392:15:BinaryOperator:||",
          "duration": 1.5184228320000002,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1392,
              "column": 13
            },
            "end": {
              "line": 1392,
              "column": 15
            }
          },
          "replacement": "||",
          "status": "Killed",
          "description": "Replace BinaryOperator by ||",
          "statusReason": "thread 'pop_if_empty_in_bounds' panicked at url/src/parser.rs:1396:24:\nindex out of bounds: the len is 4 but the index is 4\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "pop_if_empty_in_bounds",
            "test_file_with_drive",
            "test_file_with_drive_and_path"
          ]
        },
        {
          "id": "url/src/parser.rs:1228:77:1228:78:BinaryOperator:+",
          "duration": 0.7059527720000001,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1228,
              "column": 77
            },
            "end": {
              "line": 1228,
              "column": 78
            }
          },
          "replacement": "+",
          "status": "Killed",
          "description": "Replace BinaryOperator by +",
          "statusReason": "thread 'extend_query_pairs_then_mutate' panicked at url/src/parser.rs:1228:36:\nbyte index 27 is out of bounds of `http://localhost:6767/foo/`\n",
          "killedBy": [
            "extend_query_pairs_then_mutate",
            "append_trailing_slash",
            "append_empty_segment_then_mutate",
            "issue_197",
            "no_panic",
            "test_authority",
            "test_file_with_drive",
            "test_file_with_drive_and_path",
            "test_has_authority",
            "test_make_relative",
            "test_non_special_path",
            "test_non_special_path2",
            "test_non_special_path3",
            "test_null_host_with_leading_empty_path_segment",
            "test_options_reuse",
            "test_relative",
            "test_set_empty_host",
            "test_serialization",
            "test_set_empty_hostname",
            "test_set_empty_password",
            "test_set_empty_query",
            "test_set_empty_username_and_password",
            "test_set_host",
            "test_set_href",
            "test_set_scheme_to_file_with_host",
            "test_slicing",
            "test_socket_addrs",
            "test_syntax_violation_callback_types"
          ]
        },
        {
          "id": "url/src/parser.rs:1029:9:1034:30:FnValue:ParseResult::new((Host::new(\"xyzzy\".into()), Default::default()))",
          "duration": 0.201488832,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1029,
              "column": 9
            },
            "end": {
              "line": 1034,
              "column": 30
            }
          },
          "replacement": "ParseResult::new((Host::new(\"xyzzy\".into()), Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new((Host::new(\"xyzzy\".into()), Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:316:9:318:57:FnValue:Some(Default::default())",
          "duration": 0.603242141,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 316,
              "column": 9
            },
            "end": {
              "line": 318,
              "column": 57
            }
          },
          "replacement": "Some(Default::default())",
          "status": "Killed",
          "description": "Replace FnValue by Some(Default::default())",
          "statusReason": "thread 'extend_query_pairs_then_mutate' panicked at url/tests/unit.rs:474:64:\ncalled `Result::unwrap()` on an `Err` value: RelativeUrlWithoutBase\n",
          "killedBy": [
            "extend_query_pairs_then_mutate",
            "append_empty_segment_then_mutate",
            "append_trailing_slash",
            "from_str",
            "host",
            "host_serialization",
            "issue_124",
            "issue_241",
            "issue_197",
            "issue_61",
            "issue_864",
            "no_panic",
            "parse_with_params",
            "path_backslash_fun",
            "pop_if_empty_in_bounds",
            "test_authority",
            "test_domain",
            "test_equality",
            "test_file_with_drive",
            "test_file_with_drive_and_path",
            "test_fragment",
            "test_has_authority",
            "test_idna",
            "test_leading_dots",
            "test_make_relative",
            "test_no_base_url",
            "test_non_special_path",
            "test_non_special_path2",
            "test_non_special_path3",
            "test_null_host_with_leading_empty_path_segment",
            "test_options_reuse",
            "test_origin_blob_equality",
            "test_origin_hash",
            "test_origin_opaque",
            "test_origin_unicode_serialization",
            "test_query",
            "test_relative",
            "test_relative_empty",
            "test_serialization",
            "test_set_empty_host",
            "test_set_empty_hostname",
            "test_set_empty_password",
            "test_set_empty_query",
            "test_set_empty_username_and_password",
            "test_set_host",
            "test_set_href",
            "test_set_ip_host",
            "test_set_scheme_to_file_with_host",
            "test_slicing",
            "test_socket_addrs",
            "test_strip_trailing_spaces_from_opaque_path",
            "test_syntax_violation_callback",
            "test_syntax_violation_callback_lifetimes",
            "test_syntax_violation_callback_types"
          ]
        },
        {
          "id": "url/src/parser.rs:975:9:1025:26:FnValue:ParseResult::new((Host::from(String::new()), Default::default()))",
          "duration": 0.352621403,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 975,
              "column": 9
            },
            "end": {
              "line": 1025,
              "column": 26
            }
          },
          "replacement": "ParseResult::new((Host::from(String::new()), Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new((Host::from(String::new()), Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1343:9:1356:10:FnValue:Default::default()",
          "duration": 0.824578562,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1343,
              "column": 9
            },
            "end": {
              "line": 1356,
              "column": 10
            }
          },
          "replacement": "Default::default()",
          "status": "CompileError",
          "description": "Replace FnValue by Default::default()",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1065:9:1093:52:FnValue:ParseResult::from_iter([(true, \"xyzzy\".into(), Default::default())])",
          "duration": 0.815778666,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1065,
              "column": 9
            },
            "end": {
              "line": 1093,
              "column": 52
            }
          },
          "replacement": "ParseResult::from_iter([(true, \"xyzzy\".into(), Default::default())])",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from_iter([(true, \"xyzzy\".into(), Default::default())])",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:944:9:968:53:FnValue:ParseResult::new((0, Default::default(), Some(0), Default::default()))",
          "duration": 0.412487978,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 944,
              "column": 9
            },
            "end": {
              "line": 968,
              "column": 53
            }
          },
          "replacement": "ParseResult::new((0, Default::default(), Some(0), Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new((0, Default::default(), Some(0), Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:869:9:935:38:FnValue:ParseResult::from_iter([(1, Default::default())])",
          "duration": 0.509155979,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 869,
              "column": 9
            },
            "end": {
              "line": 935,
              "column": 38
            }
          },
          "replacement": "ParseResult::from_iter([(1, Default::default())])",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from_iter([(1, Default::default())])",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1329:37:1329:38:BinaryOperator:==",
          "duration": 1.512300905,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1329,
              "column": 37
            },
            "end": {
              "line": 1329,
              "column": 38
            }
          },
          "replacement": "==",
          "status": "Killed",
          "description": "Replace BinaryOperator by ==",
          "statusReason": "thread 'test_file_with_drive_and_path' panicked at url/tests/unit.rs:1300:5:\nassertion `left == right` failed\n  left: \"file:///p:/x|a\"\n right: \"file:///p:/a\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_file_with_drive_and_path",
            "test_make_relative"
          ]
        },
        {
          "id": "url/src/parser.rs:1206:29:1206:31:BinaryOperator:||",
          "duration": 0.908867587,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1206,
              "column": 29
            },
            "end": {
              "line": 1206,
              "column": 31
            }
          },
          "replacement": "||",
          "status": "Killed",
          "description": "Replace BinaryOperator by ||",
          "statusReason": "thread 'issue_124' panicked at url/tests/unit.rs:246:5:\nassertion `left == right` failed\n  left: \"/././.\"\n right: \"/...\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "issue_124",
            "test_file_with_drive_and_path",
            "test_file_with_drive",
            "test_set_empty_host",
            "issue_864",
            "test_syntax_violation_callback_types"
          ]
        },
        {
          "id": "url/src/parser.rs:1198:47:1198:49:BinaryOperator:!=",
          "duration": 0.9625368409999999,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1198,
              "column": 47
            },
            "end": {
              "line": 1198,
              "column": 49
            }
          },
          "replacement": "!=",
          "status": "Killed",
          "description": "Replace BinaryOperator by !=",
          "statusReason": "thread 'append_trailing_slash' panicked at url/tests/unit.rs:468:5:\nassertion `left == right` failed\n  left: \"http://localhost:6767/foo/bar%3Fa=b/\"\n right: \"http://localhost:6767/foo/bar/?a=b\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "append_trailing_slash",
            "parse_with_params",
            "extend_query_pairs_then_mutate",
            "append_empty_segment_then_mutate",
            "test_file_with_drive",
            "test_fragment",
            "test_file_with_drive_and_path",
            "test_make_relative",
            "test_slicing",
            "test_set_empty_query",
            "test_serialization",
            "test_syntax_violation_callback_types",
            "test_query"
          ]
        },
        {
          "id": "url/src/parser.rs:869:9:935:38:FnValue:ParseResult::new((1, Default::default()))",
          "duration": 1.5720231199999999,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 869,
              "column": 9
            },
            "end": {
              "line": 935,
              "column": 38
            }
          },
          "replacement": "ParseResult::new((1, Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new((1, Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:908:35:908:36:BinaryOperator:==",
          "duration": 2.5678949280000003,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 908,
              "column": 35
            },
            "end": {
              "line": 908,
              "column": 36
            }
          },
          "replacement": "==",
          "status": "Killed",
          "description": "Replace BinaryOperator by ==",
          "statusReason": "thread 'test_authority' panicked at url/tests/unit.rs:1248:5:\nassertion `left == right` failed\n  left: \"127.0.0.1:2121\"\n right: \"user@127.0.0.1:2121\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_authority",
            "test_non_special_path",
            "test_non_special_path2",
            "test_non_special_path3",
            "test_set_empty_host",
            "test_slicing",
            "test_set_empty_username_and_password",
            "test_serialization",
            "test_set_empty_hostname",
            "test_set_empty_password"
          ]
        },
        {
          "id": "url/src/parser.rs:1300:9:1308:10:FnValue:true",
          "duration": 2.875392268,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1300,
              "column": 9
            },
            "end": {
              "line": 1308,
              "column": 10
            }
          },
          "replacement": "true",
          "status": "Killed",
          "description": "Replace FnValue by true",
          "statusReason": "thread 'test_file_with_drive' panicked at url/tests/unit.rs:1286:9:\nassertion `left == right` failed\n  left: \"file:///p:\"\n right: \"file:///p:/\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_file_with_drive"
          ]
        },
        {
          "id": "url/src/parser.rs:1065:9:1093:52:FnValue:ParseResult::from_iter([(false, String::new(), Default::default())])",
          "duration": 0.266369606,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1065,
              "column": 9
            },
            "end": {
              "line": 1093,
              "column": 52
            }
          },
          "replacement": "ParseResult::from_iter([(false, String::new(), Default::default())])",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from_iter([(false, String::new(), Default::default())])",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1211:43:1211:45:BinaryOperator:-=",
          "duration": 1.782384775,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1211,
              "column": 43
            },
            "end": {
              "line": 1211,
              "column": 45
            }
          },
          "replacement": "-=",
          "status": "Killed",
          "description": "Replace BinaryOperator by -=",
          "statusReason": "thread 'test_file_with_drive' panicked at url/tests/unit.rs:1286:9:\nassertion `left == right` failed\n  left: \"file:///p:/.\"\n right: \"file:///p:/\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_file_with_drive"
          ]
        },
        {
          "id": "url/src/parser.rs:1029:9:1034:30:FnValue:ParseResult::new()",
          "duration": 0.61507539,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1029,
              "column": 9
            },
            "end": {
              "line": 1034,
              "column": 30
            }
          },
          "replacement": "ParseResult::new()",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new()",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1391:62:1391:63:BinaryOperator:*",
          "duration": 3.131630394,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1391,
              "column": 62
            },
            "end": {
              "line": 1391,
              "column": 63
            }
          },
          "replacement": "*",
          "status": "Survived",
          "description": "Replace BinaryOperator by *",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:944:9:968:53:FnValue:ParseResult::new((1, Default::default(), Some(1), Default::default()))",
          "duration": 0.765332999,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 944,
              "column": 9
            },
            "end": {
              "line": 968,
              "column": 53
            }
          },
          "replacement": "ParseResult::new((1, Default::default(), Some(1), Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new((1, Default::default(), Some(1), Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1001:40:1001:42:BinaryOperator:-=",
          "duration": 2.5900148620000003,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1001,
              "column": 40
            },
            "end": {
              "line": 1001,
              "column": 42
            }
          },
          "replacement": "-=",
          "status": "Killed",
          "description": "Replace BinaryOperator by -=",
          "statusReason": "thread 'test_domain' panicked at url/src/parser.rs:1001:22:\nattempt to subtract with overflow\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_domain",
            "from_str",
            "append_trailing_slash",
            "host_serialization",
            "test_authority",
            "append_empty_segment_then_mutate",
            "extend_query_pairs_then_mutate",
            "test_fragment",
            "parse_with_params",
            "path_backslash_fun",
            "issue_61",
            "test_set_empty_username_and_password",
            "test_set_empty_host",
            "test_set_empty_hostname",
            "test_equality",
            "test_make_relative",
            "test_set_scheme_to_file_with_host",
            "test_set_ip_host",
            "test_slicing",
            "test_set_empty_password",
            "test_socket_addrs",
            "test_set_host",
            "test_serialization",
            "test_set_empty_query",
            "test_non_special_path",
            "test_origin_unicode_serialization",
            "test_non_special_path3",
            "test_syntax_violation_callback_lifetimes",
            "test_syntax_violation_callback_types",
            "test_syntax_violation_callback",
            "test_relative",
            "test_relative_empty",
            "test_origin_blob_equality",
            "host",
            "test_has_authority",
            "test_options_reuse",
            "test_idna",
            "test_set_href",
            "test_non_special_path2",
            "test_query",
            "test_origin_hash"
          ]
        },
        {
          "id": "url/src/parser.rs:316:9:318:57:FnValue:None",
          "duration": 2.819408524,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 316,
              "column": 9
            },
            "end": {
              "line": 318,
              "column": 57
            }
          },
          "replacement": "None",
          "status": "Killed",
          "description": "Replace FnValue by None",
          "statusReason": "thread 'append_empty_segment_then_mutate' panicked at url/tests/unit.rs:493:68:\ncalled `Result::unwrap()` on an `Err` value: RelativeUrlWithoutBase\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "append_empty_segment_then_mutate",
            "issue_61",
            "host",
            "issue_197",
            "issue_864",
            "test_equality",
            "test_authority",
            "test_has_authority",
            "parse_with_params",
            "test_file_with_drive_and_path",
            "issue_124",
            "no_panic",
            "test_non_special_path",
            "test_idna",
            "test_leading_dots",
            "pop_if_empty_in_bounds",
            "append_trailing_slash",
            "issue_241",
            "test_origin_unicode_serialization",
            "test_relative",
            "test_query",
            "test_relative_empty",
            "test_serialization",
            "test_fragment",
            "test_non_special_path3",
            "test_null_host_with_leading_empty_path_segment",
            "path_backslash_fun",
            "test_options_reuse",
            "test_no_base_url",
            "test_origin_opaque",
            "test_set_empty_host",
            "test_set_empty_hostname",
            "test_set_empty_query",
            "test_strip_trailing_spaces_from_opaque_path",
            "test_non_special_path2",
            "test_origin_blob_equality",
            "test_origin_hash",
            "extend_query_pairs_then_mutate",
            "test_make_relative",
            "test_set_scheme_to_file_with_host",
            "test_set_empty_username_and_password",
            "test_syntax_violation_callback_types",
            "test_set_href",
            "test_syntax_violation_callback_lifetimes",
            "test_socket_addrs",
            "test_slicing",
            "test_set_ip_host",
            "test_set_empty_password",
            "from_str",
            "test_syntax_violation_callback",
            "test_set_host",
            "test_domain",
            "host_serialization",
            "test_file_with_drive"
          ]
        },
        {
          "id": "url/src/parser.rs:437:46:437:48:BinaryOperator:!=",
          "duration": 4.1250464000000004,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 437,
              "column": 46
            },
            "end": {
              "line": 437,
              "column": 48
            }
          },
          "replacement": "!=",
          "status": "Survived",
          "description": "Replace BinaryOperator by !=",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1104:9:1124:30:FnValue:ParseResult::from_iter([(Some(1), Default::default())])",
          "duration": 1.0629040810000001,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1104,
              "column": 9
            },
            "end": {
              "line": 1124,
              "column": 30
            }
          },
          "replacement": "ParseResult::from_iter([(Some(1), Default::default())])",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from_iter([(Some(1), Default::default())])",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1436:9:1456:48:FnValue:ParseResult::from_iter([(Some(1), Some(1))])",
          "duration": 0.563707582,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1436,
              "column": 9
            },
            "end": {
              "line": 1456,
              "column": 48
            }
          },
          "replacement": "ParseResult::from_iter([(Some(1), Some(1))])",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from_iter([(Some(1), Some(1))])",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1048:42:1048:44:BinaryOperator:!=",
          "duration": 3.4313457880000002,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1048,
              "column": 42
            },
            "end": {
              "line": 1048,
              "column": 44
            }
          },
          "replacement": "!=",
          "status": "Killed",
          "description": "Replace BinaryOperator by !=",
          "statusReason": "thread 'test_leading_dots' panicked at url/tests/unit.rs:528:5:\nassertion `left == right` failed\n  left: None\n right: Some(\".\")\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_leading_dots",
            "test_syntax_violation_callback_types"
          ]
        },
        {
          "id": "url/src/parser.rs:502:9:704:10:FnValue:ParseResult::from(Default::default())",
          "duration": 0.254334962,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 502,
              "column": 9
            },
            "end": {
              "line": 704,
              "column": 10
            }
          },
          "replacement": "ParseResult::from(Default::default())",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from(Default::default())",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1436:9:1456:48:FnValue:ParseResult::from_iter([(Some(0), None)])",
          "duration": 0.304498332,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1436,
              "column": 9
            },
            "end": {
              "line": 1456,
              "column": 48
            }
          },
          "replacement": "ParseResult::from_iter([(Some(0), None)])",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from_iter([(Some(0), None)])",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1436:9:1456:48:FnValue:ParseResult::from_iter([(None, Some(1))])",
          "duration": 0.669420608,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1436,
              "column": 9
            },
            "end": {
              "line": 1456,
              "column": 48
            }
          },
          "replacement": "ParseResult::from_iter([(None, Some(1))])",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from_iter([(None, Some(1))])",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:910:33:910:35:BinaryOperator:/=",
          "duration": 1.456395728,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 910,
              "column": 33
            },
            "end": {
              "line": 910,
              "column": 35
            }
          },
          "replacement": "/=",
          "status": "Killed",
          "description": "Replace BinaryOperator by /=",
          "statusReason": "thread 'test_authority' panicked at url/src/parser.rs:909:49:\ncalled `Option::unwrap()` on a `None` value\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_authority",
            "test_non_special_path2",
            "test_non_special_path",
            "test_non_special_path3",
            "test_origin_hash",
            "test_origin_unicode_serialization",
            "test_set_empty_host",
            "test_set_empty_hostname",
            "test_set_empty_password",
            "test_set_empty_username_and_password",
            "test_serialization",
            "test_set_href",
            "test_slicing",
            "test_syntax_violation_callback_types"
          ]
        },
        {
          "id": "url/src/parser.rs:571:51:571:53:BinaryOperator:!=",
          "duration": 4.368841419000001,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 571,
              "column": 51
            },
            "end": {
              "line": 571,
              "column": 53
            }
          },
          "replacement": "!=",
          "status": "Survived",
          "description": "Replace BinaryOperator by !=",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:944:9:968:53:FnValue:ParseResult::new((1, Default::default(), None, Default::default()))",
          "duration": 0.719849686,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 944,
              "column": 9
            },
            "end": {
              "line": 968,
              "column": 53
            }
          },
          "replacement": "ParseResult::new((1, Default::default(), None, Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new((1, Default::default(), None, Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:975:9:1025:26:FnValue:ParseResult::from_iter([(Host::from(String::new()), Default::default())])",
          "duration": 0.516774602,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 975,
              "column": 9
            },
            "end": {
              "line": 1025,
              "column": 26
            }
          },
          "replacement": "ParseResult::from_iter([(Host::from(String::new()), Default::default())])",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from_iter([(Host::from(String::new()), Default::default())])",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1518:18:1518:20:BinaryOperator:!=",
          "duration": 4.609270072,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1518,
              "column": 18
            },
            "end": {
              "line": 1518,
              "column": 20
            }
          },
          "replacement": "!=",
          "status": "Survived",
          "description": "Replace BinaryOperator by !=",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:451:25:451:27:BinaryOperator:==",
          "duration": 2.519008747,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 451,
              "column": 25
            },
            "end": {
              "line": 451,
              "column": 27
            }
          },
          "replacement": "==",
          "status": "Killed",
          "description": "Replace BinaryOperator by ==",
          "statusReason": "thread 'test_options_reuse' panicked at url/tests/unit.rs:914:5:\nassertion `left == right` failed\n  left: [Backslash]\n right: [ExpectedDoubleSlash, Backslash]\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_options_reuse",
            "test_syntax_violation_callback_lifetimes",
            "test_syntax_violation_callback_types",
            "test_syntax_violation_callback"
          ]
        },
        {
          "id": "url/src/parser.rs:571:26:571:28:BinaryOperator:!=",
          "duration": 4.29280342,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 571,
              "column": 26
            },
            "end": {
              "line": 571,
              "column": 28
            }
          },
          "replacement": "!=",
          "status": "Survived",
          "description": "Replace BinaryOperator by !=",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1619:5:1622:83:FnValue:false",
          "duration": 2.874318531,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1619,
              "column": 5
            },
            "end": {
              "line": 1622,
              "column": 83
            }
          },
          "replacement": "false",
          "status": "Killed",
          "description": "Replace FnValue by false",
          "statusReason": "thread 'test_file_with_drive' panicked at url/tests/unit.rs:1286:9:\nassertion `left == right` failed\n  left: \"file:///a\"\n right: \"file:///p:/a\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_file_with_drive",
            "test_syntax_violation_callback_types"
          ]
        },
        {
          "id": "url/src/parser.rs:1041:9:1059:40:FnValue:ParseResult::new((true, Default::default(), Default::default()))",
          "duration": 0.509105285,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1041,
              "column": 9
            },
            "end": {
              "line": 1059,
              "column": 40
            }
          },
          "replacement": "ParseResult::new((true, Default::default(), Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new((true, Default::default(), Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1346:65:1346:67:BinaryOperator:!=",
          "duration": 2.4153692110000002,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1346,
              "column": 65
            },
            "end": {
              "line": 1346,
              "column": 67
            }
          },
          "replacement": "!=",
          "status": "Killed",
          "description": "Replace BinaryOperator by !=",
          "statusReason": "thread 'test_strip_trailing_spaces_from_opaque_path' panicked at url/tests/unit.rs:41:5:\nassertion `left == right` failed\n  left: \"data:space   ?query\"\n right: \"data:space\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_strip_trailing_spaces_from_opaque_path"
          ]
        },
        {
          "id": "url/src/parser.rs:944:9:968:53:FnValue:ParseResult::from_iter([(0, Default::default(), Some(1), Default::default())])",
          "duration": 0.512412139,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 944,
              "column": 9
            },
            "end": {
              "line": 968,
              "column": 53
            }
          },
          "replacement": "ParseResult::from_iter([(0, Default::default(), Some(1), Default::default())])",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from_iter([(0, Default::default(), Some(1), Default::default())])",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:714:9:825:10:FnValue:ParseResult::new()",
          "duration": 0.201707811,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 714,
              "column": 9
            },
            "end": {
              "line": 825,
              "column": 10
            }
          },
          "replacement": "ParseResult::new()",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new()",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1436:9:1456:48:FnValue:ParseResult::from((Some(0), Some(0)))",
          "duration": 0.816315983,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1436,
              "column": 9
            },
            "end": {
              "line": 1456,
              "column": 48
            }
          },
          "replacement": "ParseResult::from((Some(0), Some(0)))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from((Some(0), Some(0)))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:364:9:385:10:FnValue:ParseResult::from_iter([Default::default()])",
          "duration": 1.120507813,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 364,
              "column": 9
            },
            "end": {
              "line": 385,
              "column": 10
            }
          },
          "replacement": "ParseResult::from_iter([Default::default()])",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from_iter([Default::default()])",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1436:9:1456:48:FnValue:ParseResult::new((Some(1), Some(0)))",
          "duration": 0.512185917,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1436,
              "column": 9
            },
            "end": {
              "line": 1456,
              "column": 48
            }
          },
          "replacement": "ParseResult::new((Some(1), Some(0)))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new((Some(1), Some(0)))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:292:9:292:35:FnValue:false",
          "duration": 2.671483367,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 292,
              "column": 9
            },
            "end": {
              "line": 292,
              "column": 35
            }
          },
          "replacement": "false",
          "status": "Killed",
          "description": "Replace FnValue by false",
          "statusReason": "thread 'extend_query_pairs_then_mutate' panicked at url/tests/unit.rs:478:5:\nassertion `left == right` failed\n  left: \"http://localhost/:6767/foo/bar?auth=my-token\"\n right: \"http://localhost:6767/foo/bar?auth=my-token\"\n",
          "killedBy": [
            "extend_query_pairs_then_mutate",
            "append_empty_segment_then_mutate",
            "append_trailing_slash",
            "test_authority",
            "test_equality",
            "test_make_relative",
            "test_origin_unicode_serialization",
            "test_set_scheme_to_file_with_host",
            "test_slicing",
            "test_socket_addrs",
            "test_syntax_violation_callback",
            "test_syntax_violation_callback_lifetimes"
          ]
        },
        {
          "id": "url/src/parser.rs:467:9:493:10:FnValue:ParseResult::new(Default::default())",
          "duration": 0.251961471,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 467,
              "column": 9
            },
            "end": {
              "line": 493,
              "column": 10
            }
          },
          "replacement": "ParseResult::new(Default::default())",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new(Default::default())",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1017:24:1017:26:BinaryOperator:!=",
          "duration": 1.520034166,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1017,
              "column": 24
            },
            "end": {
              "line": 1017,
              "column": 26
            }
          },
          "replacement": "!=",
          "status": "Killed",
          "description": "Replace BinaryOperator by !=",
          "statusReason": "thread 'no_panic' panicked at url/tests/unit.rs:990:79:\ncalled `Result::unwrap()` on an `Err` value: ()\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "no_panic",
            "pop_if_empty_in_bounds",
            "test_set_empty_hostname"
          ]
        },
        {
          "id": "url/src/parser.rs:1388:28:1388:30:BinaryOperator:-=",
          "duration": 0.9170869119999999,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1388,
              "column": 28
            },
            "end": {
              "line": 1388,
              "column": 30
            }
          },
          "replacement": "-=",
          "status": "Killed",
          "description": "Replace BinaryOperator by -=",
          "statusReason": "thread 'no_panic' panicked at url/src/lib.rs:2020:13:\nattempt to subtract with overflow\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "no_panic"
          ]
        },
        {
          "id": "url/src/parser.rs:1159:30:1159:32:BinaryOperator:||",
          "duration": 1.780682473,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1159,
              "column": 30
            },
            "end": {
              "line": 1159,
              "column": 32
            }
          },
          "replacement": "||",
          "status": "Killed",
          "description": "Replace BinaryOperator by ||",
          "statusReason": "thread 'test_non_special_path' panicked at url/tests/unit.rs:946:5:\nassertion `left == right` failed\n  left: \"postgres://postgres@localhost//\"\n right: \"postgres://postgres@localhost/\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_non_special_path",
            "test_non_special_path2",
            "test_non_special_path3",
            "test_relative_empty",
            "test_set_empty_host",
            "test_set_empty_hostname",
            "test_set_empty_password",
            "test_set_empty_query",
            "test_set_empty_username_and_password",
            "test_set_host"
          ]
        },
        {
          "id": "url/src/parser.rs:1436:9:1456:48:FnValue:ParseResult::from_iter([(Some(0), Some(0))])",
          "duration": 0.151558467,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1436,
              "column": 9
            },
            "end": {
              "line": 1456,
              "column": 48
            }
          },
          "replacement": "ParseResult::from_iter([(Some(0), Some(0))])",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from_iter([(Some(0), Some(0))])",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:975:9:1025:26:FnValue:ParseResult::new((Host::new(String::new()), Default::default()))",
          "duration": 0.202308593,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 975,
              "column": 9
            },
            "end": {
              "line": 1025,
              "column": 26
            }
          },
          "replacement": "ParseResult::new((Host::new(String::new()), Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new((Host::new(String::new()), Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1001:40:1001:42:BinaryOperator:*=",
          "duration": 0.709754412,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1001,
              "column": 40
            },
            "end": {
              "line": 1001,
              "column": 42
            }
          },
          "replacement": "*=",
          "status": "Killed",
          "description": "Replace BinaryOperator by *=",
          "statusReason": "thread 'append_empty_segment_then_mutate' panicked at url/tests/unit.rs:494:28:\ncalled `Result::unwrap()` on an `Err` value: \"\\\"http://localhost/localhost:6767/foo/bar?a=b\\\" != \\\"http://localhost/localhost/localhost:6767/foo/bar?a=b\\\" (&self.serialization != &other.serialization) for URL \\\"http://localhost/localhost:6767/foo/bar?a=b\\\"\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "append_empty_segment_then_mutate",
            "test_non_special_path2",
            "test_non_special_path3",
            "test_make_relative",
            "test_origin_unicode_serialization",
            "test_relative_empty",
            "test_serialization",
            "test_set_empty_host",
            "test_set_empty_hostname",
            "test_non_special_path",
            "extend_query_pairs_then_mutate",
            "issue_61",
            "path_backslash_fun",
            "test_syntax_violation_callback_lifetimes",
            "test_set_empty_query",
            "test_syntax_violation_callback",
            "test_slicing",
            "append_trailing_slash",
            "host_serialization",
            "test_equality",
            "test_authority",
            "test_socket_addrs",
            "test_set_scheme_to_file_with_host",
            "test_syntax_violation_callback_types",
            "test_set_empty_password",
            "parse_with_params",
            "host",
            "test_set_empty_username_and_password",
            "test_set_host"
          ]
        },
        {
          "id": "url/src/parser.rs:1029:9:1034:30:FnValue:ParseResult::from_iter([(Host::new(), Default::default())])",
          "duration": 0.454103183,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1029,
              "column": 9
            },
            "end": {
              "line": 1034,
              "column": 30
            }
          },
          "replacement": "ParseResult::from_iter([(Host::new(), Default::default())])",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from_iter([(Host::new(), Default::default())])",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:834:9:860:10:FnValue:ParseResult::from(Default::default())",
          "duration": 0.904765773,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 834,
              "column": 9
            },
            "end": {
              "line": 860,
              "column": 10
            }
          },
          "replacement": "ParseResult::from(Default::default())",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from(Default::default())",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1065:9:1093:52:FnValue:ParseResult::new((false, \"xyzzy\".into(), Default::default()))",
          "duration": 0.416153532,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1065,
              "column": 9
            },
            "end": {
              "line": 1093,
              "column": 52
            }
          },
          "replacement": "ParseResult::new((false, \"xyzzy\".into(), Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new((false, \"xyzzy\".into(), Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1029:9:1034:30:FnValue:ParseResult::from((Host::new(String::new()), Default::default()))",
          "duration": 0.15153303,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1029,
              "column": 9
            },
            "end": {
              "line": 1034,
              "column": 30
            }
          },
          "replacement": "ParseResult::from((Host::new(String::new()), Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from((Host::new(String::new()), Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1436:9:1456:48:FnValue:ParseResult::new((None, Some(0)))",
          "duration": 0.202533072,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1436,
              "column": 9
            },
            "end": {
              "line": 1456,
              "column": 48
            }
          },
          "replacement": "ParseResult::new((None, Some(0)))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new((None, Some(0)))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1029:9:1034:30:FnValue:ParseResult::new((Host::new(String::new()), Default::default()))",
          "duration": 0.352032126,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1029,
              "column": 9
            },
            "end": {
              "line": 1034,
              "column": 30
            }
          },
          "replacement": "ParseResult::new((Host::new(String::new()), Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new((Host::new(String::new()), Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1598:5:1598:70:FnValue:false",
          "duration": 1.2233518330000002,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1598,
              "column": 5
            },
            "end": {
              "line": 1598,
              "column": 70
            }
          },
          "replacement": "false",
          "status": "Killed",
          "description": "Replace FnValue by false",
          "statusReason": "thread 'test_file_with_drive' panicked at url/tests/unit.rs:1286:9:\nassertion `left == right` failed\n  left: \"file:///a\"\n right: \"file:///p:/a\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_file_with_drive"
          ]
        },
        {
          "id": "url/src/parser.rs:1150:40:1150:42:BinaryOperator:&&",
          "duration": 4.03518709,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1150,
              "column": 40
            },
            "end": {
              "line": 1150,
              "column": 42
            }
          },
          "replacement": "&&",
          "status": "Survived",
          "description": "Replace BinaryOperator by &&",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1261:42:1261:44:BinaryOperator:!=",
          "duration": 2.2282515099999998,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1261,
              "column": 42
            },
            "end": {
              "line": 1261,
              "column": 44
            }
          },
          "replacement": "!=",
          "status": "Killed",
          "description": "Replace BinaryOperator by !=",
          "statusReason": "thread 'test_file_with_drive_and_path' panicked at url/tests/unit.rs:1296:5:\nassertion `left == right` failed\n  left: \"file:///p:/x:?../\"\n right: \"file:///p:/x|?../\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_file_with_drive_and_path",
            "test_syntax_violation_callback_types"
          ]
        },
        {
          "id": "url/src/parser.rs:1029:9:1034:30:FnValue:ParseResult::from_iter([(Host::new(String::new()), Default::default())])",
          "duration": 0.680424602,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1029,
              "column": 9
            },
            "end": {
              "line": 1034,
              "column": 30
            }
          },
          "replacement": "ParseResult::from_iter([(Host::new(String::new()), Default::default())])",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from_iter([(Host::new(String::new()), Default::default())])",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:908:35:908:36:BinaryOperator:<",
          "duration": 2.013590829,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 908,
              "column": 35
            },
            "end": {
              "line": 908,
              "column": 36
            }
          },
          "replacement": "<",
          "status": "Killed",
          "description": "Replace BinaryOperator by <",
          "statusReason": "thread 'test_authority' panicked at url/tests/unit.rs:1248:5:\nassertion `left == right` failed\n  left: \"127.0.0.1:2121\"\n right: \"user@127.0.0.1:2121\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_authority",
            "test_non_special_path",
            "test_non_special_path3",
            "test_non_special_path2",
            "test_set_empty_host",
            "test_set_empty_hostname",
            "test_set_empty_password",
            "test_set_empty_username_and_password",
            "test_serialization",
            "test_slicing"
          ]
        },
        {
          "id": "url/src/parser.rs:1029:9:1034:30:FnValue:ParseResult::new((Host::from(String::new()), Default::default()))",
          "duration": 0.315071851,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1029,
              "column": 9
            },
            "end": {
              "line": 1034,
              "column": 30
            }
          },
          "replacement": "ParseResult::new((Host::from(String::new()), Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new((Host::from(String::new()), Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1246:40:1246:42:BinaryOperator:||",
          "duration": 1.4100090610000002,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1246,
              "column": 40
            },
            "end": {
              "line": 1246,
              "column": 42
            }
          },
          "replacement": "||",
          "status": "Killed",
          "description": "Replace BinaryOperator by ||",
          "statusReason": "thread 'test_file_with_drive' panicked at url/tests/unit.rs:1286:9:\nassertion `left == right` failed\n  left: \"file:///p://\"\n right: \"file:///p:/\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_file_with_drive",
            "test_make_relative"
          ]
        },
        {
          "id": "url/src/parser.rs:1041:9:1059:40:FnValue:ParseResult::from_iter([(false, Default::default(), Default::default())])",
          "duration": 0.3020111,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1041,
              "column": 9
            },
            "end": {
              "line": 1059,
              "column": 40
            }
          },
          "replacement": "ParseResult::from_iter([(false, Default::default(), Default::default())])",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from_iter([(false, Default::default(), Default::default())])",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:292:9:292:35:FnValue:true",
          "duration": 2.560728031,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 292,
              "column": 9
            },
            "end": {
              "line": 292,
              "column": 35
            }
          },
          "replacement": "true",
          "status": "Killed",
          "description": "Replace FnValue by true",
          "statusReason": "thread 'test_equality' panicked at url/tests/unit.rs:267:28:\ncalled `Result::unwrap()` on an `Err` value: InvalidPort\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_equality",
            "append_empty_segment_then_mutate",
            "test_make_relative",
            "test_no_base_url",
            "test_null_host_with_leading_empty_path_segment",
            "test_options_reuse",
            "test_origin_blob_equality",
            "test_origin_hash",
            "test_origin_unicode_serialization",
            "test_relative",
            "test_relative_empty",
            "test_set_href",
            "test_file_with_drive",
            "test_slicing",
            "test_set_scheme_to_file_with_host",
            "test_file_with_drive_and_path",
            "append_trailing_slash",
            "test_syntax_violation_callback_lifetimes",
            "test_strip_trailing_spaces_from_opaque_path",
            "test_syntax_violation_callback",
            "test_socket_addrs",
            "test_authority",
            "extend_query_pairs_then_mutate"
          ]
        },
        {
          "id": "url/src/parser.rs:231:9:231:38:FnValue:true",
          "duration": 4.033601533,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 231,
              "column": 9
            },
            "end": {
              "line": 231,
              "column": 38
            }
          },
          "replacement": "true",
          "status": "Killed",
          "description": "Replace FnValue by true",
          "statusReason": "thread 'test_file_with_drive_and_path' panicked at url/tests/unit.rs:1295:35:\ncalled `Result::unwrap()` on an `Err` value: RelativeUrlWithoutBase\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_file_with_drive_and_path",
            "issue_61",
            "no_panic",
            "append_trailing_slash",
            "extend_query_pairs_then_mutate",
            "parse_with_params",
            "issue_124",
            "issue_864",
            "path_backslash_fun",
            "pop_if_empty_in_bounds",
            "test_domain",
            "host_serialization",
            "host",
            "from_str",
            "test_equality",
            "test_file_with_drive",
            "test_idna",
            "test_has_authority",
            "append_empty_segment_then_mutate",
            "issue_197",
            "test_authority",
            "issue_241",
            "test_non_special_path",
            "test_fragment",
            "test_origin_opaque",
            "test_no_base_url",
            "test_query",
            "test_relative_empty",
            "test_leading_dots",
            "test_origin_unicode_serialization",
            "test_make_relative",
            "test_non_special_path2",
            "test_set_ip_host",
            "test_non_special_path3",
            "test_relative",
            "test_set_scheme_to_file_with_host",
            "test_serialization",
            "test_strip_trailing_spaces_from_opaque_path",
            "test_origin_blob_equality",
            "test_slicing",
            "test_syntax_violation_callback",
            "test_origin_hash",
            "test_socket_addrs",
            "test_set_empty_username_and_password",
            "test_options_reuse",
            "test_set_empty_query",
            "test_set_href",
            "test_syntax_violation_callback_lifetimes",
            "test_syntax_violation_callback_types",
            "test_set_empty_host",
            "test_null_host_with_leading_empty_path_segment",
            "test_set_host",
            "test_set_empty_hostname",
            "test_set_empty_password"
          ]
        },
        {
          "id": "url/src/parser.rs:1497:9:1513:11:FnValue:ParseResult::from_iter([Default::default()])",
          "duration": 0.4029471,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1497,
              "column": 9
            },
            "end": {
              "line": 1513,
              "column": 11
            }
          },
          "replacement": "ParseResult::from_iter([Default::default()])",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from_iter([Default::default()])",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:415:9:456:10:FnValue:ParseResult::from_iter([Default::default()])",
          "duration": 0.508949426,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 415,
              "column": 9
            },
            "end": {
              "line": 456,
              "column": 10
            }
          },
          "replacement": "ParseResult::from_iter([Default::default()])",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from_iter([Default::default()])",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1029:9:1034:30:FnValue:ParseResult::from((Host::from(\"xyzzy\".into()), Default::default()))",
          "duration": 0.211616439,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1029,
              "column": 9
            },
            "end": {
              "line": 1034,
              "column": 30
            }
          },
          "replacement": "ParseResult::from((Host::from(\"xyzzy\".into()), Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from((Host::from(\"xyzzy\".into()), Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1335:17:1335:19:BinaryOperator:||",
          "duration": 2.122394246,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1335,
              "column": 17
            },
            "end": {
              "line": 1335,
              "column": 19
            }
          },
          "replacement": "||",
          "status": "Killed",
          "description": "Replace BinaryOperator by ||",
          "statusReason": "thread 'test_file_with_drive_and_path' panicked at url/tests/unit.rs:1300:5:\nassertion `left == right` failed\n  left: \"file:///p:/x|a\"\n right: \"file:///p:/a\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_file_with_drive_and_path"
          ]
        },
        {
          "id": "url/src/parser.rs:188:9:190:10:FnValue:Default::default()",
          "duration": 0.466650165,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 188,
              "column": 9
            },
            "end": {
              "line": 190,
              "column": 10
            }
          },
          "replacement": "Default::default()",
          "status": "CompileError",
          "description": "Replace FnValue by Default::default()",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1598:63:1598:65:BinaryOperator:!=",
          "duration": 1.8680954920000001,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1598,
              "column": 63
            },
            "end": {
              "line": 1598,
              "column": 65
            }
          },
          "replacement": "!=",
          "status": "Killed",
          "description": "Replace BinaryOperator by !=",
          "statusReason": "thread 'test_file_with_drive_and_path' panicked at url/tests/unit.rs:1300:5:\nassertion `left == right` failed\n  left: \"file:///p:/x|a\"\n right: \"file:///p:/a\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_file_with_drive_and_path",
            "test_file_with_drive"
          ]
        },
        {
          "id": "url/src/parser.rs:915:40:915:41:BinaryOperator:==",
          "duration": 2.5407491789999996,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 915,
              "column": 40
            },
            "end": {
              "line": 915,
              "column": 41
            }
          },
          "replacement": "==",
          "status": "Killed",
          "description": "Replace BinaryOperator by ==",
          "statusReason": "thread 'test_set_empty_host' panicked at url/tests/unit.rs:52:5:\nassertion `left == right` failed\n  left: \"moz://bar@servo/baz\"\n right: \"moz://:bar@servo/baz\"\n",
          "killedBy": [
            "test_set_empty_host",
            "test_set_empty_hostname",
            "test_authority",
            "test_serialization",
            "test_set_empty_password",
            "test_set_empty_username_and_password",
            "test_slicing"
          ]
        },
        {
          "id": "url/src/parser.rs:389:9:411:10:FnValue:Ok(Default::default())",
          "duration": 0.910466497,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 389,
              "column": 9
            },
            "end": {
              "line": 411,
              "column": 10
            }
          },
          "replacement": "Ok(Default::default())",
          "status": "CompileError",
          "description": "Replace FnValue by Ok(Default::default())",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1174:9:1296:14:FnValue:Default::default()",
          "duration": 0.207995119,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1174,
              "column": 9
            },
            "end": {
              "line": 1296,
              "column": 14
            }
          },
          "replacement": "Default::default()",
          "status": "CompileError",
          "description": "Replace FnValue by Default::default()",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1632:57:1632:59:BinaryOperator:||",
          "duration": 2.113698374,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1632,
              "column": 57
            },
            "end": {
              "line": 1632,
              "column": 59
            }
          },
          "replacement": "||",
          "status": "Killed",
          "description": "Replace BinaryOperator by ||",
          "statusReason": "thread 'test_file_with_drive' panicked at url/tests/unit.rs:1286:9:\nassertion `left == right` failed\n  left: \"file:///\"\n right: \"file:///p:/\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_file_with_drive"
          ]
        },
        {
          "id": "url/src/parser.rs:1300:9:1308:10:FnValue:false",
          "duration": 1.810696004,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1300,
              "column": 9
            },
            "end": {
              "line": 1308,
              "column": 10
            }
          },
          "replacement": "false",
          "status": "Killed",
          "description": "Replace FnValue by false",
          "statusReason": "thread 'test_make_relative' panicked at url/tests/unit.rs:1198:9:\nassertion `left == right` failed: base: http://127.0.0.1:8080/test/, uri: http://127.0.0.1:8080/test, relative: ../test\n  left: \"http://127.0.0.1:8080/test/test\"\n right: \"http://127.0.0.1:8080/test\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_make_relative"
          ]
        },
        {
          "id": "url/src/parser.rs:1382:55:1382:56:BinaryOperator:*",
          "duration": 1.4919966409999998,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1382,
              "column": 55
            },
            "end": {
              "line": 1382,
              "column": 56
            }
          },
          "replacement": "*",
          "status": "Killed",
          "description": "Replace BinaryOperator by *",
          "statusReason": "thread 'test_null_host_with_leading_empty_path_segment' panicked at url/tests/unit.rs:999:40:\ncalled `Result::unwrap()` on an `Err` value: InvalidDomainCharacter\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_null_host_with_leading_empty_path_segment"
          ]
        },
        {
          "id": "url/src/parser.rs:1380:9:1426:11:FnValue:ParseResult::new(Default::default())",
          "duration": 0.204160992,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1380,
              "column": 9
            },
            "end": {
              "line": 1426,
              "column": 11
            }
          },
          "replacement": "ParseResult::new(Default::default())",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new(Default::default())",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1261:25:1261:27:BinaryOperator:||",
          "duration": 2.771321866,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1261,
              "column": 25
            },
            "end": {
              "line": 1261,
              "column": 27
            }
          },
          "replacement": "||",
          "status": "Killed",
          "description": "Replace BinaryOperator by ||",
          "statusReason": "thread 'issue_124' panicked at url/tests/unit.rs:244:5:\nassertion `left == right` failed\n  left: \"/a:\"\n right: \"/a\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "issue_124",
            "test_file_with_drive",
            "test_file_with_drive_and_path",
            "test_leading_dots",
            "test_set_empty_host"
          ]
        },
        {
          "id": "url/src/parser.rs:1261:56:1261:57:BinaryOperator:*",
          "duration": 2.823194366,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1261,
              "column": 56
            },
            "end": {
              "line": 1261,
              "column": 57
            }
          },
          "replacement": "*",
          "status": "Killed",
          "description": "Replace BinaryOperator by *",
          "statusReason": "thread 'test_syntax_violation_callback_types' panicked at url/tests/unit.rs:896:9:\nassertion `left == right` failed\n  left: None\n right: Some(FileWithHostAndWindowsDrive)\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_syntax_violation_callback_types"
          ]
        },
        {
          "id": "url/src/parser.rs:944:9:968:53:FnValue:ParseResult::from((0, Default::default(), Some(0), Default::default()))",
          "duration": 0.251994373,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 944,
              "column": 9
            },
            "end": {
              "line": 968,
              "column": 53
            }
          },
          "replacement": "ParseResult::from((0, Default::default(), Some(0), Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from((0, Default::default(), Some(0), Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1213:41:1213:43:BinaryOperator:!=",
          "duration": 0.654198055,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1213,
              "column": 41
            },
            "end": {
              "line": 1213,
              "column": 43
            }
          },
          "replacement": "!=",
          "status": "Killed",
          "description": "Replace BinaryOperator by !=",
          "statusReason": "thread 'path_backslash_fun' panicked at url/tests/unit.rs:215:5:\nassertion `left == right` failed\n  left: \"http://foobar.com/foo\\\\bar\"\n right: \"http://foobar.com/foo%5Cbar\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "path_backslash_fun"
          ]
        },
        {
          "id": "url/src/parser.rs:869:9:935:38:FnValue:ParseResult::from((1, Default::default()))",
          "duration": 0.201585634,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 869,
              "column": 9
            },
            "end": {
              "line": 935,
              "column": 38
            }
          },
          "replacement": "ParseResult::from((1, Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from((1, Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1314:37:1314:39:BinaryOperator:!=",
          "duration": 1.024624308,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1314,
              "column": 37
            },
            "end": {
              "line": 1314,
              "column": 39
            }
          },
          "replacement": "!=",
          "status": "Killed",
          "description": "Replace BinaryOperator by !=",
          "statusReason": "thread 'test_file_with_drive_and_path' panicked at url/tests/unit.rs:1300:5:\nassertion `left == right` failed\n  left: \"file:///p:/x|a\"\n right: \"file:///p:/a\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_file_with_drive_and_path",
            "test_make_relative"
          ]
        },
        {
          "id": "url/src/parser.rs:1041:9:1059:40:FnValue:ParseResult::from((true, Default::default(), Default::default()))",
          "duration": 1.269892616,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1041,
              "column": 9
            },
            "end": {
              "line": 1059,
              "column": 40
            }
          },
          "replacement": "ParseResult::from((true, Default::default(), Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from((true, Default::default(), Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1150:27:1150:29:BinaryOperator:!=",
          "duration": 3.2188463890000003,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1150,
              "column": 27
            },
            "end": {
              "line": 1150,
              "column": 29
            }
          },
          "replacement": "!=",
          "status": "Killed",
          "description": "Replace BinaryOperator by !=",
          "statusReason": "thread 'test_authority' panicked at url/src/parser.rs:1450:18:\nProgramming error. parse_query_and_fragment() called without ? or #\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_authority",
            "test_set_empty_host",
            "test_non_special_path3",
            "test_set_empty_hostname",
            "test_set_empty_query",
            "test_non_special_path2",
            "test_non_special_path",
            "test_set_empty_password",
            "test_socket_addrs",
            "test_set_host",
            "test_set_empty_username_and_password"
          ]
        },
        {
          "id": "url/src/parser.rs:1469:25:1469:27:BinaryOperator:||",
          "duration": 3.335252678,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1469,
              "column": 25
            },
            "end": {
              "line": 1469,
              "column": 27
            }
          },
          "replacement": "||",
          "status": "Killed",
          "description": "Replace BinaryOperator by ||",
          "statusReason": "thread 'parse_with_params' panicked at url/tests/unit.rs:235:5:\nassertion `left == right` failed\n  left: \"http://testing.com/this?lang=rust#ont=clobberme\"\n right: \"http://testing.com/this?dont=clobberme&lang=rust\"\n",
          "killedBy": [
            "parse_with_params",
            "test_file_with_drive_and_path",
            "append_empty_segment_then_mutate",
            "extend_query_pairs_then_mutate",
            "append_trailing_slash",
            "test_file_with_drive",
            "test_make_relative",
            "test_serialization",
            "test_set_empty_query",
            "test_query",
            "test_slicing",
            "test_strip_trailing_spaces_from_opaque_path"
          ]
        },
        {
          "id": "url/src/parser.rs:975:9:1025:26:FnValue:ParseResult::from((Host::from(\"xyzzy\".into()), Default::default()))",
          "duration": 0.660588354,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 975,
              "column": 9
            },
            "end": {
              "line": 1025,
              "column": 26
            }
          },
          "replacement": "ParseResult::from((Host::from(\"xyzzy\".into()), Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from((Host::from(\"xyzzy\".into()), Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1104:9:1124:30:FnValue:ParseResult::new((None, Default::default()))",
          "duration": 0.819724047,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1104,
              "column": 9
            },
            "end": {
              "line": 1124,
              "column": 30
            }
          },
          "replacement": "ParseResult::new((None, Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new((None, Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1469:18:1469:20:BinaryOperator:!=",
          "duration": 1.682285419,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1469,
              "column": 18
            },
            "end": {
              "line": 1469,
              "column": 20
            }
          },
          "replacement": "!=",
          "status": "Killed",
          "description": "Replace BinaryOperator by !=",
          "statusReason": "thread 'extend_query_pairs_then_mutate' panicked at url/tests/unit.rs:477:28:\ncalled `Result::unwrap()` on an `Err` value: \"\\\"http://localhost:6767/foo/bar?auth=my-token\\\" != \\\"http://localhost:6767/foo/bar?#uth=my-token\\\" (&self.serialization != &other.serialization) for URL \\\"http://localhost:6767/foo/bar?auth=my-token\\\"\"\n",
          "killedBy": [
            "extend_query_pairs_then_mutate",
            "append_trailing_slash",
            "parse_with_params",
            "test_file_with_drive_and_path",
            "append_empty_segment_then_mutate",
            "test_query",
            "test_file_with_drive",
            "test_set_empty_query",
            "test_make_relative",
            "test_slicing",
            "test_serialization",
            "test_strip_trailing_spaces_from_opaque_path"
          ]
        },
        {
          "id": "url/src/parser.rs:298:9:303:13:FnValue:true",
          "duration": 1.322248499,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 298,
              "column": 9
            },
            "end": {
              "line": 303,
              "column": 13
            }
          },
          "replacement": "true",
          "status": "Killed",
          "description": "Replace FnValue by true",
          "statusReason": "thread 'issue_241' panicked at url/tests/unit.rs:458:27:\ncalled `Result::unwrap()` on an `Err` value: EmptyHost\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "issue_241",
            "test_authority",
            "test_domain",
            "test_no_base_url",
            "test_make_relative",
            "no_panic",
            "test_has_authority",
            "test_set_empty_hostname",
            "test_relative",
            "path_backslash_fun",
            "pop_if_empty_in_bounds",
            "test_relative_empty",
            "test_null_host_with_leading_empty_path_segment",
            "test_set_empty_username_and_password",
            "test_non_special_path2",
            "test_origin_blob_equality",
            "test_non_special_path3",
            "test_set_empty_host",
            "test_slicing",
            "test_non_special_path",
            "test_set_empty_password",
            "test_set_empty_query",
            "test_set_host",
            "test_socket_addrs",
            "test_syntax_violation_callback_types",
            "test_strip_trailing_spaces_from_opaque_path"
          ]
        },
        {
          "id": "url/src/parser.rs:1029:9:1034:30:FnValue:ParseResult::from_iter([(Host::from_iter([\"xyzzy\".into()]), Default::default())])",
          "duration": 1.024407063,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1029,
              "column": 9
            },
            "end": {
              "line": 1034,
              "column": 30
            }
          },
          "replacement": "ParseResult::from_iter([(Host::from_iter([\"xyzzy\".into()]), Default::default())])",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from_iter([(Host::from_iter([\"xyzzy\".into()]), Default::default())])",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:309:9:309:41:FnValue:true",
          "duration": 4.028568797,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 309,
              "column": 9
            },
            "end": {
              "line": 309,
              "column": 41
            }
          },
          "replacement": "true",
          "status": "Survived",
          "description": "Replace FnValue by true",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:173:5:178:6:FnValue:Some(0)",
          "duration": 2.9666929109999995,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 173,
              "column": 5
            },
            "end": {
              "line": 178,
              "column": 6
            }
          },
          "replacement": "Some(0)",
          "status": "Killed",
          "description": "Replace FnValue by Some(0)",
          "statusReason": "thread 'issue_61' panicked at url/tests/unit.rs:437:5:\nassertion `left == right` failed\n  left: Some(0)\n right: Some(443)\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "issue_61",
            "test_authority",
            "test_equality",
            "test_socket_addrs"
          ]
        },
        {
          "id": "url/src/parser.rs:1598:38:1598:40:BinaryOperator:||",
          "duration": 2.9203168699999997,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1598,
              "column": 38
            },
            "end": {
              "line": 1598,
              "column": 40
            }
          },
          "replacement": "||",
          "status": "Killed",
          "description": "Replace BinaryOperator by ||",
          "statusReason": "thread 'issue_124' panicked at url/src/parser.rs:1598:76:\nindex out of bounds: the len is 0 but the index is 1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "issue_124",
            "test_authority",
            "test_file_with_drive",
            "test_file_with_drive_and_path",
            "test_has_authority",
            "test_leading_dots",
            "test_set_empty_host",
            "test_syntax_violation_callback_types"
          ]
        },
        {
          "id": "url/src/parser.rs:1408:28:1408:30:BinaryOperator:/=",
          "duration": 4.039848513,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1408,
              "column": 28
            },
            "end": {
              "line": 1408,
              "column": 30
            }
          },
          "replacement": "/=",
          "status": "Survived",
          "description": "Replace BinaryOperator by /=",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:869:9:935:38:FnValue:ParseResult::from_iter([(0, Default::default())])",
          "duration": 0.355037597,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 869,
              "column": 9
            },
            "end": {
              "line": 935,
              "column": 38
            }
          },
          "replacement": "ParseResult::from_iter([(0, Default::default())])",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from_iter([(0, Default::default())])",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1380:9:1426:11:FnValue:ParseResult::new()",
          "duration": 0.82266661,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1380,
              "column": 9
            },
            "end": {
              "line": 1426,
              "column": 11
            }
          },
          "replacement": "ParseResult::new()",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new()",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1261:56:1261:57:BinaryOperator:-",
          "duration": 2.137544813,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1261,
              "column": 56
            },
            "end": {
              "line": 1261,
              "column": 57
            }
          },
          "replacement": "-",
          "status": "Killed",
          "description": "Replace BinaryOperator by -",
          "statusReason": "thread 'test_syntax_violation_callback_types' panicked at url/tests/unit.rs:896:9:\nassertion `left == right` failed\n  left: None\n right: Some(FileWithHostAndWindowsDrive)\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_syntax_violation_callback_types"
          ]
        },
        {
          "id": "url/src/parser.rs:896:33:896:35:BinaryOperator:&&",
          "duration": 4.179483568,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 896,
              "column": 33
            },
            "end": {
              "line": 896,
              "column": 35
            }
          },
          "replacement": "&&",
          "status": "Survived",
          "description": "Replace BinaryOperator by &&",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:197:9:208:10:FnValue:Default::default()",
          "duration": 0.353717072,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 197,
              "column": 9
            },
            "end": {
              "line": 208,
              "column": 10
            }
          },
          "replacement": "Default::default()",
          "status": "CompileError",
          "description": "Replace FnValue by Default::default()",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:502:9:704:10:FnValue:ParseResult::new(Default::default())",
          "duration": 0.481833989,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 502,
              "column": 9
            },
            "end": {
              "line": 704,
              "column": 10
            }
          },
          "replacement": "ParseResult::new(Default::default())",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new(Default::default())",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:141:9:141:49:FnValue:Ok(Default::default())",
          "duration": 2.118355595,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 141,
              "column": 9
            },
            "end": {
              "line": 141,
              "column": 49
            }
          },
          "replacement": "Ok(Default::default())",
          "status": "Killed",
          "description": "Replace FnValue by Ok(Default::default())",
          "statusReason": "thread 'test_syntax_violation_callback' panicked at url/tests/unit.rs:846:5:\nassertion `left == right` failed\n  left: \"\"\n right: \"expected //\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_syntax_violation_callback",
            "test_syntax_violation_callback_types"
          ]
        },
        {
          "id": "url/src/parser.rs:714:9:825:10:FnValue:ParseResult::from_iter([Default::default()])",
          "duration": 1.258210804,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 714,
              "column": 9
            },
            "end": {
              "line": 825,
              "column": 10
            }
          },
          "replacement": "ParseResult::from_iter([Default::default()])",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from_iter([Default::default()])",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:436:38:436:39:BinaryOperator:>",
          "duration": 5.236264782,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 436,
              "column": 38
            },
            "end": {
              "line": 436,
              "column": 39
            }
          },
          "replacement": ">",
          "status": "Survived",
          "description": "Replace BinaryOperator by >",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1065:9:1093:52:FnValue:ParseResult::from((false, \"xyzzy\".into(), Default::default()))",
          "duration": 1.062755049,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1065,
              "column": 9
            },
            "end": {
              "line": 1093,
              "column": 52
            }
          },
          "replacement": "ParseResult::from((false, \"xyzzy\".into(), Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from((false, \"xyzzy\".into(), Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1207:64:1207:65:BinaryOperator:-",
          "duration": 3.235395001,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1207,
              "column": 64
            },
            "end": {
              "line": 1207,
              "column": 65
            }
          },
          "replacement": "-",
          "status": "Killed",
          "description": "Replace BinaryOperator by -",
          "statusReason": "thread 'test_file_with_drive' panicked at url/tests/unit.rs:1286:9:\nassertion `left == right` failed\n  left: \"file:///p:a\"\n right: \"file:///p:/a\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_file_with_drive"
          ]
        },
        {
          "id": "url/src/parser.rs:1622:9:1622:11:BinaryOperator:||",
          "duration": 4.87462411,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1622,
              "column": 9
            },
            "end": {
              "line": 1622,
              "column": 11
            }
          },
          "replacement": "||",
          "status": "Survived",
          "description": "Replace BinaryOperator by ||",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1029:9:1034:30:FnValue:ParseResult::new((Host::from_iter([String::new()]), Default::default()))",
          "duration": 0.911535798,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1029,
              "column": 9
            },
            "end": {
              "line": 1034,
              "column": 30
            }
          },
          "replacement": "ParseResult::new((Host::from_iter([String::new()]), Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new((Host::from_iter([String::new()]), Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1632:31:1632:33:BinaryOperator:||",
          "duration": 3.914390882,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1632,
              "column": 31
            },
            "end": {
              "line": 1632,
              "column": 33
            }
          },
          "replacement": "||",
          "status": "Survived",
          "description": "Replace BinaryOperator by ||",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:272:9:282:10:FnValue:None",
          "duration": 2.834424355,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 272,
              "column": 9
            },
            "end": {
              "line": 282,
              "column": 10
            }
          },
          "replacement": "None",
          "status": "Killed",
          "description": "Replace FnValue by None",
          "statusReason": "thread 'from_str' panicked at url/src/parser.rs:1440:18:\nProgramming error. parse_query_and_fragment() called without ? or #\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "from_str",
            "test_file_with_drive_and_path",
            "parse_with_params",
            "extend_query_pairs_then_mutate",
            "issue_124",
            "issue_197",
            "test_domain",
            "test_authority",
            "append_empty_segment_then_mutate",
            "append_trailing_slash",
            "no_panic",
            "test_idna",
            "path_backslash_fun",
            "test_file_with_drive",
            "test_fragment",
            "test_has_authority",
            "test_non_special_path3",
            "test_null_host_with_leading_empty_path_segment",
            "test_origin_unicode_serialization",
            "test_strip_trailing_spaces_from_opaque_path",
            "test_leading_dots",
            "test_relative",
            "test_origin_blob_equality",
            "test_origin_hash",
            "test_serialization",
            "test_set_empty_username_and_password",
            "test_socket_addrs",
            "test_set_scheme_to_file_with_host",
            "test_syntax_violation_callback_lifetimes",
            "test_set_empty_hostname",
            "test_set_empty_query",
            "test_make_relative",
            "test_query",
            "test_set_host",
            "test_slicing",
            "test_non_special_path",
            "test_non_special_path2",
            "test_no_base_url",
            "test_set_empty_host",
            "test_set_empty_password",
            "test_set_href",
            "test_options_reuse",
            "test_syntax_violation_callback_types",
            "test_origin_opaque"
          ]
        },
        {
          "id": "url/src/parser.rs:1605:5:1605:68:FnValue:true",
          "duration": 2.9874223079999997,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1605,
              "column": 5
            },
            "end": {
              "line": 1605,
              "column": 68
            }
          },
          "replacement": "true",
          "status": "Killed",
          "description": "Replace FnValue by true",
          "statusReason": "thread 'issue_124' panicked at url/src/parser.rs:1598:41:\nindex out of bounds: the len is 0 but the index is 1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "issue_124",
            "test_file_with_drive",
            "test_authority",
            "test_file_with_drive_and_path",
            "test_has_authority",
            "test_leading_dots",
            "test_origin_hash",
            "test_set_empty_host",
            "test_origin_unicode_serialization",
            "test_syntax_violation_callback_types"
          ]
        },
        {
          "id": "url/src/parser.rs:1029:9:1034:30:FnValue:ParseResult::from_iter([(Host::new(\"xyzzy\".into()), Default::default())])",
          "duration": 0.309672677,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1029,
              "column": 9
            },
            "end": {
              "line": 1034,
              "column": 30
            }
          },
          "replacement": "ParseResult::from_iter([(Host::new(\"xyzzy\".into()), Default::default())])",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from_iter([(Host::new(\"xyzzy\".into()), Default::default())])",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1402:17:1402:19:BinaryOperator:==",
          "duration": 3.9868159949999997,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1402,
              "column": 17
            },
            "end": {
              "line": 1402,
              "column": 19
            }
          },
          "replacement": "==",
          "status": "Survived",
          "description": "Replace BinaryOperator by ==",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:915:40:915:41:BinaryOperator:<",
          "duration": 2.425386942,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 915,
              "column": 40
            },
            "end": {
              "line": 915,
              "column": 41
            }
          },
          "replacement": "<",
          "status": "Killed",
          "description": "Replace BinaryOperator by <",
          "statusReason": "thread 'test_set_empty_hostname' panicked at url/tests/unit.rs:100:5:\nsetting an empty hostname to a url with a password should fail\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_set_empty_hostname",
            "test_set_empty_password",
            "test_serialization",
            "test_set_empty_host",
            "test_authority",
            "test_slicing",
            "test_set_empty_username_and_password"
          ]
        },
        {
          "id": "url/src/parser.rs:1436:9:1456:48:FnValue:ParseResult::from((Some(0), None))",
          "duration": 1.01377377,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1436,
              "column": 9
            },
            "end": {
              "line": 1456,
              "column": 48
            }
          },
          "replacement": "ParseResult::from((Some(0), None))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from((Some(0), None))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:92:9:92:30:FnValue:Default::default()",
          "duration": 0.920779162,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 92,
              "column": 9
            },
            "end": {
              "line": 92,
              "column": 30
            }
          },
          "replacement": "Default::default()",
          "status": "CompileError",
          "description": "Replace FnValue by Default::default()",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1185:41:1185:43:BinaryOperator:==",
          "duration": 1.571076674,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1185,
              "column": 41
            },
            "end": {
              "line": 1185,
              "column": 43
            }
          },
          "replacement": "==",
          "status": "Killed",
          "description": "Replace BinaryOperator by ==",
          "statusReason": "thread 'test_file_with_drive' panicked at url/tests/unit.rs:1286:9:\nassertion `left == right` failed\n  left: \"file:///p:/../\"\n right: \"file:///p:/\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_file_with_drive",
            "test_make_relative",
            "test_file_with_drive_and_path",
            "test_syntax_violation_callback_types"
          ]
        },
        {
          "id": "url/src/parser.rs:1029:9:1034:30:FnValue:ParseResult::new((Host::new(), Default::default()))",
          "duration": 0.308328358,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1029,
              "column": 9
            },
            "end": {
              "line": 1034,
              "column": 30
            }
          },
          "replacement": "ParseResult::new((Host::new(), Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new((Host::new(), Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1590:5:1594:6:FnValue:ParseResult::from(0)",
          "duration": 0.607472773,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1590,
              "column": 5
            },
            "end": {
              "line": 1594,
              "column": 6
            }
          },
          "replacement": "ParseResult::from(0)",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from(0)",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:272:9:282:10:FnValue:Some((Default::default(), \"xyzzy\"))",
          "duration": 22.478948489,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 272,
              "column": 9
            },
            "end": {
              "line": 282,
              "column": 10
            }
          },
          "replacement": "Some((Default::default(), \"xyzzy\"))",
          "status": "Timeout",
          "description": "Replace FnValue by Some((Default::default(), \"xyzzy\"))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1075:19:1075:21:BinaryOperator:-=",
          "duration": 1.6283142069999998,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1075,
              "column": 19
            },
            "end": {
              "line": 1075,
              "column": 21
            }
          },
          "replacement": "-=",
          "status": "Killed",
          "description": "Replace BinaryOperator by -=",
          "statusReason": "thread 'test_set_empty_host' panicked at url/src/parser.rs:1075:13:\nattempt to subtract with overflow\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_set_empty_host",
            "test_leading_dots",
            "test_origin_unicode_serialization",
            "test_syntax_violation_callback_types",
            "test_origin_hash"
          ]
        },
        {
          "id": "url/src/parser.rs:241:9:246:10:FnValue:Some(Default::default())",
          "duration": 1.219363223,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 241,
              "column": 9
            },
            "end": {
              "line": 246,
              "column": 10
            }
          },
          "replacement": "Some(Default::default())",
          "status": "CompileError",
          "description": "Replace FnValue by Some(Default::default())",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:760:63:760:64:BinaryOperator:*",
          "duration": 3.365631583,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 760,
              "column": 63
            },
            "end": {
              "line": 760,
              "column": 64
            }
          },
          "replacement": "*",
          "status": "Survived",
          "description": "Replace BinaryOperator by *",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1590:5:1594:6:FnValue:ParseResult::new(0)",
          "duration": 0.610474075,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1590,
              "column": 5
            },
            "end": {
              "line": 1594,
              "column": 6
            }
          },
          "replacement": "ParseResult::new(0)",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new(0)",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:309:9:309:41:FnValue:false",
          "duration": 1.511221356,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 309,
              "column": 9
            },
            "end": {
              "line": 309,
              "column": 41
            }
          },
          "replacement": "false",
          "status": "Killed",
          "description": "Replace FnValue by false",
          "statusReason": "thread 'extend_query_pairs_then_mutate' panicked at url/tests/unit.rs:474:64:\ncalled `Result::unwrap()` on an `Err` value: RelativeUrlWithoutBase\n",
          "killedBy": [
            "extend_query_pairs_then_mutate",
            "append_trailing_slash",
            "append_empty_segment_then_mutate",
            "from_str",
            "host",
            "host_serialization",
            "issue_124",
            "issue_197",
            "issue_241",
            "issue_61",
            "issue_864",
            "no_panic",
            "parse_with_params",
            "path_backslash_fun",
            "pop_if_empty_in_bounds",
            "test_authority",
            "test_domain",
            "test_equality",
            "test_file_with_drive",
            "test_file_with_drive_and_path",
            "test_fragment",
            "test_has_authority",
            "test_idna",
            "test_leading_dots",
            "test_make_relative",
            "test_no_base_url",
            "test_non_special_path",
            "test_non_special_path2",
            "test_non_special_path3",
            "test_null_host_with_leading_empty_path_segment",
            "test_options_reuse",
            "test_origin_blob_equality",
            "test_origin_hash",
            "test_origin_opaque",
            "test_origin_unicode_serialization",
            "test_query",
            "test_relative",
            "test_relative_empty",
            "test_serialization",
            "test_set_empty_host",
            "test_set_empty_hostname",
            "test_set_empty_password",
            "test_set_empty_query",
            "test_set_empty_username_and_password",
            "test_set_host",
            "test_set_href",
            "test_set_ip_host",
            "test_set_scheme_to_file_with_host",
            "test_slicing",
            "test_socket_addrs",
            "test_strip_trailing_spaces_from_opaque_path",
            "test_syntax_violation_callback",
            "test_syntax_violation_callback_lifetimes",
            "test_syntax_violation_callback_types"
          ]
        },
        {
          "id": "url/src/parser.rs:1436:9:1456:48:FnValue:ParseResult::from((None, Some(0)))",
          "duration": 0.201628297,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1436,
              "column": 9
            },
            "end": {
              "line": 1456,
              "column": 48
            }
          },
          "replacement": "ParseResult::from((None, Some(0)))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from((None, Some(0)))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1382:32:1382:34:BinaryOperator:!=",
          "duration": 0.8232033360000001,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1382,
              "column": 32
            },
            "end": {
              "line": 1382,
              "column": 34
            }
          },
          "replacement": "!=",
          "status": "Killed",
          "description": "Replace BinaryOperator by !=",
          "statusReason": "thread 'extend_query_pairs_then_mutate' panicked at url/src/parser.rs:1390:13:\nassertion failed: !self.serialization[scheme_end_as_usize..].starts_with(\"://\")\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "extend_query_pairs_then_mutate",
            "from_str",
            "issue_61",
            "test_fragment",
            "test_has_authority",
            "test_authority",
            "test_domain",
            "append_trailing_slash",
            "test_file_with_drive_and_path",
            "parse_with_params",
            "test_origin_unicode_serialization",
            "host_serialization",
            "host",
            "test_idna",
            "append_empty_segment_then_mutate",
            "pop_if_empty_in_bounds",
            "test_file_with_drive",
            "test_equality",
            "test_set_host",
            "path_backslash_fun",
            "test_set_href",
            "test_set_scheme_to_file_with_host",
            "test_set_ip_host",
            "test_set_empty_host",
            "test_non_special_path2",
            "test_origin_hash",
            "test_non_special_path3",
            "test_options_reuse",
            "test_relative",
            "test_set_empty_password",
            "test_origin_blob_equality",
            "test_make_relative",
            "test_query",
            "test_serialization",
            "test_set_empty_query",
            "test_relative_empty",
            "test_non_special_path",
            "test_syntax_violation_callback",
            "test_set_empty_username_and_password",
            "test_null_host_with_leading_empty_path_segment",
            "test_syntax_violation_callback_types",
            "test_slicing",
            "test_socket_addrs",
            "test_syntax_violation_callback_lifetimes",
            "test_set_empty_hostname"
          ]
        },
        {
          "id": "url/src/parser.rs:1207:64:1207:65:BinaryOperator:*",
          "duration": 1.3193273189999999,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1207,
              "column": 64
            },
            "end": {
              "line": 1207,
              "column": 65
            }
          },
          "replacement": "*",
          "status": "Killed",
          "description": "Replace BinaryOperator by *",
          "statusReason": "thread 'test_file_with_drive' panicked at url/tests/unit.rs:1286:9:\nassertion `left == right` failed\n  left: \"file:///p:a\"\n right: \"file:///p:/a\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_file_with_drive"
          ]
        },
        {
          "id": "url/src/parser.rs:975:9:1025:26:FnValue:ParseResult::from_iter([(Host::from(\"xyzzy\".into()), Default::default())])",
          "duration": 0.508575317,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 975,
              "column": 9
            },
            "end": {
              "line": 1025,
              "column": 26
            }
          },
          "replacement": "ParseResult::from_iter([(Host::from(\"xyzzy\".into()), Default::default())])",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from_iter([(Host::from(\"xyzzy\".into()), Default::default())])",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1332:44:1332:45:BinaryOperator:*",
          "duration": 1.466891961,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1332,
              "column": 44
            },
            "end": {
              "line": 1332,
              "column": 45
            }
          },
          "replacement": "*",
          "status": "Killed",
          "description": "Replace BinaryOperator by *",
          "statusReason": "thread 'issue_124' panicked at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/alloc/src/string.rs:1791:9:\nassertion failed: self.is_char_boundary(at)\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "issue_124",
            "test_file_with_drive",
            "test_file_with_drive_and_path",
            "test_make_relative"
          ]
        },
        {
          "id": "url/src/parser.rs:1108:34:1108:35:BinaryOperator:-",
          "duration": 1.939609936,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1108,
              "column": 34
            },
            "end": {
              "line": 1108,
              "column": 35
            }
          },
          "replacement": "-",
          "status": "Killed",
          "description": "Replace BinaryOperator by -",
          "statusReason": "thread 'append_empty_segment_then_mutate' panicked at url/src/parser.rs:1108:24:\nattempt to subtract with overflow\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "append_empty_segment_then_mutate",
            "append_trailing_slash",
            "test_authority",
            "extend_query_pairs_then_mutate",
            "test_make_relative",
            "test_set_scheme_to_file_with_host",
            "test_origin_hash",
            "test_socket_addrs",
            "test_syntax_violation_callback",
            "test_set_href",
            "test_slicing",
            "test_syntax_violation_callback_lifetimes",
            "test_equality",
            "test_origin_unicode_serialization"
          ]
        },
        {
          "id": "url/src/parser.rs:1329:9:1339:10:FnValue:()",
          "duration": 1.626436882,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1329,
              "column": 9
            },
            "end": {
              "line": 1339,
              "column": 10
            }
          },
          "replacement": "()",
          "status": "Killed",
          "description": "Replace FnValue by ()",
          "statusReason": "thread 'test_make_relative' panicked at url/tests/unit.rs:1198:9:\nassertion `left == right` failed: base: http://127.0.0.1:8080/test, uri: http://127.0.0.1:8080/test/, relative: test/\n  left: \"http://127.0.0.1:8080/testtest/\"\n right: \"http://127.0.0.1:8080/test/\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_make_relative",
            "test_file_with_drive_and_path"
          ]
        },
        {
          "id": "url/src/parser.rs:1436:9:1456:48:FnValue:ParseResult::from((None, Some(1)))",
          "duration": 0.466868135,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1436,
              "column": 9
            },
            "end": {
              "line": 1456,
              "column": 48
            }
          },
          "replacement": "ParseResult::from((None, Some(1)))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from((None, Some(1)))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:995:39:995:41:BinaryOperator:*=",
          "duration": 1.314707958,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 995,
              "column": 39
            },
            "end": {
              "line": 995,
              "column": 41
            }
          },
          "replacement": "*=",
          "status": "Killed",
          "description": "Replace BinaryOperator by *=",
          "statusReason": "thread 'test_authority' panicked at url/tests/unit.rs:1252:5:\nassertion `left == right` failed\n  left: \":password@[::1]\"\n right: \":password@[::1]:8080\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_authority",
            "test_socket_addrs"
          ]
        },
        {
          "id": "url/src/parser.rs:1611:5:1615:6:FnValue:false",
          "duration": 0.963566974,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1611,
              "column": 5
            },
            "end": {
              "line": 1615,
              "column": 6
            }
          },
          "replacement": "false",
          "status": "Killed",
          "description": "Replace FnValue by false",
          "statusReason": "thread 'test_file_with_drive' panicked at url/tests/unit.rs:1286:9:\nassertion `left == right` failed\n  left: \"file:///p:\"\n right: \"file:///p:/\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_file_with_drive"
          ]
        },
        {
          "id": "url/src/parser.rs:292:22:292:24:BinaryOperator:!=",
          "duration": 0.754224967,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 292,
              "column": 22
            },
            "end": {
              "line": 292,
              "column": 24
            }
          },
          "replacement": "!=",
          "status": "Killed",
          "description": "Replace BinaryOperator by !=",
          "statusReason": "thread 'append_empty_segment_then_mutate' panicked at url/src/lib.rs:722:47:\nFailed to parse myself?: InvalidPort\n",
          "killedBy": [
            "append_empty_segment_then_mutate",
            "append_trailing_slash",
            "extend_query_pairs_then_mutate",
            "from_str",
            "parse_with_params",
            "test_authority",
            "test_equality",
            "test_file_with_drive",
            "test_file_with_drive_and_path",
            "test_has_authority",
            "test_idna",
            "test_no_base_url",
            "test_make_relative",
            "test_non_special_path",
            "test_non_special_path2",
            "test_non_special_path3",
            "test_origin_blob_equality",
            "test_origin_hash",
            "test_options_reuse",
            "test_query",
            "test_relative",
            "test_relative_empty",
            "test_origin_unicode_serialization",
            "test_set_empty_host",
            "test_serialization",
            "test_set_empty_hostname",
            "test_set_empty_password",
            "test_set_empty_query",
            "test_set_empty_username_and_password",
            "test_set_host",
            "test_set_scheme_to_file_with_host",
            "test_slicing",
            "test_socket_addrs",
            "test_strip_trailing_spaces_from_opaque_path",
            "test_syntax_violation_callback",
            "test_syntax_violation_callback_lifetimes",
            "test_syntax_violation_callback_types"
          ]
        },
        {
          "id": "url/src/parser.rs:1205:57:1205:58:BinaryOperator:==",
          "duration": 2.432427489,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1205,
              "column": 57
            },
            "end": {
              "line": 1205,
              "column": 58
            }
          },
          "replacement": "==",
          "status": "Killed",
          "description": "Replace BinaryOperator by ==",
          "statusReason": "[url/tests/unit.rs:1306:5] &url = Url {\n    scheme: \"file\",\n    cannot_be_a_base: false,\n    username: \"\",\n    password: None,\n    host: None,\n    port: None,\n    path: \"/\",\n    query: None,\n    fragment: None,\n}\nthread 'issue_864' panicked at url/src/parser.rs:1207:52:\nbyte index 8 is out of bounds of `file://`\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "issue_864",
            "test_file_with_drive"
          ]
        },
        {
          "id": "url/src/parser.rs:1590:5:1594:6:FnValue:ParseResult::new(1)",
          "duration": 0.151470812,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1590,
              "column": 5
            },
            "end": {
              "line": 1594,
              "column": 6
            }
          },
          "replacement": "ParseResult::new(1)",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new(1)",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:975:9:1025:26:FnValue:ParseResult::from((Host::from(String::new()), Default::default()))",
          "duration": 1.613497642,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 975,
              "column": 9
            },
            "end": {
              "line": 1025,
              "column": 26
            }
          },
          "replacement": "ParseResult::from((Host::from(String::new()), Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from((Host::from(String::new()), Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:869:9:935:38:FnValue:ParseResult::new()",
          "duration": 0.510757751,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 869,
              "column": 9
            },
            "end": {
              "line": 935,
              "column": 38
            }
          },
          "replacement": "ParseResult::new()",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new()",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1041:9:1059:40:FnValue:ParseResult::from((false, Default::default(), Default::default()))",
          "duration": 1.0730875,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1041,
              "column": 9
            },
            "end": {
              "line": 1059,
              "column": 40
            }
          },
          "replacement": "ParseResult::from((false, Default::default(), Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from((false, Default::default(), Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1104:9:1124:30:FnValue:ParseResult::from_iter([(Some(0), Default::default())])",
          "duration": 0.554370251,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1104,
              "column": 9
            },
            "end": {
              "line": 1124,
              "column": 30
            }
          },
          "replacement": "ParseResult::from_iter([(Some(0), Default::default())])",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from_iter([(Some(0), Default::default())])",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1029:9:1034:30:FnValue:ParseResult::from((Host::new(), Default::default()))",
          "duration": 0.610301624,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1029,
              "column": 9
            },
            "end": {
              "line": 1034,
              "column": 30
            }
          },
          "replacement": "ParseResult::from((Host::new(), Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from((Host::new(), Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1436:9:1456:48:FnValue:ParseResult::new((Some(1), None))",
          "duration": 0.457255853,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1436,
              "column": 9
            },
            "end": {
              "line": 1456,
              "column": 48
            }
          },
          "replacement": "ParseResult::new((Some(1), None))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new((Some(1), None))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:507:77:507:79:BinaryOperator:!=",
          "duration": 1.697325809,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 507,
              "column": 77
            },
            "end": {
              "line": 507,
              "column": 79
            }
          },
          "replacement": "!=",
          "status": "Killed",
          "description": "Replace BinaryOperator by !=",
          "statusReason": "thread 'test_syntax_violation_callback_types' panicked at url/tests/unit.rs:896:9:\nassertion `left == right` failed\n  left: Some(Backslash)\n right: Some(ExpectedFileDoubleSlash)\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_syntax_violation_callback_types"
          ]
        },
        {
          "id": "url/src/parser.rs:1621:9:1621:11:BinaryOperator:||",
          "duration": 3.625001132,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1621,
              "column": 9
            },
            "end": {
              "line": 1621,
              "column": 11
            }
          },
          "replacement": "||",
          "status": "Killed",
          "description": "Replace BinaryOperator by ||",
          "statusReason": "thread 'test_make_relative' panicked at url/tests/unit.rs:1198:9:\nassertion `left == right` failed: base: http://127.0.0.1:8080/test/, uri: http://127.0.0.1:8080/test, relative: ../test\n  left: \"http://127.0.0.1:8080/test/test\"\n right: \"http://127.0.0.1:8080/test\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_make_relative"
          ]
        },
        {
          "id": "url/src/parser.rs:389:29:389:31:BinaryOperator:&&",
          "duration": 4.479820062,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 389,
              "column": 29
            },
            "end": {
              "line": 389,
              "column": 31
            }
          },
          "replacement": "&&",
          "status": "Survived",
          "description": "Replace BinaryOperator by &&",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1590:5:1594:6:FnValue:ParseResult::new()",
          "duration": 1.115413529,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1590,
              "column": 5
            },
            "end": {
              "line": 1594,
              "column": 6
            }
          },
          "replacement": "ParseResult::new()",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new()",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1611:5:1615:6:FnValue:true",
          "duration": 2.942367189,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1611,
              "column": 5
            },
            "end": {
              "line": 1615,
              "column": 6
            }
          },
          "replacement": "true",
          "status": "Killed",
          "description": "Replace FnValue by true",
          "statusReason": "thread 'test_make_relative' panicked at url/tests/unit.rs:1198:9:\nassertion `left == right` failed: base: http://127.0.0.1:8080/test/, uri: http://127.0.0.1:8080/test, relative: ../test\n  left: \"http://127.0.0.1:8080/test/test\"\n right: \"http://127.0.0.1:8080/test\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_make_relative"
          ]
        },
        {
          "id": "url/src/parser.rs:1305:17:1305:19:BinaryOperator:||",
          "duration": 1.6779784469999999,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1305,
              "column": 17
            },
            "end": {
              "line": 1305,
              "column": 19
            }
          },
          "replacement": "||",
          "status": "Killed",
          "description": "Replace BinaryOperator by ||",
          "statusReason": "thread 'test_file_with_drive' panicked at url/tests/unit.rs:1286:9:\nassertion `left == right` failed\n  left: \"file:///p:\"\n right: \"file:///p:/\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_file_with_drive"
          ]
        },
        {
          "id": "url/src/parser.rs:1436:9:1456:48:FnValue:ParseResult::new((Some(0), Some(0)))",
          "duration": 0.319271837,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1436,
              "column": 9
            },
            "end": {
              "line": 1456,
              "column": 48
            }
          },
          "replacement": "ParseResult::new((Some(0), Some(0)))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new((Some(0), Some(0)))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:975:9:1025:26:FnValue:ParseResult::from_iter([(Host::from_iter([String::new()]), Default::default())])",
          "duration": 0.608365661,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 975,
              "column": 9
            },
            "end": {
              "line": 1025,
              "column": 26
            }
          },
          "replacement": "ParseResult::from_iter([(Host::from_iter([String::new()]), Default::default())])",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from_iter([(Host::from_iter([String::new()]), Default::default())])",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:975:9:1025:26:FnValue:ParseResult::from((Host::new(\"xyzzy\".into()), Default::default()))",
          "duration": 0.811285861,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 975,
              "column": 9
            },
            "end": {
              "line": 1025,
              "column": 26
            }
          },
          "replacement": "ParseResult::from((Host::new(\"xyzzy\".into()), Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from((Host::new(\"xyzzy\".into()), Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1075:19:1075:21:BinaryOperator:*=",
          "duration": 2.5893482499999996,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1075,
              "column": 19
            },
            "end": {
              "line": 1075,
              "column": 21
            }
          },
          "replacement": "*=",
          "status": "Killed",
          "description": "Replace BinaryOperator by *=",
          "statusReason": "thread 'test_leading_dots' panicked at url/tests/unit.rs:528:5:\nassertion `left == right` failed\n  left: None\n right: Some(\".\")\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_leading_dots",
            "test_syntax_violation_callback_types"
          ]
        },
        {
          "id": "url/src/parser.rs:844:17:844:19:BinaryOperator:!=",
          "duration": 2.8830312609999997,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 844,
              "column": 17
            },
            "end": {
              "line": 844,
              "column": 19
            }
          },
          "replacement": "!=",
          "status": "Killed",
          "description": "Replace BinaryOperator by !=",
          "statusReason": "thread 'test_authority' panicked at url/tests/unit.rs:1247:56:\ncalled `Result::unwrap()` on an `Err` value: EmptyHost\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_authority",
            "test_set_empty_host",
            "test_set_empty_username_and_password",
            "test_set_href",
            "test_set_empty_password",
            "test_set_empty_hostname",
            "test_origin_hash",
            "test_serialization",
            "test_origin_unicode_serialization",
            "test_slicing",
            "test_non_special_path",
            "test_non_special_path2",
            "test_non_special_path3",
            "test_syntax_violation_callback_types"
          ]
        },
        {
          "id": "url/src/parser.rs:1029:9:1034:30:FnValue:ParseResult::from((Host::from_iter([\"xyzzy\".into()]), Default::default()))",
          "duration": 0.864762964,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1029,
              "column": 9
            },
            "end": {
              "line": 1034,
              "column": 30
            }
          },
          "replacement": "ParseResult::from((Host::from_iter([\"xyzzy\".into()]), Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from((Host::from_iter([\"xyzzy\".into()]), Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:511:63:511:65:BinaryOperator:!=",
          "duration": 5.289082291,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 511,
              "column": 63
            },
            "end": {
              "line": 511,
              "column": 65
            }
          },
          "replacement": "!=",
          "status": "Survived",
          "description": "Replace BinaryOperator by !=",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1497:9:1513:11:FnValue:ParseResult::new()",
          "duration": 0.570703951,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1497,
              "column": 9
            },
            "end": {
              "line": 1513,
              "column": 11
            }
          },
          "replacement": "ParseResult::new()",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new()",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:886:24:886:26:BinaryOperator:*=",
          "duration": 1.640424247,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 886,
              "column": 24
            },
            "end": {
              "line": 886,
              "column": 26
            }
          },
          "replacement": "*=",
          "status": "Killed",
          "description": "Replace BinaryOperator by *=",
          "statusReason": "thread 'test_authority' panicked at url/tests/unit.rs:1248:5:\nassertion `left == right` failed\n  left: \"127.0.0.1:2121\"\n right: \"user@127.0.0.1:2121\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_authority",
            "test_set_empty_password",
            "test_non_special_path2",
            "test_non_special_path3",
            "test_non_special_path",
            "test_serialization",
            "test_set_empty_host",
            "test_set_empty_hostname",
            "test_set_empty_username_and_password",
            "test_slicing"
          ]
        },
        {
          "id": "url/src/parser.rs:257:9:267:10:FnValue:(1, Default::default())",
          "duration": 0.420968268,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 257,
              "column": 9
            },
            "end": {
              "line": 267,
              "column": 10
            }
          },
          "replacement": "(1, Default::default())",
          "status": "CompileError",
          "description": "Replace FnValue by (1, Default::default())",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1003:19:1003:21:BinaryOperator:*=",
          "duration": 1.575582091,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1003,
              "column": 19
            },
            "end": {
              "line": 1003,
              "column": 21
            }
          },
          "replacement": "*=",
          "status": "Killed",
          "description": "Replace BinaryOperator by *=",
          "statusReason": "thread 'host' panicked at url/tests/unit.rs:301:38:\ncalled `Result::unwrap()` on an `Err` value: EmptyHost\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host",
            "test_equality",
            "path_backslash_fun",
            "extend_query_pairs_then_mutate",
            "issue_61",
            "parse_with_params",
            "test_domain",
            "test_has_authority",
            "append_trailing_slash",
            "test_idna",
            "append_empty_segment_then_mutate",
            "test_fragment",
            "test_origin_blob_equality",
            "test_origin_unicode_serialization",
            "test_relative",
            "host_serialization",
            "from_str",
            "test_authority",
            "test_make_relative",
            "test_non_special_path3",
            "test_options_reuse",
            "test_origin_hash",
            "test_non_special_path2",
            "test_query",
            "test_non_special_path",
            "test_set_empty_hostname",
            "test_serialization",
            "test_set_empty_host",
            "test_set_empty_username_and_password",
            "test_relative_empty",
            "test_set_host",
            "test_set_ip_host",
            "test_set_scheme_to_file_with_host",
            "test_set_empty_password",
            "test_syntax_violation_callback_types",
            "test_set_empty_query",
            "test_socket_addrs",
            "test_syntax_violation_callback_lifetimes",
            "test_syntax_violation_callback",
            "test_slicing",
            "test_set_href"
          ]
        },
        {
          "id": "url/src/parser.rs:345:9:349:10:FnValue:()",
          "duration": 2.487537025,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 345,
              "column": 9
            },
            "end": {
              "line": 349,
              "column": 10
            }
          },
          "replacement": "()",
          "status": "Killed",
          "description": "Replace FnValue by ()",
          "statusReason": "thread 'test_options_reuse' panicked at url/tests/unit.rs:914:5:\nassertion `left == right` failed\n  left: [Backslash]\n right: [ExpectedDoubleSlash, Backslash]\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_options_reuse",
            "test_syntax_violation_callback_types",
            "test_syntax_violation_callback_lifetimes",
            "test_syntax_violation_callback"
          ]
        },
        {
          "id": "url/src/parser.rs:231:9:231:38:FnValue:false",
          "duration": 1.4258364289999998,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 231,
              "column": 9
            },
            "end": {
              "line": 231,
              "column": 38
            }
          },
          "replacement": "false",
          "status": "Killed",
          "description": "Replace FnValue by false",
          "statusReason": "thread 'issue_61' panicked at url/tests/unit.rs:435:29:\ncalled `Result::unwrap()` on an `Err` value: ()\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "issue_61"
          ]
        },
        {
          "id": "url/src/parser.rs:1065:9:1093:52:FnValue:ParseResult::from((true, \"xyzzy\".into(), Default::default()))",
          "duration": 0.313349472,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1065,
              "column": 9
            },
            "end": {
              "line": 1093,
              "column": 52
            }
          },
          "replacement": "ParseResult::from((true, \"xyzzy\".into(), Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from((true, \"xyzzy\".into(), Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:236:9:236:42:FnValue:false",
          "duration": 1.4190832230000001,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 236,
              "column": 9
            },
            "end": {
              "line": 236,
              "column": 42
            }
          },
          "replacement": "false",
          "status": "Killed",
          "description": "Replace FnValue by false",
          "statusReason": "thread 'issue_61' panicked at url/tests/unit.rs:434:52:\ncalled `Result::unwrap()` on an `Err` value: RelativeUrlWithoutBase\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "issue_61",
            "issue_241",
            "issue_124",
            "extend_query_pairs_then_mutate",
            "append_trailing_slash",
            "append_empty_segment_then_mutate",
            "issue_864",
            "test_non_special_path2",
            "from_str",
            "issue_197",
            "host_serialization",
            "test_idna",
            "host",
            "test_null_host_with_leading_empty_path_segment",
            "test_equality",
            "test_file_with_drive",
            "test_origin_hash",
            "test_non_special_path3",
            "no_panic",
            "parse_with_params",
            "test_non_special_path",
            "path_backslash_fun",
            "test_domain",
            "test_origin_unicode_serialization",
            "test_options_reuse",
            "test_origin_blob_equality",
            "test_query",
            "pop_if_empty_in_bounds",
            "test_file_with_drive_and_path",
            "test_origin_opaque",
            "test_authority",
            "test_no_base_url",
            "test_has_authority",
            "test_leading_dots",
            "test_fragment",
            "test_make_relative",
            "test_set_scheme_to_file_with_host",
            "test_slicing",
            "test_socket_addrs",
            "test_strip_trailing_spaces_from_opaque_path",
            "test_syntax_violation_callback",
            "test_set_empty_host",
            "test_set_empty_hostname",
            "test_set_empty_username_and_password",
            "test_set_host",
            "test_set_href",
            "test_set_ip_host",
            "test_relative_empty",
            "test_relative",
            "test_set_empty_query",
            "test_set_empty_password",
            "test_syntax_violation_callback_types",
            "test_serialization",
            "test_syntax_violation_callback_lifetimes"
          ]
        },
        {
          "id": "url/src/parser.rs:1113:31:1113:33:BinaryOperator:!=",
          "duration": 2.9544519200000003,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1113,
              "column": 31
            },
            "end": {
              "line": 1113,
              "column": 33
            }
          },
          "replacement": "!=",
          "status": "Survived",
          "description": "Replace BinaryOperator by !=",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1627:5:1640:6:FnValue:true",
          "duration": 1.579769427,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1627,
              "column": 5
            },
            "end": {
              "line": 1640,
              "column": 6
            }
          },
          "replacement": "true",
          "status": "Killed",
          "description": "Replace FnValue by true",
          "statusReason": "thread 'test_file_with_drive_and_path' panicked at url/tests/unit.rs:1300:5:\nassertion `left == right` failed\n  left: \"file:///a\"\n right: \"file:///p:/a\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_file_with_drive_and_path",
            "test_file_with_drive"
          ]
        },
        {
          "id": "url/src/parser.rs:364:9:385:10:FnValue:ParseResult::from(Default::default())",
          "duration": 0.565392787,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 364,
              "column": 9
            },
            "end": {
              "line": 385,
              "column": 10
            }
          },
          "replacement": "ParseResult::from(Default::default())",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from(Default::default())",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:272:9:282:10:FnValue:Some((Default::default(), \"\"))",
          "duration": 20.779578431999997,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 272,
              "column": 9
            },
            "end": {
              "line": 282,
              "column": 10
            }
          },
          "replacement": "Some((Default::default(), \"\"))",
          "status": "Timeout",
          "description": "Replace FnValue by Some((Default::default(), \"\"))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:251:9:252:38:FnValue:(Some(Default::default()), Default::default())",
          "duration": 0.872909191,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 251,
              "column": 9
            },
            "end": {
              "line": 252,
              "column": 38
            }
          },
          "replacement": "(Some(Default::default()), Default::default())",
          "status": "CompileError",
          "description": "Replace FnValue by (Some(Default::default()), Default::default())",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1590:5:1594:6:FnValue:ParseResult::from(1)",
          "duration": 0.621527751,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1590,
              "column": 5
            },
            "end": {
              "line": 1594,
              "column": 6
            }
          },
          "replacement": "ParseResult::from(1)",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from(1)",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1503:44:1503:45:BinaryOperator:-",
          "duration": 3.7018400280000003,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1503,
              "column": 44
            },
            "end": {
              "line": 1503,
              "column": 45
            }
          },
          "replacement": "-",
          "status": "Survived",
          "description": "Replace BinaryOperator by -",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:944:9:968:53:FnValue:ParseResult::from_iter([(1, Default::default(), None, Default::default())])",
          "duration": 0.618883616,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 944,
              "column": 9
            },
            "end": {
              "line": 968,
              "column": 53
            }
          },
          "replacement": "ParseResult::from_iter([(1, Default::default(), None, Default::default())])",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from_iter([(1, Default::default(), None, Default::default())])",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1517:9:1525:10:FnValue:()",
          "duration": 2.135473379,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1517,
              "column": 9
            },
            "end": {
              "line": 1525,
              "column": 10
            }
          },
          "replacement": "()",
          "status": "Killed",
          "description": "Replace FnValue by ()",
          "statusReason": "thread 'test_make_relative' panicked at url/tests/unit.rs:1193:9:\nassertion `left == right` failed: base: http://127.0.0.1:8080/, uri: http://127.0.0.1:8080/?foo=bar#123, relative: ?foo=bar#123\n  left: \"?foo=bar#\"\n right: \"?foo=bar#123\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_make_relative",
            "test_fragment",
            "test_slicing",
            "test_syntax_violation_callback_types"
          ]
        },
        {
          "id": "url/src/parser.rs:1073:40:1073:42:BinaryOperator:-=",
          "duration": 2.624863296,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1073,
              "column": 40
            },
            "end": {
              "line": 1073,
              "column": 42
            }
          },
          "replacement": "-=",
          "status": "Killed",
          "description": "Replace BinaryOperator by -=",
          "statusReason": "thread 'test_leading_dots' panicked at url/src/parser.rs:1073:22:\nattempt to subtract with overflow\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_leading_dots",
            "test_origin_hash",
            "test_origin_unicode_serialization",
            "test_set_empty_host",
            "test_syntax_violation_callback_types"
          ]
        },
        {
          "id": "url/src/parser.rs:1465:9:1493:18:FnValue:Some(Default::default())",
          "duration": 0.418467039,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1465,
              "column": 9
            },
            "end": {
              "line": 1493,
              "column": 18
            }
          },
          "replacement": "Some(Default::default())",
          "status": "CompileError",
          "description": "Replace FnValue by Some(Default::default())",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:944:9:968:53:FnValue:ParseResult::new((0, Default::default(), None, Default::default()))",
          "duration": 0.303448431,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 944,
              "column": 9
            },
            "end": {
              "line": 968,
              "column": 53
            }
          },
          "replacement": "ParseResult::new((0, Default::default(), None, Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new((0, Default::default(), None, Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:975:9:1025:26:FnValue:ParseResult::from((Host::from_iter([String::new()]), Default::default()))",
          "duration": 0.636840435,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 975,
              "column": 9
            },
            "end": {
              "line": 1025,
              "column": 26
            }
          },
          "replacement": "ParseResult::from((Host::from_iter([String::new()]), Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from((Host::from_iter([String::new()]), Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:975:9:1025:26:FnValue:ParseResult::from((Host::new(String::new()), Default::default()))",
          "duration": 0.816958311,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 975,
              "column": 9
            },
            "end": {
              "line": 1025,
              "column": 26
            }
          },
          "replacement": "ParseResult::from((Host::new(String::new()), Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from((Host::new(String::new()), Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:798:74:798:76:BinaryOperator:&&",
          "duration": 4.3954970719999995,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 798,
              "column": 74
            },
            "end": {
              "line": 798,
              "column": 76
            }
          },
          "replacement": "&&",
          "status": "Survived",
          "description": "Replace BinaryOperator by &&",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:298:9:303:13:FnValue:false",
          "duration": 2.530841933,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 298,
              "column": 9
            },
            "end": {
              "line": 303,
              "column": 13
            }
          },
          "replacement": "false",
          "status": "Killed",
          "description": "Replace FnValue by false",
          "statusReason": "thread 'path_backslash_fun' panicked at url/tests/unit.rs:219:5:\nassertion `left == right` failed\n  left: \"thing:/.//foobar.com/foo\\\\bar\"\n right: \"thing://foobar.com/foo\\\\bar\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "path_backslash_fun",
            "test_authority",
            "test_non_special_path",
            "test_non_special_path3",
            "test_non_special_path2",
            "test_relative_empty",
            "test_set_empty_host",
            "test_relative",
            "test_set_empty_hostname",
            "test_set_empty_password",
            "test_set_empty_query",
            "test_set_empty_username_and_password",
            "test_set_host",
            "test_socket_addrs"
          ]
        },
        {
          "id": "url/src/parser.rs:164:9:168:10:FnValue:Default::default()",
          "duration": 0.201796743,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 164,
              "column": 9
            },
            "end": {
              "line": 168,
              "column": 10
            }
          },
          "replacement": "Default::default()",
          "status": "CompileError",
          "description": "Replace FnValue by Default::default()",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:199:28:199:29:BinaryOperator:==",
          "duration": 3.4362311629999995,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 199,
              "column": 28
            },
            "end": {
              "line": 199,
              "column": 29
            }
          },
          "replacement": "==",
          "status": "Survived",
          "description": "Replace BinaryOperator by ==",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1573:5:1573:14:FnValue:false",
          "duration": 1.932420343,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1573,
              "column": 5
            },
            "end": {
              "line": 1573,
              "column": 14
            }
          },
          "replacement": "false",
          "status": "Killed",
          "description": "Replace FnValue by false",
          "statusReason": "thread 'test_syntax_violation_callback_types' panicked at url/tests/unit.rs:893:14:\ncalled `Result::unwrap()` on an `Err` value: RelativeUrlWithoutBase\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_syntax_violation_callback_types"
          ]
        },
        {
          "id": "url/src/parser.rs:1073:40:1073:42:BinaryOperator:*=",
          "duration": 2.0808428549999998,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1073,
              "column": 40
            },
            "end": {
              "line": 1073,
              "column": 42
            }
          },
          "replacement": "*=",
          "status": "Killed",
          "description": "Replace BinaryOperator by *=",
          "statusReason": "thread 'test_set_empty_host' panicked at url/tests/unit.rs:60:5:\nassertion `left == right` failed\n  left: \"file:///server/share/foo/bar\"\n right: \"file:///share/foo/bar\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_set_empty_host",
            "test_syntax_violation_callback_types"
          ]
        },
        {
          "id": "url/src/parser.rs:1391:62:1391:63:BinaryOperator:-",
          "duration": 0.967153793,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1391,
              "column": 62
            },
            "end": {
              "line": 1391,
              "column": 63
            }
          },
          "replacement": "-",
          "status": "Killed",
          "description": "Replace BinaryOperator by -",
          "statusReason": "thread 'pop_if_empty_in_bounds' panicked at url/src/parser.rs:1391:42:\nattempt to subtract with overflow\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "pop_if_empty_in_bounds",
            "test_relative",
            "test_relative_empty"
          ]
        },
        {
          "id": "url/src/parser.rs:1329:37:1329:38:BinaryOperator:<",
          "duration": 0.807718895,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1329,
              "column": 37
            },
            "end": {
              "line": 1329,
              "column": 38
            }
          },
          "replacement": "<",
          "status": "Killed",
          "description": "Replace BinaryOperator by <",
          "statusReason": "thread 'test_make_relative' panicked at url/tests/unit.rs:1198:9:\nassertion `left == right` failed: base: http://127.0.0.1:8080/test, uri: http://127.0.0.1:8080/test/, relative: test/\n  left: \"http://127.0.0.1:8080/testtest/\"\n right: \"http://127.0.0.1:8080/test/\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_make_relative",
            "test_file_with_drive_and_path"
          ]
        },
        {
          "id": "url/src/parser.rs:1553:5:1567:65:FnValue:true",
          "duration": 1.420817612,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1553,
              "column": 5
            },
            "end": {
              "line": 1567,
              "column": 65
            }
          },
          "replacement": "true",
          "status": "Killed",
          "description": "Replace FnValue by true",
          "statusReason": "thread 'test_syntax_violation_callback_types' panicked at url/tests/unit.rs:896:9:\nassertion `left == right` failed\n  left: None\n right: Some(NonUrlCodePoint)\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_syntax_violation_callback_types"
          ]
        },
        {
          "id": "url/src/parser.rs:1065:9:1093:52:FnValue:ParseResult::from_iter([(false, \"xyzzy\".into(), Default::default())])",
          "duration": 0.913330795,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1065,
              "column": 9
            },
            "end": {
              "line": 1093,
              "column": 52
            }
          },
          "replacement": "ParseResult::from_iter([(false, \"xyzzy\".into(), Default::default())])",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from_iter([(false, \"xyzzy\".into(), Default::default())])",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1300:71:1300:72:BinaryOperator:+",
          "duration": 2.324556925,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1300,
              "column": 71
            },
            "end": {
              "line": 1300,
              "column": 72
            }
          },
          "replacement": "+",
          "status": "Killed",
          "description": "Replace BinaryOperator by +",
          "statusReason": "thread 'test_make_relative' panicked at url/src/parser.rs:1300:48:\nbyte index 28 is out of bounds of `http://127.0.0.1:8080/test/`\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_make_relative",
            "issue_124",
            "test_file_with_drive"
          ]
        },
        {
          "id": "url/src/parser.rs:467:9:493:10:FnValue:ParseResult::from(Default::default())",
          "duration": 0.666765825,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 467,
              "column": 9
            },
            "end": {
              "line": 493,
              "column": 10
            }
          },
          "replacement": "ParseResult::from(Default::default())",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from(Default::default())",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1109:25:1109:26:BinaryOperator:<",
          "duration": 2.780398388,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1109,
              "column": 25
            },
            "end": {
              "line": 1109,
              "column": 26
            }
          },
          "replacement": "<",
          "status": "Killed",
          "description": "Replace BinaryOperator by <",
          "statusReason": "thread 'extend_query_pairs_then_mutate' panicked at url/tests/unit.rs:474:64:\ncalled `Result::unwrap()` on an `Err` value: InvalidPort\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "extend_query_pairs_then_mutate",
            "append_trailing_slash",
            "test_make_relative",
            "test_authority",
            "test_origin_unicode_serialization",
            "test_equality",
            "append_empty_segment_then_mutate",
            "test_origin_hash",
            "test_slicing",
            "test_syntax_violation_callback",
            "test_set_href",
            "test_set_scheme_to_file_with_host",
            "test_socket_addrs",
            "test_syntax_violation_callback_lifetimes"
          ]
        },
        {
          "id": "url/src/parser.rs:1104:9:1124:30:FnValue:ParseResult::from((Some(1), Default::default()))",
          "duration": 0.612884068,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1104,
              "column": 9
            },
            "end": {
              "line": 1124,
              "column": 30
            }
          },
          "replacement": "ParseResult::from((Some(1), Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from((Some(1), Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:975:9:1025:26:FnValue:ParseResult::new((Host::from(\"xyzzy\".into()), Default::default()))",
          "duration": 0.656296202,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 975,
              "column": 9
            },
            "end": {
              "line": 1025,
              "column": 26
            }
          },
          "replacement": "ParseResult::new((Host::from(\"xyzzy\".into()), Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new((Host::from(\"xyzzy\".into()), Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1638:52:1638:54:BinaryOperator:||",
          "duration": 4.4831223300000005,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1638,
              "column": 52
            },
            "end": {
              "line": 1638,
              "column": 54
            }
          },
          "replacement": "||",
          "status": "Survived",
          "description": "Replace BinaryOperator by ||",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:257:9:267:10:FnValue:(0, Default::default())",
          "duration": 0.516132757,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 257,
              "column": 9
            },
            "end": {
              "line": 267,
              "column": 10
            }
          },
          "replacement": "(0, Default::default())",
          "status": "CompileError",
          "description": "Replace FnValue by (0, Default::default())",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:896:57:896:59:BinaryOperator:&&",
          "duration": 3.8740943029999997,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 896,
              "column": 57
            },
            "end": {
              "line": 896,
              "column": 59
            }
          },
          "replacement": "&&",
          "status": "Survived",
          "description": "Replace BinaryOperator by &&",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1065:9:1093:52:FnValue:ParseResult::new((false, String::new(), Default::default()))",
          "duration": 0.610572072,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1065,
              "column": 9
            },
            "end": {
              "line": 1093,
              "column": 52
            }
          },
          "replacement": "ParseResult::new((false, String::new(), Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new((false, String::new(), Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1108:29:1108:30:BinaryOperator:/",
          "duration": 2.0160491289999998,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1108,
              "column": 29
            },
            "end": {
              "line": 1108,
              "column": 30
            }
          },
          "replacement": "/",
          "status": "Killed",
          "description": "Replace BinaryOperator by /",
          "statusReason": "thread 'extend_query_pairs_then_mutate' panicked at url/tests/unit.rs:478:5:\nassertion `left == right` failed\n  left: \"http://localhost:7/foo/bar?auth=my-token\"\n right: \"http://localhost:6767/foo/bar?auth=my-token\"\n",
          "killedBy": [
            "extend_query_pairs_then_mutate",
            "append_trailing_slash",
            "append_empty_segment_then_mutate",
            "test_authority",
            "test_equality",
            "test_make_relative",
            "test_origin_unicode_serialization",
            "test_set_scheme_to_file_with_host",
            "test_slicing",
            "test_socket_addrs",
            "test_syntax_violation_callback",
            "test_syntax_violation_callback_lifetimes"
          ]
        },
        {
          "id": "url/src/parser.rs:1400:42:1400:43:BinaryOperator:*",
          "duration": 4.131907599,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1400,
              "column": 42
            },
            "end": {
              "line": 1400,
              "column": 43
            }
          },
          "replacement": "*",
          "status": "Survived",
          "description": "Replace BinaryOperator by *",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:975:9:1025:26:FnValue:ParseResult::new()",
          "duration": 0.406607162,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 975,
              "column": 9
            },
            "end": {
              "line": 1025,
              "column": 26
            }
          },
          "replacement": "ParseResult::new()",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new()",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:339:9:341:10:FnValue:()",
          "duration": 2.482173289,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 339,
              "column": 9
            },
            "end": {
              "line": 341,
              "column": 10
            }
          },
          "replacement": "()",
          "status": "Killed",
          "description": "Replace FnValue by ()",
          "statusReason": "thread 'test_syntax_violation_callback_lifetimes' panicked at url/tests/unit.rs:867:5:\nassertion `left == right` failed\n  left: None\n right: Some(Backslash)\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_syntax_violation_callback_lifetimes",
            "test_options_reuse",
            "test_syntax_violation_callback_types"
          ]
        },
        {
          "id": "url/src/parser.rs:896:86:896:88:BinaryOperator:||",
          "duration": 2.228308833,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 896,
              "column": 86
            },
            "end": {
              "line": 896,
              "column": 88
            }
          },
          "replacement": "||",
          "status": "Killed",
          "description": "Replace BinaryOperator by ||",
          "statusReason": "thread 'test_serialization' panicked at url/tests/unit.rs:388:37:\ncalled `Result::unwrap()` on an `Err` value: EmptyHost\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_serialization"
          ]
        },
        {
          "id": "url/src/parser.rs:1029:9:1034:30:FnValue:ParseResult::from_iter([(Host::from(String::new()), Default::default())])",
          "duration": 0.666622369,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1029,
              "column": 9
            },
            "end": {
              "line": 1034,
              "column": 30
            }
          },
          "replacement": "ParseResult::from_iter([(Host::from(String::new()), Default::default())])",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from_iter([(Host::from(String::new()), Default::default())])",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1605:24:1605:26:BinaryOperator:||",
          "duration": 2.1667370019999996,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1605,
              "column": 24
            },
            "end": {
              "line": 1605,
              "column": 26
            }
          },
          "replacement": "||",
          "status": "Killed",
          "description": "Replace BinaryOperator by ||",
          "statusReason": "thread 'test_file_with_drive_and_path' panicked at url/tests/unit.rs:1296:5:\nassertion `left == right` failed\n  left: \"file:///p://x/|?../\"\n right: \"file:///p:/x|?../\"\n",
          "killedBy": [
            "test_file_with_drive_and_path",
            "test_file_with_drive"
          ]
        },
        {
          "id": "url/src/parser.rs:1436:9:1456:48:FnValue:ParseResult::from_iter([(Some(0), Some(1))])",
          "duration": 0.403340575,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1436,
              "column": 9
            },
            "end": {
              "line": 1456,
              "column": 48
            }
          },
          "replacement": "ParseResult::from_iter([(Some(0), Some(1))])",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from_iter([(Some(0), Some(1))])",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1585:5:1585:29:FnValue:false",
          "duration": 1.375790724,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1585,
              "column": 5
            },
            "end": {
              "line": 1585,
              "column": 29
            }
          },
          "replacement": "false",
          "status": "Killed",
          "description": "Replace FnValue by false",
          "statusReason": "thread 'test_authority' panicked at url/tests/unit.rs:1237:52:\ncalled `Result::unwrap()` on an `Err` value: RelativeUrlWithoutBase\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_authority",
            "test_equality",
            "test_has_authority",
            "test_domain",
            "no_panic",
            "test_fragment",
            "issue_61",
            "test_file_with_drive",
            "issue_124",
            "parse_with_params",
            "path_backslash_fun",
            "pop_if_empty_in_bounds",
            "append_trailing_slash",
            "issue_241",
            "host_serialization",
            "host",
            "issue_197",
            "from_str",
            "issue_864",
            "extend_query_pairs_then_mutate",
            "append_empty_segment_then_mutate",
            "test_idna",
            "test_set_ip_host",
            "test_socket_addrs",
            "test_set_scheme_to_file_with_host",
            "test_syntax_violation_callback_types",
            "test_set_host",
            "test_file_with_drive_and_path",
            "test_set_href",
            "test_slicing",
            "test_strip_trailing_spaces_from_opaque_path",
            "test_non_special_path3",
            "test_null_host_with_leading_empty_path_segment",
            "test_set_empty_query",
            "test_set_empty_username_and_password",
            "test_syntax_violation_callback",
            "test_non_special_path2",
            "test_make_relative",
            "test_query",
            "test_origin_hash",
            "test_relative",
            "test_syntax_violation_callback_lifetimes",
            "test_relative_empty",
            "test_options_reuse",
            "test_origin_opaque",
            "test_origin_unicode_serialization",
            "test_set_empty_password",
            "test_serialization",
            "test_non_special_path",
            "test_set_empty_host",
            "test_leading_dots",
            "test_no_base_url",
            "test_origin_blob_equality",
            "test_set_empty_hostname"
          ]
        },
        {
          "id": "url/src/parser.rs:1627:5:1640:6:FnValue:false",
          "duration": 4.565006181999999,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1627,
              "column": 5
            },
            "end": {
              "line": 1640,
              "column": 6
            }
          },
          "replacement": "false",
          "status": "Survived",
          "description": "Replace FnValue by false",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1065:9:1093:52:FnValue:ParseResult::from((false, String::new(), Default::default()))",
          "duration": 1.091161704,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1065,
              "column": 9
            },
            "end": {
              "line": 1093,
              "column": 52
            }
          },
          "replacement": "ParseResult::from((false, String::new(), Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from((false, String::new(), Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:944:9:968:53:FnValue:ParseResult::from((1, Default::default(), Some(0), Default::default()))",
          "duration": 0.463952735,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 944,
              "column": 9
            },
            "end": {
              "line": 968,
              "column": 53
            }
          },
          "replacement": "ParseResult::from((1, Default::default(), Some(0), Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from((1, Default::default(), Some(0), Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:502:9:704:10:FnValue:ParseResult::new()",
          "duration": 0.253912525,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 502,
              "column": 9
            },
            "end": {
              "line": 704,
              "column": 10
            }
          },
          "replacement": "ParseResult::new()",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new()",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1041:9:1059:40:FnValue:ParseResult::new()",
          "duration": 0.201914273,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1041,
              "column": 9
            },
            "end": {
              "line": 1059,
              "column": 40
            }
          },
          "replacement": "ParseResult::new()",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new()",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:154:9:154:49:FnValue:false",
          "duration": 0.910076421,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 154,
              "column": 9
            },
            "end": {
              "line": 154,
              "column": 49
            }
          },
          "replacement": "false",
          "status": "Killed",
          "description": "Replace FnValue by false",
          "statusReason": "thread 'test_equality' panicked at url/tests/unit.rs:257:9:\nassertion `left == right` failed\n  left: Url { scheme: \"http\", cannot_be_a_base: false, username: \"\", password: None, host: Some(Domain(\"foo.com\")), port: None, path: \"\", query: None, fragment: None }\n right: Url { scheme: \"http\", cannot_be_a_base: false, username: \"\", password: None, host: Some(Domain(\"foo.com\")), port: None, path: \"/\", query: None, fragment: None }\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_equality",
            "test_authority",
            "test_idna",
            "path_backslash_fun",
            "test_domain",
            "test_options_reuse",
            "host",
            "test_serialization",
            "test_origin_unicode_serialization",
            "test_syntax_violation_callback_lifetimes",
            "test_set_host",
            "test_syntax_violation_callback_types"
          ]
        },
        {
          "id": "url/src/parser.rs:1380:9:1426:11:FnValue:ParseResult::from_iter([Default::default()])",
          "duration": 0.206621549,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1380,
              "column": 9
            },
            "end": {
              "line": 1426,
              "column": 11
            }
          },
          "replacement": "ParseResult::from_iter([Default::default()])",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from_iter([Default::default()])",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:467:9:493:10:FnValue:ParseResult::from_iter([Default::default()])",
          "duration": 0.201608151,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 467,
              "column": 9
            },
            "end": {
              "line": 493,
              "column": 10
            }
          },
          "replacement": "ParseResult::from_iter([Default::default()])",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from_iter([Default::default()])",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1590:5:1594:6:FnValue:ParseResult::from_iter([0])",
          "duration": 0.151972379,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1590,
              "column": 5
            },
            "end": {
              "line": 1594,
              "column": 6
            }
          },
          "replacement": "ParseResult::from_iter([0])",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from_iter([0])",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1590:10:1590:12:BinaryOperator:>",
          "duration": 1.713267424,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1590,
              "column": 10
            },
            "end": {
              "line": 1590,
              "column": 12
            }
          },
          "replacement": ">",
          "status": "Killed",
          "description": "Replace BinaryOperator by >",
          "statusReason": "thread 'extend_query_pairs_then_mutate' panicked at url/tests/unit.rs:474:64:\ncalled `Result::unwrap()` on an `Err` value: Overflow\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "extend_query_pairs_then_mutate",
            "parse_with_params",
            "test_idna",
            "test_authority",
            "test_make_relative",
            "test_no_base_url",
            "append_empty_segment_then_mutate",
            "test_file_with_drive_and_path",
            "test_non_special_path2",
            "test_non_special_path3",
            "test_domain",
            "test_null_host_with_leading_empty_path_segment",
            "test_options_reuse",
            "test_origin_blob_equality",
            "test_fragment",
            "host",
            "issue_241",
            "new_directory_paths",
            "test_origin_opaque",
            "test_origin_hash",
            "new_path_bad_utf8",
            "no_panic",
            "from_str",
            "issue_61",
            "issue_864",
            "test_has_authority",
            "test_leading_dots",
            "test_origin_unicode_serialization",
            "test_query",
            "test_relative",
            "issue_197",
            "test_set_empty_username_and_password",
            "test_set_host",
            "test_slicing",
            "test_url_from_file_path",
            "test_relative_empty",
            "append_trailing_slash",
            "host_serialization",
            "issue_124",
            "new_file_paths",
            "test_equality",
            "path_backslash_fun",
            "test_set_empty_password",
            "test_syntax_violation_callback",
            "test_set_empty_hostname",
            "test_socket_addrs",
            "test_syntax_violation_callback_lifetimes",
            "test_syntax_violation_callback_types",
            "test_strip_trailing_spaces_from_opaque_path",
            "test_set_empty_query",
            "test_set_ip_host",
            "test_serialization",
            "test_file_with_drive",
            "test_set_href",
            "test_set_scheme_to_file_with_host",
            "pop_if_empty_in_bounds",
            "test_non_special_path",
            "test_set_empty_host"
          ]
        },
        {
          "id": "url/src/parser.rs:415:9:456:10:FnValue:ParseResult::new(Default::default())",
          "duration": 1.159547244,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 415,
              "column": 9
            },
            "end": {
              "line": 456,
              "column": 10
            }
          },
          "replacement": "ParseResult::new(Default::default())",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new(Default::default())",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1436:9:1456:48:FnValue:ParseResult::new((Some(1), Some(1)))",
          "duration": 0.41040936,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1436,
              "column": 9
            },
            "end": {
              "line": 1456,
              "column": 48
            }
          },
          "replacement": "ParseResult::new((Some(1), Some(1)))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new((Some(1), Some(1)))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:975:9:1025:26:FnValue:ParseResult::from((Host::from_iter([\"xyzzy\".into()]), Default::default()))",
          "duration": 0.502287013,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 975,
              "column": 9
            },
            "end": {
              "line": 1025,
              "column": 26
            }
          },
          "replacement": "ParseResult::from((Host::from_iter([\"xyzzy\".into()]), Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from((Host::from_iter([\"xyzzy\".into()]), Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:158:9:158:42:FnValue:true",
          "duration": 1.474244342,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 158,
              "column": 9
            },
            "end": {
              "line": 158,
              "column": 42
            }
          },
          "replacement": "true",
          "status": "Killed",
          "description": "Replace FnValue by true",
          "statusReason": "thread 'test_equality' panicked at url/tests/unit.rs:267:28:\ncalled `Result::unwrap()` on an `Err` value: InvalidDomainCharacter\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_equality",
            "append_empty_segment_then_mutate",
            "extend_query_pairs_then_mutate",
            "issue_61",
            "append_trailing_slash",
            "test_authority",
            "no_panic",
            "test_options_reuse",
            "test_non_special_path3",
            "pop_if_empty_in_bounds",
            "test_set_empty_host",
            "test_set_href",
            "test_set_empty_hostname",
            "test_set_host",
            "test_make_relative",
            "test_relative",
            "test_set_scheme_to_file_with_host",
            "test_non_special_path",
            "test_origin_unicode_serialization",
            "test_non_special_path2",
            "test_relative_empty",
            "test_syntax_violation_callback_lifetimes",
            "test_syntax_violation_callback",
            "test_origin_hash",
            "test_socket_addrs",
            "test_slicing"
          ]
        },
        {
          "id": "url/src/parser.rs:1380:9:1426:11:FnValue:ParseResult::from(Default::default())",
          "duration": 0.710900179,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1380,
              "column": 9
            },
            "end": {
              "line": 1426,
              "column": 11
            }
          },
          "replacement": "ParseResult::from(Default::default())",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from(Default::default())",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1029:9:1034:30:FnValue:ParseResult::from_iter([(Host::from(\"xyzzy\".into()), Default::default())])",
          "duration": 0.708000478,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1029,
              "column": 9
            },
            "end": {
              "line": 1034,
              "column": 30
            }
          },
          "replacement": "ParseResult::from_iter([(Host::from(\"xyzzy\".into()), Default::default())])",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from_iter([(Host::from(\"xyzzy\".into()), Default::default())])",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:263:23:263:25:BinaryOperator:-=",
          "duration": 3.632888941,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 263,
              "column": 23
            },
            "end": {
              "line": 263,
              "column": 25
            }
          },
          "replacement": "-=",
          "status": "Killed",
          "description": "Replace BinaryOperator by -=",
          "statusReason": "thread 'parse_with_params' panicked at url/src/parser.rs:263:17:\nattempt to subtract with overflow\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "parse_with_params",
            "append_empty_segment_then_mutate",
            "append_trailing_slash",
            "extend_query_pairs_then_mutate",
            "test_make_relative",
            "issue_61",
            "test_domain",
            "path_backslash_fun",
            "test_equality",
            "test_idna",
            "test_options_reuse",
            "from_str",
            "test_origin_hash",
            "host",
            "test_origin_unicode_serialization",
            "test_origin_blob_equality",
            "host_serialization",
            "test_query",
            "test_serialization",
            "test_slicing",
            "test_syntax_violation_callback",
            "test_syntax_violation_callback_types",
            "test_set_host",
            "test_set_ip_host",
            "test_relative",
            "test_socket_addrs",
            "test_set_href",
            "test_set_scheme_to_file_with_host",
            "test_authority",
            "test_fragment",
            "test_has_authority",
            "test_syntax_violation_callback_lifetimes"
          ]
        },
        {
          "id": "url/src/parser.rs:1436:9:1456:48:FnValue:ParseResult::new((Some(0), Some(1)))",
          "duration": 0.151789898,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1436,
              "column": 9
            },
            "end": {
              "line": 1456,
              "column": 48
            }
          },
          "replacement": "ParseResult::new((Some(0), Some(1)))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new((Some(0), Some(1)))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:571:33:571:35:BinaryOperator:&&",
          "duration": 3.826706021,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 571,
              "column": 33
            },
            "end": {
              "line": 571,
              "column": 35
            }
          },
          "replacement": "&&",
          "status": "Survived",
          "description": "Replace BinaryOperator by &&",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1497:9:1513:11:FnValue:ParseResult::from(Default::default())",
          "duration": 1.266750617,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1497,
              "column": 9
            },
            "end": {
              "line": 1513,
              "column": 11
            }
          },
          "replacement": "ParseResult::from(Default::default())",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from(Default::default())",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1619:5:1622:83:FnValue:true",
          "duration": 2.6269524270000004,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1619,
              "column": 5
            },
            "end": {
              "line": 1622,
              "column": 83
            }
          },
          "replacement": "true",
          "status": "Killed",
          "description": "Replace FnValue by true",
          "statusReason": "thread 'test_make_relative' panicked at url/tests/unit.rs:1198:9:\nassertion `left == right` failed: base: http://127.0.0.1:8080/test/, uri: http://127.0.0.1:8080/test, relative: ../test\n  left: \"http://127.0.0.1:8080/test/test\"\n right: \"http://127.0.0.1:8080/test\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_make_relative"
          ]
        },
        {
          "id": "url/src/parser.rs:834:9:860:10:FnValue:ParseResult::from_iter([Default::default()])",
          "duration": 0.512639578,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 834,
              "column": 9
            },
            "end": {
              "line": 860,
              "column": 10
            }
          },
          "replacement": "ParseResult::from_iter([Default::default()])",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from_iter([Default::default()])",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1205:29:1205:31:BinaryOperator:||",
          "duration": 2.620032439,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1205,
              "column": 29
            },
            "end": {
              "line": 1205,
              "column": 31
            }
          },
          "replacement": "||",
          "status": "Killed",
          "description": "Replace BinaryOperator by ||",
          "statusReason": "thread 'test_file_with_drive' panicked at url/tests/unit.rs:1272:5:\nassertion `left == right` failed\n  left: \"file:///p/:?../\"\n right: \"file:///p:?../\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_file_with_drive",
            "test_set_empty_host",
            "test_file_with_drive_and_path",
            "issue_124",
            "test_syntax_violation_callback_types"
          ]
        },
        {
          "id": "url/src/parser.rs:1150:51:1150:53:BinaryOperator:!=",
          "duration": 2.9274182609999997,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1150,
              "column": 51
            },
            "end": {
              "line": 1150,
              "column": 53
            }
          },
          "replacement": "!=",
          "status": "Killed",
          "description": "Replace BinaryOperator by !=",
          "statusReason": "thread 'test_authority' panicked at url/src/parser.rs:1450:18:\nProgramming error. parse_query_and_fragment() called without ? or #\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_authority",
            "test_non_special_path3",
            "test_non_special_path",
            "test_non_special_path2",
            "test_set_empty_hostname",
            "test_set_empty_query",
            "test_set_empty_username_and_password",
            "test_set_empty_password",
            "test_set_empty_host",
            "test_set_host",
            "test_socket_addrs"
          ]
        },
        {
          "id": "url/src/parser.rs:1400:42:1400:43:BinaryOperator:-",
          "duration": 5.190600676000001,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1400,
              "column": 42
            },
            "end": {
              "line": 1400,
              "column": 43
            }
          },
          "replacement": "-",
          "status": "Survived",
          "description": "Replace BinaryOperator by -",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:797:45:797:47:BinaryOperator:!=",
          "duration": 3.2743945340000002,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 797,
              "column": 45
            },
            "end": {
              "line": 797,
              "column": 47
            }
          },
          "replacement": "!=",
          "status": "Killed",
          "description": "Replace BinaryOperator by !=",
          "statusReason": "thread 'test_make_relative' panicked at url/tests/unit.rs:1198:9:\nassertion `left == right` failed: base: http://127.0.0.1:8080/test, uri: http://127.0.0.1:8080/test/, relative: test/\n  left: \"http://127.0.0.1:8080//test/\"\n right: \"http://127.0.0.1:8080/test/\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_make_relative"
          ]
        },
        {
          "id": "url/src/parser.rs:1497:9:1513:11:FnValue:ParseResult::new(Default::default())",
          "duration": 0.312320342,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1497,
              "column": 9
            },
            "end": {
              "line": 1513,
              "column": 11
            }
          },
          "replacement": "ParseResult::new(Default::default())",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new(Default::default())",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:944:9:968:53:FnValue:ParseResult::from_iter([(0, Default::default(), None, Default::default())])",
          "duration": 0.152058389,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 944,
              "column": 9
            },
            "end": {
              "line": 968,
              "column": 53
            }
          },
          "replacement": "ParseResult::from_iter([(0, Default::default(), None, Default::default())])",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from_iter([(0, Default::default(), None, Default::default())])",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1465:9:1493:18:FnValue:None",
          "duration": 2.423951286,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1465,
              "column": 9
            },
            "end": {
              "line": 1493,
              "column": 18
            }
          },
          "replacement": "None",
          "status": "Killed",
          "description": "Replace FnValue by None",
          "statusReason": "thread 'append_empty_segment_then_mutate' panicked at url/tests/unit.rs:497:5:\nassertion `left == right` failed\n  left: \"http://localhost:6767/foo/bar?\"\n right: \"http://localhost:6767/foo/bar?a=b\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "append_empty_segment_then_mutate",
            "append_trailing_slash",
            "extend_query_pairs_then_mutate",
            "parse_with_params",
            "test_file_with_drive_and_path",
            "test_file_with_drive",
            "test_make_relative",
            "test_query",
            "test_serialization",
            "test_slicing"
          ]
        },
        {
          "id": "url/src/parser.rs:896:38:896:40:BinaryOperator:!=",
          "duration": 1.5311839930000002,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 896,
              "column": 38
            },
            "end": {
              "line": 896,
              "column": 40
            }
          },
          "replacement": "!=",
          "status": "Killed",
          "description": "Replace BinaryOperator by !=",
          "statusReason": "thread 'test_serialization' panicked at url/tests/unit.rs:388:37:\ncalled `Result::unwrap()` on an `Err` value: EmptyHost\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_serialization"
          ]
        },
        {
          "id": "url/src/parser.rs:1121:27:1121:29:BinaryOperator:&&",
          "duration": 1.260794711,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1121,
              "column": 27
            },
            "end": {
              "line": 1121,
              "column": 29
            }
          },
          "replacement": "&&",
          "status": "Killed",
          "description": "Replace BinaryOperator by &&",
          "statusReason": "thread 'test_equality' panicked at url/tests/unit.rs:257:9:\nassertion `left == right` failed\n  left: Url { scheme: \"https\", cannot_be_a_base: false, username: \"\", password: None, host: Some(Domain(\"example.com\")), port: None, path: \"/\", query: None, fragment: None }\n right: Url { scheme: \"https\", cannot_be_a_base: false, username: \"\", password: None, host: Some(Domain(\"example.com\")), port: Some(443), path: \"/\", query: None, fragment: None }\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_equality",
            "test_authority"
          ]
        },
        {
          "id": "url/src/parser.rs:999:39:999:41:BinaryOperator:-=",
          "duration": 1.82616538,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 999,
              "column": 39
            },
            "end": {
              "line": 999,
              "column": 41
            }
          },
          "replacement": "-=",
          "status": "Killed",
          "description": "Replace BinaryOperator by -=",
          "statusReason": "thread 'host' panicked at url/tests/unit.rs:301:38:\ncalled `Result::unwrap()` on an `Err` value: InvalidPort\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host",
            "test_authority",
            "test_socket_addrs"
          ]
        },
        {
          "id": "url/src/parser.rs:1228:77:1228:78:BinaryOperator:/",
          "duration": 1.73428976,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1228,
              "column": 77
            },
            "end": {
              "line": 1228,
              "column": 78
            }
          },
          "replacement": "/",
          "status": "Killed",
          "description": "Replace BinaryOperator by /",
          "statusReason": "thread 'test_make_relative' panicked at url/tests/unit.rs:1198:9:\nassertion `left == right` failed: base: http://127.0.0.1:8080/test/, uri: http://127.0.0.1:8080/test, relative: ../test\n  left: \"http://127.0.0.1:8080/test/../test\"\n right: \"http://127.0.0.1:8080/test\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_make_relative",
            "test_file_with_drive",
            "test_syntax_violation_callback_types"
          ]
        },
        {
          "id": "url/src/parser.rs:571:63:571:65:BinaryOperator:!=",
          "duration": 2.969822035,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 571,
              "column": 63
            },
            "end": {
              "line": 571,
              "column": 65
            }
          },
          "replacement": "!=",
          "status": "Survived",
          "description": "Replace BinaryOperator by !=",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1104:9:1124:30:FnValue:ParseResult::new((Some(1), Default::default()))",
          "duration": 0.47323271,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1104,
              "column": 9
            },
            "end": {
              "line": 1124,
              "column": 30
            }
          },
          "replacement": "ParseResult::new((Some(1), Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new((Some(1), Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:944:9:968:53:FnValue:ParseResult::new((1, Default::default(), Some(0), Default::default()))",
          "duration": 0.201477177,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 944,
              "column": 9
            },
            "end": {
              "line": 968,
              "column": 53
            }
          },
          "replacement": "ParseResult::new((1, Default::default(), Some(0), Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new((1, Default::default(), Some(0), Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:406:25:406:27:BinaryOperator:!=",
          "duration": 0.9177188980000001,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 406,
              "column": 25
            },
            "end": {
              "line": 406,
              "column": 27
            }
          },
          "replacement": "!=",
          "status": "Killed",
          "description": "Replace BinaryOperator by !=",
          "statusReason": "thread 'test_file_with_drive_and_path' panicked at url/tests/unit.rs:1300:5:\nassertion `left == right` failed\n  left: \"a:\"\n right: \"file:///p:/a\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_file_with_drive_and_path",
            "issue_61",
            "test_make_relative",
            "test_file_with_drive"
          ]
        },
        {
          "id": "url/src/parser.rs:1319:13:1319:15:BinaryOperator:||",
          "duration": 2.822915664,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1319,
              "column": 13
            },
            "end": {
              "line": 1319,
              "column": 15
            }
          },
          "replacement": "||",
          "status": "Killed",
          "description": "Replace BinaryOperator by ||",
          "statusReason": "thread 'test_file_with_drive_and_path' panicked at url/tests/unit.rs:1300:5:\nassertion `left == right` failed\n  left: \"file:///p:/x|a\"\n right: \"file:///p:/a\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_file_with_drive_and_path"
          ]
        },
        {
          "id": "url/src/parser.rs:571:58:571:60:BinaryOperator:&&",
          "duration": 5.850499427,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 571,
              "column": 58
            },
            "end": {
              "line": 571,
              "column": 60
            }
          },
          "replacement": "&&",
          "status": "Survived",
          "description": "Replace BinaryOperator by &&",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:571:38:571:40:BinaryOperator:!=",
          "duration": 6.110341149,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 571,
              "column": 38
            },
            "end": {
              "line": 571,
              "column": 40
            }
          },
          "replacement": "!=",
          "status": "Survived",
          "description": "Replace BinaryOperator by !=",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:199:28:199:29:BinaryOperator:>",
          "duration": 6.304280728,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 199,
              "column": 28
            },
            "end": {
              "line": 199,
              "column": 29
            }
          },
          "replacement": ">",
          "status": "Survived",
          "description": "Replace BinaryOperator by >",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:241:9:246:10:FnValue:None",
          "duration": 0.962165204,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 241,
              "column": 9
            },
            "end": {
              "line": 246,
              "column": 10
            }
          },
          "replacement": "None",
          "status": "Killed",
          "description": "Replace FnValue by None",
          "statusReason": "thread 'append_empty_segment_then_mutate' panicked at url/tests/unit.rs:497:5:\nassertion `left == right` failed\n  left: \"http://localhost/:6767/foo/bar?a=b\"\n right: \"http://localhost:6767/foo/bar?a=b\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "append_empty_segment_then_mutate",
            "extend_query_pairs_then_mutate",
            "path_backslash_fun",
            "test_set_empty_password",
            "append_trailing_slash",
            "test_equality",
            "test_authority",
            "test_set_empty_query",
            "test_set_empty_username_and_password",
            "test_set_host",
            "test_slicing",
            "test_syntax_violation_callback_lifetimes",
            "test_syntax_violation_callback",
            "test_non_special_path",
            "test_non_special_path2",
            "test_socket_addrs",
            "test_relative",
            "test_relative_empty",
            "test_set_empty_hostname",
            "test_make_relative",
            "test_non_special_path3",
            "test_set_scheme_to_file_with_host",
            "test_set_empty_host",
            "test_origin_unicode_serialization"
          ]
        },
        {
          "id": "url/src/parser.rs:1605:5:1605:68:FnValue:false",
          "duration": 0.958078757,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1605,
              "column": 5
            },
            "end": {
              "line": 1605,
              "column": 68
            }
          },
          "replacement": "false",
          "status": "Killed",
          "description": "Replace FnValue by false",
          "statusReason": "thread 'test_file_with_drive' panicked at url/tests/unit.rs:1286:9:\nassertion `left == right` failed\n  left: \"file:///a\"\n right: \"file:///p:/a\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_file_with_drive",
            "test_syntax_violation_callback_types"
          ]
        },
        {
          "id": "url/src/parser.rs:263:23:263:25:BinaryOperator:*=",
          "duration": 2.083164907,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 263,
              "column": 23
            },
            "end": {
              "line": 263,
              "column": 25
            }
          },
          "replacement": "*=",
          "status": "Survived",
          "description": "Replace BinaryOperator by *=",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:217:28:217:29:BinaryOperator:==",
          "duration": 1.363874369,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 217,
              "column": 28
            },
            "end": {
              "line": 217,
              "column": 29
            }
          },
          "replacement": "==",
          "status": "Killed",
          "description": "Replace BinaryOperator by ==",
          "statusReason": "thread 'test_syntax_violation_callback_types' panicked at url/tests/unit.rs:896:9:\nassertion `left == right` failed\n  left: None\n right: Some(C0SpaceIgnored)\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_syntax_violation_callback_types",
            "test_options_reuse"
          ]
        },
        {
          "id": "url/src/parser.rs:869:9:935:38:FnValue:ParseResult::from((0, Default::default()))",
          "duration": 0.407393806,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 869,
              "column": 9
            },
            "end": {
              "line": 935,
              "column": 38
            }
          },
          "replacement": "ParseResult::from((0, Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from((0, Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1391:39:1391:41:BinaryOperator:!=",
          "duration": 3.027012509,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1391,
              "column": 39
            },
            "end": {
              "line": 1391,
              "column": 41
            }
          },
          "replacement": "!=",
          "status": "Survived",
          "description": "Replace BinaryOperator by !=",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1392:78:1392:80:BinaryOperator:!=",
          "duration": 1.513266382,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1392,
              "column": 78
            },
            "end": {
              "line": 1392,
              "column": 80
            }
          },
          "replacement": "!=",
          "status": "Killed",
          "description": "Replace BinaryOperator by !=",
          "statusReason": "thread 'pop_if_empty_in_bounds' panicked at url/src/parser.rs:1396:24:\nindex out of bounds: the len is 4 but the index is 4\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "pop_if_empty_in_bounds",
            "test_file_with_drive",
            "test_file_with_drive_and_path"
          ]
        },
        {
          "id": "url/src/parser.rs:932:25:932:27:BinaryOperator:&&",
          "duration": 1.021012766,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 932,
              "column": 25
            },
            "end": {
              "line": 932,
              "column": 27
            }
          },
          "replacement": "&&",
          "status": "Killed",
          "description": "Replace BinaryOperator by &&",
          "statusReason": "thread 'test_non_special_path3' panicked at url/tests/unit.rs:970:5:\nassertion `left == right` failed\n  left: \"postgres://postgreslocalhost/\"\n right: \"postgres://postgres@localhost/\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_non_special_path3",
            "test_serialization",
            "test_set_empty_hostname",
            "test_non_special_path2",
            "test_non_special_path",
            "test_authority"
          ]
        },
        {
          "id": "url/src/parser.rs:502:9:704:10:FnValue:ParseResult::from_iter([Default::default()])",
          "duration": 0.465560637,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 502,
              "column": 9
            },
            "end": {
              "line": 704,
              "column": 10
            }
          },
          "replacement": "ParseResult::from_iter([Default::default()])",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from_iter([Default::default()])",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1436:9:1456:48:FnValue:ParseResult::from_iter([(Some(1), Some(0))])",
          "duration": 1.23404685,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1436,
              "column": 9
            },
            "end": {
              "line": 1456,
              "column": 48
            }
          },
          "replacement": "ParseResult::from_iter([(Some(1), Some(0))])",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from_iter([(Some(1), Some(0))])",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1436:9:1456:48:FnValue:ParseResult::from((Some(1), Some(0)))",
          "duration": 0.463051413,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1436,
              "column": 9
            },
            "end": {
              "line": 1456,
              "column": 48
            }
          },
          "replacement": "ParseResult::from((Some(1), Some(0)))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from((Some(1), Some(0)))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1436:9:1456:48:FnValue:ParseResult::from((None, None))",
          "duration": 0.406851735,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1436,
              "column": 9
            },
            "end": {
              "line": 1456,
              "column": 48
            }
          },
          "replacement": "ParseResult::from((None, None))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from((None, None))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1065:9:1093:52:FnValue:ParseResult::from((true, String::new(), Default::default()))",
          "duration": 0.610916015,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1065,
              "column": 9
            },
            "end": {
              "line": 1093,
              "column": 52
            }
          },
          "replacement": "ParseResult::from((true, String::new(), Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from((true, String::new(), Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1065:9:1093:52:FnValue:ParseResult::from_iter([(true, String::new(), Default::default())])",
          "duration": 0.202316457,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1065,
              "column": 9
            },
            "end": {
              "line": 1093,
              "column": 52
            }
          },
          "replacement": "ParseResult::from_iter([(true, String::new(), Default::default())])",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from_iter([(true, String::new(), Default::default())])",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1332:61:1332:62:BinaryOperator:*",
          "duration": 0.758459866,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1332,
              "column": 61
            },
            "end": {
              "line": 1332,
              "column": 62
            }
          },
          "replacement": "*",
          "status": "Killed",
          "description": "Replace BinaryOperator by *",
          "statusReason": "thread 'test_file_with_drive' panicked at url/tests/unit.rs:1286:9:\nassertion `left == right` failed\n  left: \"file:///a\"\n right: \"file:///p:/a\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_file_with_drive",
            "test_make_relative"
          ]
        },
        {
          "id": "url/src/parser.rs:1619:13:1619:15:BinaryOperator:<",
          "duration": 0.962098691,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1619,
              "column": 13
            },
            "end": {
              "line": 1619,
              "column": 15
            }
          },
          "replacement": "<",
          "status": "Killed",
          "description": "Replace BinaryOperator by <",
          "statusReason": "thread 'test_file_with_drive' panicked at url/tests/unit.rs:1286:9:\nassertion `left == right` failed\n  left: \"file:///a\"\n right: \"file:///p:/a\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_file_with_drive",
            "test_syntax_violation_callback_types"
          ]
        },
        {
          "id": "url/src/parser.rs:999:39:999:41:BinaryOperator:*=",
          "duration": 1.016240489,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 999,
              "column": 39
            },
            "end": {
              "line": 999,
              "column": 41
            }
          },
          "replacement": "*=",
          "status": "Killed",
          "description": "Replace BinaryOperator by *=",
          "statusReason": "thread 'test_authority' panicked at url/tests/unit.rs:1252:5:\nassertion `left == right` failed\n  left: \":password@[::1]\"\n right: \":password@[::1]:8080\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_authority",
            "test_socket_addrs"
          ]
        },
        {
          "id": "url/src/parser.rs:975:9:1025:26:FnValue:ParseResult::new((Host::from_iter([String::new()]), Default::default()))",
          "duration": 0.459578912,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 975,
              "column": 9
            },
            "end": {
              "line": 1025,
              "column": 26
            }
          },
          "replacement": "ParseResult::new((Host::from_iter([String::new()]), Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new((Host::from_iter([String::new()]), Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1573:5:1573:14:FnValue:true",
          "duration": 1.62098923,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1573,
              "column": 5
            },
            "end": {
              "line": 1573,
              "column": 14
            }
          },
          "replacement": "true",
          "status": "Killed",
          "description": "Replace FnValue by true",
          "statusReason": "thread 'extend_query_pairs_then_mutate' panicked at url/tests/unit.rs:474:64:\ncalled `Result::unwrap()` on an `Err` value: RelativeUrlWithoutBase\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "extend_query_pairs_then_mutate",
            "host_serialization",
            "issue_124",
            "issue_197",
            "issue_241",
            "from_str",
            "host",
            "test_make_relative",
            "test_file_with_drive",
            "test_file_with_drive_and_path",
            "append_empty_segment_then_mutate",
            "test_non_special_path",
            "append_trailing_slash",
            "test_non_special_path3",
            "issue_864",
            "issue_61",
            "no_panic",
            "test_no_base_url",
            "test_null_host_with_leading_empty_path_segment",
            "path_backslash_fun",
            "parse_with_params",
            "test_options_reuse",
            "pop_if_empty_in_bounds",
            "test_non_special_path2",
            "test_authority",
            "test_equality",
            "test_origin_unicode_serialization",
            "test_origin_opaque",
            "test_leading_dots",
            "test_relative_empty",
            "test_serialization",
            "test_query",
            "test_relative",
            "test_origin_hash",
            "test_origin_blob_equality",
            "test_domain",
            "test_fragment",
            "test_has_authority",
            "test_syntax_violation_callback_types",
            "test_idna",
            "test_syntax_violation_callback_lifetimes",
            "test_set_empty_password",
            "test_set_empty_query",
            "test_set_empty_username_and_password",
            "test_set_host",
            "test_set_empty_host",
            "test_set_href",
            "test_set_scheme_to_file_with_host",
            "test_set_empty_hostname",
            "test_strip_trailing_spaces_from_opaque_path",
            "test_slicing",
            "test_socket_addrs",
            "test_syntax_violation_callback",
            "test_set_ip_host"
          ]
        },
        {
          "id": "url/src/parser.rs:839:46:839:48:BinaryOperator:==",
          "duration": 1.282362201,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 839,
              "column": 46
            },
            "end": {
              "line": 839,
              "column": 48
            }
          },
          "replacement": "==",
          "status": "Killed",
          "description": "Replace BinaryOperator by ==",
          "statusReason": "thread 'pop_if_empty_in_bounds' panicked at url/tests/unit.rs:1005:38:\ncalled `Result::unwrap()` on an `Err` value: EmptyHost\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "pop_if_empty_in_bounds"
          ]
        },
        {
          "id": "url/src/parser.rs:1436:9:1456:48:FnValue:ParseResult::new((None, Some(1)))",
          "duration": 0.520088365,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1436,
              "column": 9
            },
            "end": {
              "line": 1456,
              "column": 48
            }
          },
          "replacement": "ParseResult::new((None, Some(1)))",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new((None, Some(1)))",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1108:34:1108:35:BinaryOperator:*",
          "duration": 1.76555791,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 1108,
              "column": 34
            },
            "end": {
              "line": 1108,
              "column": 35
            }
          },
          "replacement": "*",
          "status": "Killed",
          "description": "Replace BinaryOperator by *",
          "statusReason": "thread 'append_empty_segment_then_mutate' panicked at url/tests/unit.rs:497:5:\nassertion `left == right` failed\n  left: \"http://localhost:0/foo/bar?a=b\"\n right: \"http://localhost:6767/foo/bar?a=b\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "append_empty_segment_then_mutate",
            "extend_query_pairs_then_mutate",
            "append_trailing_slash",
            "test_equality",
            "test_authority",
            "test_make_relative",
            "test_origin_unicode_serialization",
            "test_set_scheme_to_file_with_host",
            "test_slicing",
            "test_socket_addrs",
            "test_syntax_violation_callback",
            "test_syntax_violation_callback_lifetimes"
          ]
        },
        {
          "id": "url/src/parser.rs:1436:9:1456:48:FnValue:ParseResult::from_iter([(None, None)])",
          "duration": 0.766091573,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1436,
              "column": 9
            },
            "end": {
              "line": 1456,
              "column": 48
            }
          },
          "replacement": "ParseResult::from_iter([(None, None)])",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from_iter([(None, None)])",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:760:63:760:64:BinaryOperator:-",
          "duration": 4.130038675,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 760,
              "column": 63
            },
            "end": {
              "line": 760,
              "column": 64
            }
          },
          "replacement": "-",
          "status": "Survived",
          "description": "Replace BinaryOperator by -",
          "killedBy": []
        },
        {
          "id": "url/src/parser.rs:1029:9:1034:30:FnValue:ParseResult::from_iter([(Host::from_iter([String::new()]), Default::default())])",
          "duration": 0.658261615,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 1029,
              "column": 9
            },
            "end": {
              "line": 1034,
              "column": 30
            }
          },
          "replacement": "ParseResult::from_iter([(Host::from_iter([String::new()]), Default::default())])",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from_iter([(Host::from_iter([String::new()]), Default::default())])",
          "killedBy": []
        }
      ],
      "source": "// Copyright 2013-2016 The rust-url developers.\n//\n// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n// option. This file may not be copied, modified, or distributed\n// except according to those terms.\n\nuse std::error::Error;\nuse std::fmt::{self, Formatter, Write};\nuse std::str;\n\nuse crate::host::{Host, HostInternal};\nuse crate::Url;\nuse form_urlencoded::EncodingOverride;\nuse percent_encoding::{percent_encode, utf8_percent_encode, AsciiSet, CONTROLS};\n\n/// https://url.spec.whatwg.org/#fragment-percent-encode-set\nconst FRAGMENT: &AsciiSet = &CONTROLS.add(b' ').add(b'\"').add(b'<').add(b'>').add(b'`');\n\n/// https://url.spec.whatwg.org/#path-percent-encode-set\nconst PATH: &AsciiSet = &FRAGMENT.add(b'#').add(b'?').add(b'{').add(b'}');\n\n/// https://url.spec.whatwg.org/#userinfo-percent-encode-set\npub(crate) const USERINFO: &AsciiSet = &PATH\n    .add(b'/')\n    .add(b':')\n    .add(b';')\n    .add(b'=')\n    .add(b'@')\n    .add(b'[')\n    .add(b'\\\\')\n    .add(b']')\n    .add(b'^')\n    .add(b'|');\n\npub(crate) const PATH_SEGMENT: &AsciiSet = &PATH.add(b'/').add(b'%');\n\n// The backslash (\\) character is treated as a path separator in special URLs\n// so it needs to be additionally escaped in that case.\npub(crate) const SPECIAL_PATH_SEGMENT: &AsciiSet = &PATH_SEGMENT.add(b'\\\\');\n\n// https://url.spec.whatwg.org/#query-state\nconst QUERY: &AsciiSet = &CONTROLS.add(b' ').add(b'\"').add(b'#').add(b'<').add(b'>');\nconst SPECIAL_QUERY: &AsciiSet = &QUERY.add(b'\\'');\n\npub type ParseResult<T> = Result<T, ParseError>;\n\nmacro_rules! simple_enum_error {\n    ($($name: ident => $description: expr,)+) => {\n        /// Errors that can occur during parsing.\n        ///\n        /// This may be extended in the future so exhaustive matching is\n        /// discouraged with an unused variant.\n        #[derive(PartialEq, Eq, Clone, Copy, Debug)]\n        #[non_exhaustive]\n        pub enum ParseError {\n            $(\n                $name,\n            )+\n        }\n\n        impl fmt::Display for ParseError {\n            fn fmt(&self, fmt: &mut Formatter<'_>) -> fmt::Result {\n                match *self {\n                    $(\n                        ParseError::$name => fmt.write_str($description),\n                    )+\n                }\n            }\n        }\n    }\n}\n\nimpl Error for ParseError {}\n\nsimple_enum_error! {\n    EmptyHost => \"empty host\",\n    IdnaError => \"invalid international domain name\",\n    InvalidPort => \"invalid port number\",\n    InvalidIpv4Address => \"invalid IPv4 address\",\n    InvalidIpv6Address => \"invalid IPv6 address\",\n    InvalidDomainCharacter => \"invalid domain character\",\n    RelativeUrlWithoutBase => \"relative URL without a base\",\n    RelativeUrlWithCannotBeABaseBase => \"relative URL with a cannot-be-a-base base\",\n    SetHostOnCannotBeABaseUrl => \"a cannot-be-a-base URL doesn’t have a host to set\",\n    Overflow => \"URLs more than 4 GB are not supported\",\n}\n\nimpl From<::idna::Errors> for ParseError {\n    fn from(_: ::idna::Errors) -> ParseError {\n        ParseError::IdnaError\n    }\n}\n\nmacro_rules! syntax_violation_enum {\n    ($($name: ident => $description: expr,)+) => {\n        /// Non-fatal syntax violations that can occur during parsing.\n        ///\n        /// This may be extended in the future so exhaustive matching is\n        /// discouraged with an unused variant.\n        #[derive(PartialEq, Eq, Clone, Copy, Debug)]\n        #[non_exhaustive]\n        pub enum SyntaxViolation {\n            $(\n                $name,\n            )+\n        }\n\n        impl SyntaxViolation {\n            pub fn description(&self) -> &'static str {\n                match *self {\n                    $(\n                        SyntaxViolation::$name => $description,\n                    )+\n                }\n            }\n        }\n    }\n}\n\nsyntax_violation_enum! {\n    Backslash => \"backslash\",\n    C0SpaceIgnored =>\n        \"leading or trailing control or space character are ignored in URLs\",\n    EmbeddedCredentials =>\n        \"embedding authentication information (username or password) \\\n         in an URL is not recommended\",\n    ExpectedDoubleSlash => \"expected //\",\n    ExpectedFileDoubleSlash => \"expected // after file:\",\n    FileWithHostAndWindowsDrive => \"file: with host and Windows drive letter\",\n    NonUrlCodePoint => \"non-URL code point\",\n    NullInFragment => \"NULL characters are ignored in URL fragment identifiers\",\n    PercentDecode => \"expected 2 hex digits after %\",\n    TabOrNewlineIgnored => \"tabs or newlines are ignored in URLs\",\n    UnencodedAtSign => \"unencoded @ sign in username or password\",\n}\n\nimpl fmt::Display for SyntaxViolation {\n    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {\n        fmt::Display::fmt(self.description(), f)\n    }\n}\n\n#[derive(Copy, Clone, PartialEq, Eq)]\npub enum SchemeType {\n    File,\n    SpecialNotFile,\n    NotSpecial,\n}\n\nimpl SchemeType {\n    pub fn is_special(&self) -> bool {\n        !matches!(*self, SchemeType::NotSpecial)\n    }\n\n    pub fn is_file(&self) -> bool {\n        matches!(*self, SchemeType::File)\n    }\n}\n\nimpl<T: AsRef<str>> From<T> for SchemeType {\n    fn from(s: T) -> Self {\n        match s.as_ref() {\n            \"http\" | \"https\" | \"ws\" | \"wss\" | \"ftp\" => SchemeType::SpecialNotFile,\n            \"file\" => SchemeType::File,\n            _ => SchemeType::NotSpecial,\n        }\n    }\n}\n\npub fn default_port(scheme: &str) -> Option<u16> {\n    match scheme {\n        \"http\" | \"ws\" => Some(80),\n        \"https\" | \"wss\" => Some(443),\n        \"ftp\" => Some(21),\n        _ => None,\n    }\n}\n\n#[derive(Clone, Debug)]\npub struct Input<'i> {\n    chars: str::Chars<'i>,\n}\n\nimpl<'i> Input<'i> {\n    pub fn new_no_trim(input: &'i str) -> Self {\n        Input {\n            chars: input.chars(),\n        }\n    }\n\n    pub fn new_trim_tab_and_newlines(\n        original_input: &'i str,\n        vfn: Option<&dyn Fn(SyntaxViolation)>,\n    ) -> Self {\n        let input = original_input.trim_matches(ascii_tab_or_new_line);\n        if let Some(vfn) = vfn {\n            if input.len() < original_input.len() {\n                vfn(SyntaxViolation::C0SpaceIgnored)\n            }\n            if input.chars().any(|c| matches!(c, '\\t' | '\\n' | '\\r')) {\n                vfn(SyntaxViolation::TabOrNewlineIgnored)\n            }\n        }\n        Input {\n            chars: input.chars(),\n        }\n    }\n\n    pub fn new_trim_c0_control_and_space(\n        original_input: &'i str,\n        vfn: Option<&dyn Fn(SyntaxViolation)>,\n    ) -> Self {\n        let input = original_input.trim_matches(c0_control_or_space);\n        if let Some(vfn) = vfn {\n            if input.len() < original_input.len() {\n                vfn(SyntaxViolation::C0SpaceIgnored)\n            }\n            if input.chars().any(|c| matches!(c, '\\t' | '\\n' | '\\r')) {\n                vfn(SyntaxViolation::TabOrNewlineIgnored)\n            }\n        }\n        Input {\n            chars: input.chars(),\n        }\n    }\n\n    #[inline]\n    pub fn is_empty(&self) -> bool {\n        self.clone().next().is_none()\n    }\n\n    #[inline]\n    fn starts_with<P: Pattern>(&self, p: P) -> bool {\n        p.split_prefix(&mut self.clone())\n    }\n\n    #[inline]\n    pub fn split_prefix<P: Pattern>(&self, p: P) -> Option<Self> {\n        let mut remaining = self.clone();\n        if p.split_prefix(&mut remaining) {\n            Some(remaining)\n        } else {\n            None\n        }\n    }\n\n    #[inline]\n    fn split_first(&self) -> (Option<char>, Self) {\n        let mut remaining = self.clone();\n        (remaining.next(), remaining)\n    }\n\n    #[inline]\n    fn count_matching<F: Fn(char) -> bool>(&self, f: F) -> (u32, Self) {\n        let mut count = 0;\n        let mut remaining = self.clone();\n        loop {\n            let mut input = remaining.clone();\n            if matches!(input.next(), Some(c) if f(c)) {\n                remaining = input;\n                count += 1;\n            } else {\n                return (count, remaining);\n            }\n        }\n    }\n\n    #[inline]\n    fn next_utf8(&mut self) -> Option<(char, &'i str)> {\n        loop {\n            let utf8 = self.chars.as_str();\n            match self.chars.next() {\n                Some(c) => {\n                    if !matches!(c, '\\t' | '\\n' | '\\r') {\n                        return Some((c, &utf8[..c.len_utf8()]));\n                    }\n                }\n                None => return None,\n            }\n        }\n    }\n}\n\npub trait Pattern {\n    fn split_prefix(self, input: &mut Input) -> bool;\n}\n\nimpl Pattern for char {\n    fn split_prefix(self, input: &mut Input) -> bool {\n        input.next() == Some(self)\n    }\n}\n\nimpl<'a> Pattern for &'a str {\n    fn split_prefix(self, input: &mut Input) -> bool {\n        for c in self.chars() {\n            if input.next() != Some(c) {\n                return false;\n            }\n        }\n        true\n    }\n}\n\nimpl<F: FnMut(char) -> bool> Pattern for F {\n    fn split_prefix(self, input: &mut Input) -> bool {\n        input.next().map_or(false, self)\n    }\n}\n\nimpl<'i> Iterator for Input<'i> {\n    type Item = char;\n    fn next(&mut self) -> Option<char> {\n        self.chars\n            .by_ref()\n            .find(|&c| !matches!(c, '\\t' | '\\n' | '\\r'))\n    }\n}\n\npub struct Parser<'a> {\n    pub serialization: String,\n    pub base_url: Option<&'a Url>,\n    pub query_encoding_override: EncodingOverride<'a>,\n    pub violation_fn: Option<&'a dyn Fn(SyntaxViolation)>,\n    pub context: Context,\n}\n\n#[derive(PartialEq, Eq, Copy, Clone)]\npub enum Context {\n    UrlParser,\n    Setter,\n    PathSegmentSetter,\n}\n\nimpl<'a> Parser<'a> {\n    fn log_violation(&self, v: SyntaxViolation) {\n        if let Some(f) = self.violation_fn {\n            f(v)\n        }\n    }\n\n    fn log_violation_if(&self, v: SyntaxViolation, test: impl FnOnce() -> bool) {\n        if let Some(f) = self.violation_fn {\n            if test() {\n                f(v)\n            }\n        }\n    }\n\n    pub fn for_setter(serialization: String) -> Parser<'a> {\n        Parser {\n            serialization,\n            base_url: None,\n            query_encoding_override: None,\n            violation_fn: None,\n            context: Context::Setter,\n        }\n    }\n\n    /// https://url.spec.whatwg.org/#concept-basic-url-parser\n    pub fn parse_url(mut self, input: &str) -> ParseResult<Url> {\n        let input = Input::new_trim_c0_control_and_space(input, self.violation_fn);\n        if let Ok(remaining) = self.parse_scheme(input.clone()) {\n            return self.parse_with_scheme(remaining);\n        }\n\n        // No-scheme state\n        if let Some(base_url) = self.base_url {\n            if input.starts_with('#') {\n                self.fragment_only(base_url, input)\n            } else if base_url.cannot_be_a_base() {\n                Err(ParseError::RelativeUrlWithCannotBeABaseBase)\n            } else {\n                let scheme_type = SchemeType::from(base_url.scheme());\n                if scheme_type.is_file() {\n                    self.parse_file(input, scheme_type, Some(base_url))\n                } else {\n                    self.parse_relative(input, scheme_type, base_url)\n                }\n            }\n        } else {\n            Err(ParseError::RelativeUrlWithoutBase)\n        }\n    }\n\n    pub fn parse_scheme<'i>(&mut self, mut input: Input<'i>) -> Result<Input<'i>, ()> {\n        if input.is_empty() || !input.starts_with(ascii_alpha) {\n            return Err(());\n        }\n        debug_assert!(self.serialization.is_empty());\n        while let Some(c) = input.next() {\n            match c {\n                'a'..='z' | 'A'..='Z' | '0'..='9' | '+' | '-' | '.' => {\n                    self.serialization.push(c.to_ascii_lowercase())\n                }\n                ':' => return Ok(input),\n                _ => {\n                    self.serialization.clear();\n                    return Err(());\n                }\n            }\n        }\n        // EOF before ':'\n        if self.context == Context::Setter {\n            Ok(input)\n        } else {\n            self.serialization.clear();\n            Err(())\n        }\n    }\n\n    fn parse_with_scheme(mut self, input: Input<'_>) -> ParseResult<Url> {\n        use crate::SyntaxViolation::{ExpectedDoubleSlash, ExpectedFileDoubleSlash};\n        let scheme_end = to_u32(self.serialization.len())?;\n        let scheme_type = SchemeType::from(&self.serialization);\n        self.serialization.push(':');\n        match scheme_type {\n            SchemeType::File => {\n                self.log_violation_if(ExpectedFileDoubleSlash, || !input.starts_with(\"//\"));\n                let base_file_url = self.base_url.and_then(|base| {\n                    if base.scheme() == \"file\" {\n                        Some(base)\n                    } else {\n                        None\n                    }\n                });\n                self.serialization.clear();\n                self.parse_file(input, scheme_type, base_file_url)\n            }\n            SchemeType::SpecialNotFile => {\n                // special relative or authority state\n                let (slashes_count, remaining) = input.count_matching(|c| matches!(c, '/' | '\\\\'));\n                if let Some(base_url) = self.base_url {\n                    if slashes_count < 2\n                        && base_url.scheme() == &self.serialization[..scheme_end as usize]\n                    {\n                        // \"Cannot-be-a-base\" URLs only happen with \"not special\" schemes.\n                        debug_assert!(!base_url.cannot_be_a_base());\n                        self.serialization.clear();\n                        return self.parse_relative(input, scheme_type, base_url);\n                    }\n                }\n                // special authority slashes state\n                self.log_violation_if(ExpectedDoubleSlash, || {\n                    input\n                        .clone()\n                        .take_while(|&c| matches!(c, '/' | '\\\\'))\n                        .collect::<String>()\n                        != \"//\"\n                });\n                self.after_double_slash(remaining, scheme_type, scheme_end)\n            }\n            SchemeType::NotSpecial => self.parse_non_special(input, scheme_type, scheme_end),\n        }\n    }\n\n    /// Scheme other than file, http, https, ws, ws, ftp.\n    fn parse_non_special(\n        mut self,\n        input: Input<'_>,\n        scheme_type: SchemeType,\n        scheme_end: u32,\n    ) -> ParseResult<Url> {\n        // path or authority state (\n        if let Some(input) = input.split_prefix(\"//\") {\n            return self.after_double_slash(input, scheme_type, scheme_end);\n        }\n        // Anarchist URL (no authority)\n        let path_start = to_u32(self.serialization.len())?;\n        let username_end = path_start;\n        let host_start = path_start;\n        let host_end = path_start;\n        let host = HostInternal::None;\n        let port = None;\n        let remaining = if let Some(input) = input.split_prefix('/') {\n            self.serialization.push('/');\n            self.parse_path(scheme_type, &mut false, path_start as usize, input)\n        } else {\n            self.parse_cannot_be_a_base_path(input)\n        };\n        self.with_query_and_fragment(\n            scheme_type,\n            scheme_end,\n            username_end,\n            host_start,\n            host_end,\n            host,\n            port,\n            path_start,\n            remaining,\n        )\n    }\n\n    fn parse_file(\n        mut self,\n        input: Input<'_>,\n        scheme_type: SchemeType,\n        base_file_url: Option<&Url>,\n    ) -> ParseResult<Url> {\n        use crate::SyntaxViolation::Backslash;\n        // file state\n        debug_assert!(self.serialization.is_empty());\n        let (first_char, input_after_first_char) = input.split_first();\n        if matches!(first_char, Some('/') | Some('\\\\')) {\n            self.log_violation_if(SyntaxViolation::Backslash, || first_char == Some('\\\\'));\n            // file slash state\n            let (next_char, input_after_next_char) = input_after_first_char.split_first();\n            if matches!(next_char, Some('/') | Some('\\\\')) {\n                self.log_violation_if(Backslash, || next_char == Some('\\\\'));\n                // file host state\n                self.serialization.push_str(\"file://\");\n                let scheme_end = \"file\".len() as u32;\n                let host_start = \"file://\".len() as u32;\n                let (path_start, mut host, remaining) =\n                    self.parse_file_host(input_after_next_char)?;\n                let mut host_end = to_u32(self.serialization.len())?;\n                let mut has_host = !matches!(host, HostInternal::None);\n                let remaining = if path_start {\n                    self.parse_path_start(SchemeType::File, &mut has_host, remaining)\n                } else {\n                    let path_start = self.serialization.len();\n                    self.serialization.push('/');\n                    self.parse_path(SchemeType::File, &mut has_host, path_start, remaining)\n                };\n\n                // For file URLs that have a host and whose path starts\n                // with the windows drive letter we just remove the host.\n                if !has_host {\n                    self.serialization\n                        .drain(host_start as usize..host_end as usize);\n                    host_end = host_start;\n                    host = HostInternal::None;\n                }\n                let (query_start, fragment_start) =\n                    self.parse_query_and_fragment(scheme_type, scheme_end, remaining)?;\n                return Ok(Url {\n                    serialization: self.serialization,\n                    scheme_end,\n                    username_end: host_start,\n                    host_start,\n                    host_end,\n                    host,\n                    port: None,\n                    path_start: host_end,\n                    query_start,\n                    fragment_start,\n                });\n            } else {\n                self.serialization.push_str(\"file://\");\n                let scheme_end = \"file\".len() as u32;\n                let host_start = \"file://\".len();\n                let mut host_end = host_start;\n                let mut host = HostInternal::None;\n                if !starts_with_windows_drive_letter_segment(&input_after_first_char) {\n                    if let Some(base_url) = base_file_url {\n                        let first_segment = base_url.path_segments().unwrap().next().unwrap();\n                        if is_normalized_windows_drive_letter(first_segment) {\n                            self.serialization.push('/');\n                            self.serialization.push_str(first_segment);\n                        } else if let Some(host_str) = base_url.host_str() {\n                            self.serialization.push_str(host_str);\n                            host_end = self.serialization.len();\n                            host = base_url.host;\n                        }\n                    }\n                }\n                // If c is the EOF code point, U+002F (/), U+005C (\\), U+003F (?), or U+0023 (#), then decrease pointer by one\n                let parse_path_input = if let Some(c) = first_char {\n                    if c == '/' || c == '\\\\' || c == '?' || c == '#' {\n                        input\n                    } else {\n                        input_after_first_char\n                    }\n                } else {\n                    input_after_first_char\n                };\n\n                let remaining =\n                    self.parse_path(SchemeType::File, &mut false, host_end, parse_path_input);\n\n                let host_start = host_start as u32;\n\n                let (query_start, fragment_start) =\n                    self.parse_query_and_fragment(scheme_type, scheme_end, remaining)?;\n\n                let host_end = host_end as u32;\n                return Ok(Url {\n                    serialization: self.serialization,\n                    scheme_end,\n                    username_end: host_start,\n                    host_start,\n                    host_end,\n                    host,\n                    port: None,\n                    path_start: host_end,\n                    query_start,\n                    fragment_start,\n                });\n            }\n        }\n        if let Some(base_url) = base_file_url {\n            match first_char {\n                None => {\n                    // Copy everything except the fragment\n                    let before_fragment = match base_url.fragment_start {\n                        Some(i) => &base_url.serialization[..i as usize],\n                        None => &*base_url.serialization,\n                    };\n                    self.serialization.push_str(before_fragment);\n                    Ok(Url {\n                        serialization: self.serialization,\n                        fragment_start: None,\n                        ..*base_url\n                    })\n                }\n                Some('?') => {\n                    // Copy everything up to the query string\n                    let before_query = match (base_url.query_start, base_url.fragment_start) {\n                        (None, None) => &*base_url.serialization,\n                        (Some(i), _) | (None, Some(i)) => base_url.slice(..i),\n                    };\n                    self.serialization.push_str(before_query);\n                    let (query_start, fragment_start) =\n                        self.parse_query_and_fragment(scheme_type, base_url.scheme_end, input)?;\n                    Ok(Url {\n                        serialization: self.serialization,\n                        query_start,\n                        fragment_start,\n                        ..*base_url\n                    })\n                }\n                Some('#') => self.fragment_only(base_url, input),\n                _ => {\n                    if !starts_with_windows_drive_letter_segment(&input) {\n                        let before_query = match (base_url.query_start, base_url.fragment_start) {\n                            (None, None) => &*base_url.serialization,\n                            (Some(i), _) | (None, Some(i)) => base_url.slice(..i),\n                        };\n                        self.serialization.push_str(before_query);\n                        self.shorten_path(SchemeType::File, base_url.path_start as usize);\n                        let remaining = self.parse_path(\n                            SchemeType::File,\n                            &mut true,\n                            base_url.path_start as usize,\n                            input,\n                        );\n                        self.with_query_and_fragment(\n                            SchemeType::File,\n                            base_url.scheme_end,\n                            base_url.username_end,\n                            base_url.host_start,\n                            base_url.host_end,\n                            base_url.host,\n                            base_url.port,\n                            base_url.path_start,\n                            remaining,\n                        )\n                    } else {\n                        self.serialization.push_str(\"file:///\");\n                        let scheme_end = \"file\".len() as u32;\n                        let path_start = \"file://\".len();\n                        let remaining =\n                            self.parse_path(SchemeType::File, &mut false, path_start, input);\n                        let (query_start, fragment_start) =\n                            self.parse_query_and_fragment(SchemeType::File, scheme_end, remaining)?;\n                        let path_start = path_start as u32;\n                        Ok(Url {\n                            serialization: self.serialization,\n                            scheme_end,\n                            username_end: path_start,\n                            host_start: path_start,\n                            host_end: path_start,\n                            host: HostInternal::None,\n                            port: None,\n                            path_start,\n                            query_start,\n                            fragment_start,\n                        })\n                    }\n                }\n            }\n        } else {\n            self.serialization.push_str(\"file:///\");\n            let scheme_end = \"file\".len() as u32;\n            let path_start = \"file://\".len();\n            let remaining = self.parse_path(SchemeType::File, &mut false, path_start, input);\n            let (query_start, fragment_start) =\n                self.parse_query_and_fragment(SchemeType::File, scheme_end, remaining)?;\n            let path_start = path_start as u32;\n            Ok(Url {\n                serialization: self.serialization,\n                scheme_end,\n                username_end: path_start,\n                host_start: path_start,\n                host_end: path_start,\n                host: HostInternal::None,\n                port: None,\n                path_start,\n                query_start,\n                fragment_start,\n            })\n        }\n    }\n\n    fn parse_relative(\n        mut self,\n        input: Input<'_>,\n        scheme_type: SchemeType,\n        base_url: &Url,\n    ) -> ParseResult<Url> {\n        // relative state\n        debug_assert!(self.serialization.is_empty());\n        let (first_char, input_after_first_char) = input.split_first();\n        match first_char {\n            None => {\n                // Copy everything except the fragment\n                let before_fragment = match base_url.fragment_start {\n                    Some(i) => &base_url.serialization[..i as usize],\n                    None => &*base_url.serialization,\n                };\n                self.serialization.push_str(before_fragment);\n                Ok(Url {\n                    serialization: self.serialization,\n                    fragment_start: None,\n                    ..*base_url\n                })\n            }\n            Some('?') => {\n                // Copy everything up to the query string\n                let before_query = match (base_url.query_start, base_url.fragment_start) {\n                    (None, None) => &*base_url.serialization,\n                    (Some(i), _) | (None, Some(i)) => base_url.slice(..i),\n                };\n                self.serialization.push_str(before_query);\n                let (query_start, fragment_start) =\n                    self.parse_query_and_fragment(scheme_type, base_url.scheme_end, input)?;\n                Ok(Url {\n                    serialization: self.serialization,\n                    query_start,\n                    fragment_start,\n                    ..*base_url\n                })\n            }\n            Some('#') => self.fragment_only(base_url, input),\n            Some('/') | Some('\\\\') => {\n                let (slashes_count, remaining) = input.count_matching(|c| matches!(c, '/' | '\\\\'));\n                if slashes_count >= 2 {\n                    self.log_violation_if(SyntaxViolation::ExpectedDoubleSlash, || {\n                        input\n                            .clone()\n                            .take_while(|&c| matches!(c, '/' | '\\\\'))\n                            .collect::<String>()\n                            != \"//\"\n                    });\n                    let scheme_end = base_url.scheme_end;\n                    debug_assert!(base_url.byte_at(scheme_end) == b':');\n                    self.serialization\n                        .push_str(base_url.slice(..scheme_end + 1));\n                    if let Some(after_prefix) = input.split_prefix(\"//\") {\n                        return self.after_double_slash(after_prefix, scheme_type, scheme_end);\n                    }\n                    return self.after_double_slash(remaining, scheme_type, scheme_end);\n                }\n                let path_start = base_url.path_start;\n                self.serialization.push_str(base_url.slice(..path_start));\n                self.serialization.push('/');\n                let remaining = self.parse_path(\n                    scheme_type,\n                    &mut true,\n                    path_start as usize,\n                    input_after_first_char,\n                );\n                self.with_query_and_fragment(\n                    scheme_type,\n                    base_url.scheme_end,\n                    base_url.username_end,\n                    base_url.host_start,\n                    base_url.host_end,\n                    base_url.host,\n                    base_url.port,\n                    base_url.path_start,\n                    remaining,\n                )\n            }\n            _ => {\n                let before_query = match (base_url.query_start, base_url.fragment_start) {\n                    (None, None) => &*base_url.serialization,\n                    (Some(i), _) | (None, Some(i)) => base_url.slice(..i),\n                };\n                self.serialization.push_str(before_query);\n                // FIXME spec says just \"remove last entry\", not the \"pop\" algorithm\n                self.pop_path(scheme_type, base_url.path_start as usize);\n                // A special url always has a path.\n                // A path always starts with '/'\n                if self.serialization.len() == base_url.path_start as usize\n                    && (SchemeType::from(base_url.scheme()).is_special() || !input.is_empty())\n                {\n                    self.serialization.push('/');\n                }\n                let remaining = match input.split_first() {\n                    (Some('/'), remaining) => self.parse_path(\n                        scheme_type,\n                        &mut true,\n                        base_url.path_start as usize,\n                        remaining,\n                    ),\n                    _ => {\n                        self.parse_path(scheme_type, &mut true, base_url.path_start as usize, input)\n                    }\n                };\n                self.with_query_and_fragment(\n                    scheme_type,\n                    base_url.scheme_end,\n                    base_url.username_end,\n                    base_url.host_start,\n                    base_url.host_end,\n                    base_url.host,\n                    base_url.port,\n                    base_url.path_start,\n                    remaining,\n                )\n            }\n        }\n    }\n\n    fn after_double_slash(\n        mut self,\n        input: Input<'_>,\n        scheme_type: SchemeType,\n        scheme_end: u32,\n    ) -> ParseResult<Url> {\n        self.serialization.push('/');\n        self.serialization.push('/');\n        // authority state\n        let before_authority = self.serialization.len();\n        let (username_end, remaining) = self.parse_userinfo(input, scheme_type)?;\n        let has_authority = before_authority != self.serialization.len();\n        // host state\n        let host_start = to_u32(self.serialization.len())?;\n        let (host_end, host, port, remaining) =\n            self.parse_host_and_port(remaining, scheme_end, scheme_type)?;\n        if host == HostInternal::None && has_authority {\n            return Err(ParseError::EmptyHost);\n        }\n        // path state\n        let path_start = to_u32(self.serialization.len())?;\n        let remaining = self.parse_path_start(scheme_type, &mut true, remaining);\n        self.with_query_and_fragment(\n            scheme_type,\n            scheme_end,\n            username_end,\n            host_start,\n            host_end,\n            host,\n            port,\n            path_start,\n            remaining,\n        )\n    }\n\n    /// Return (username_end, remaining)\n    fn parse_userinfo<'i>(\n        &mut self,\n        mut input: Input<'i>,\n        scheme_type: SchemeType,\n    ) -> ParseResult<(u32, Input<'i>)> {\n        let mut last_at = None;\n        let mut remaining = input.clone();\n        let mut char_count = 0;\n        while let Some(c) = remaining.next() {\n            match c {\n                '@' => {\n                    if last_at.is_some() {\n                        self.log_violation(SyntaxViolation::UnencodedAtSign)\n                    } else {\n                        self.log_violation(SyntaxViolation::EmbeddedCredentials)\n                    }\n                    last_at = Some((char_count, remaining.clone()))\n                }\n                '/' | '?' | '#' => break,\n                '\\\\' if scheme_type.is_special() => break,\n                _ => (),\n            }\n            char_count += 1;\n        }\n        let (mut userinfo_char_count, remaining) = match last_at {\n            None => return Ok((to_u32(self.serialization.len())?, input)),\n            Some((0, remaining)) => {\n                // Otherwise, if one of the following is true\n                // c is the EOF code point, U+002F (/), U+003F (?), or U+0023 (#)\n                // url is special and c is U+005C (\\)\n                // If @ flag is set and buffer is the empty string, validation error, return failure.\n                if let (Some(c), _) = remaining.split_first() {\n                    if c == '/' || c == '?' || c == '#' || (scheme_type.is_special() && c == '\\\\') {\n                        return Err(ParseError::EmptyHost);\n                    }\n                }\n                return Ok((to_u32(self.serialization.len())?, remaining));\n            }\n            Some(x) => x,\n        };\n\n        let mut username_end = None;\n        let mut has_password = false;\n        let mut has_username = false;\n        while userinfo_char_count > 0 {\n            let (c, utf8_c) = input.next_utf8().unwrap();\n            userinfo_char_count -= 1;\n            if c == ':' && username_end.is_none() {\n                // Start parsing password\n                username_end = Some(to_u32(self.serialization.len())?);\n                // We don't add a colon if the password is empty\n                if userinfo_char_count > 0 {\n                    self.serialization.push(':');\n                    has_password = true;\n                }\n            } else {\n                if !has_password {\n                    has_username = true;\n                }\n                self.check_url_code_point(c, &input);\n                self.serialization\n                    .extend(utf8_percent_encode(utf8_c, USERINFO));\n            }\n        }\n        let username_end = match username_end {\n            Some(i) => i,\n            None => to_u32(self.serialization.len())?,\n        };\n        if has_username || has_password {\n            self.serialization.push('@');\n        }\n        Ok((username_end, remaining))\n    }\n\n    fn parse_host_and_port<'i>(\n        &mut self,\n        input: Input<'i>,\n        scheme_end: u32,\n        scheme_type: SchemeType,\n    ) -> ParseResult<(u32, HostInternal, Option<u16>, Input<'i>)> {\n        let (host, remaining) = Parser::parse_host(input, scheme_type)?;\n        write!(&mut self.serialization, \"{}\", host).unwrap();\n        let host_end = to_u32(self.serialization.len())?;\n        if let Host::Domain(h) = &host {\n            if h.is_empty() {\n                // Port with an empty host\n                if remaining.starts_with(\":\") {\n                    return Err(ParseError::EmptyHost);\n                }\n                if scheme_type.is_special() {\n                    return Err(ParseError::EmptyHost);\n                }\n            }\n        };\n\n        let (port, remaining) = if let Some(remaining) = remaining.split_prefix(':') {\n            let scheme = || default_port(&self.serialization[..scheme_end as usize]);\n            Parser::parse_port(remaining, scheme, self.context)?\n        } else {\n            (None, remaining)\n        };\n        if let Some(port) = port {\n            write!(&mut self.serialization, \":{}\", port).unwrap()\n        }\n        Ok((host_end, host.into(), port, remaining))\n    }\n\n    pub fn parse_host(\n        mut input: Input<'_>,\n        scheme_type: SchemeType,\n    ) -> ParseResult<(Host<String>, Input<'_>)> {\n        if scheme_type.is_file() {\n            return Parser::get_file_host(input);\n        }\n        // Undo the Input abstraction here to avoid allocating in the common case\n        // where the host part of the input does not contain any tab or newline\n        let input_str = input.chars.as_str();\n        let mut inside_square_brackets = false;\n        let mut has_ignored_chars = false;\n        let mut non_ignored_chars = 0;\n        let mut bytes = 0;\n        for c in input_str.chars() {\n            match c {\n                ':' if !inside_square_brackets => break,\n                '\\\\' if scheme_type.is_special() => break,\n                '/' | '?' | '#' => break,\n                '\\t' | '\\n' | '\\r' => {\n                    has_ignored_chars = true;\n                }\n                '[' => {\n                    inside_square_brackets = true;\n                    non_ignored_chars += 1\n                }\n                ']' => {\n                    inside_square_brackets = false;\n                    non_ignored_chars += 1\n                }\n                _ => non_ignored_chars += 1,\n            }\n            bytes += c.len_utf8();\n        }\n        let replaced: String;\n        let host_str;\n        {\n            let host_input = input.by_ref().take(non_ignored_chars);\n            if has_ignored_chars {\n                replaced = host_input.collect();\n                host_str = &*replaced\n            } else {\n                for _ in host_input {}\n                host_str = &input_str[..bytes]\n            }\n        }\n        if scheme_type == SchemeType::SpecialNotFile && host_str.is_empty() {\n            return Err(ParseError::EmptyHost);\n        }\n        if !scheme_type.is_special() {\n            let host = Host::parse_opaque(host_str)?;\n            return Ok((host, input));\n        }\n        let host = Host::parse(host_str)?;\n        Ok((host, input))\n    }\n\n    fn get_file_host(input: Input<'_>) -> ParseResult<(Host<String>, Input<'_>)> {\n        let (_, host_str, remaining) = Parser::file_host(input)?;\n        let host = match Host::parse(&host_str)? {\n            Host::Domain(ref d) if d == \"localhost\" => Host::Domain(\"\".to_string()),\n            host => host,\n        };\n        Ok((host, remaining))\n    }\n\n    fn parse_file_host<'i>(\n        &mut self,\n        input: Input<'i>,\n    ) -> ParseResult<(bool, HostInternal, Input<'i>)> {\n        let has_host;\n        let (_, host_str, remaining) = Parser::file_host(input)?;\n        let host = if host_str.is_empty() {\n            has_host = false;\n            HostInternal::None\n        } else {\n            match Host::parse(&host_str)? {\n                Host::Domain(ref d) if d == \"localhost\" => {\n                    has_host = false;\n                    HostInternal::None\n                }\n                host => {\n                    write!(&mut self.serialization, \"{}\", host).unwrap();\n                    has_host = true;\n                    host.into()\n                }\n            }\n        };\n        Ok((has_host, host, remaining))\n    }\n\n    pub fn file_host(input: Input) -> ParseResult<(bool, String, Input)> {\n        // Undo the Input abstraction here to avoid allocating in the common case\n        // where the host part of the input does not contain any tab or newline\n        let input_str = input.chars.as_str();\n        let mut has_ignored_chars = false;\n        let mut non_ignored_chars = 0;\n        let mut bytes = 0;\n        for c in input_str.chars() {\n            match c {\n                '/' | '\\\\' | '?' | '#' => break,\n                '\\t' | '\\n' | '\\r' => has_ignored_chars = true,\n                _ => non_ignored_chars += 1,\n            }\n            bytes += c.len_utf8();\n        }\n        let replaced: String;\n        let host_str;\n        let mut remaining = input.clone();\n        {\n            let host_input = remaining.by_ref().take(non_ignored_chars);\n            if has_ignored_chars {\n                replaced = host_input.collect();\n                host_str = &*replaced\n            } else {\n                for _ in host_input {}\n                host_str = &input_str[..bytes]\n            }\n        }\n        if is_windows_drive_letter(host_str) {\n            return Ok((false, \"\".to_string(), input));\n        }\n        Ok((true, host_str.to_string(), remaining))\n    }\n\n    pub fn parse_port<P>(\n        mut input: Input<'_>,\n        default_port: P,\n        context: Context,\n    ) -> ParseResult<(Option<u16>, Input<'_>)>\n    where\n        P: Fn() -> Option<u16>,\n    {\n        let mut port: u32 = 0;\n        let mut has_any_digit = false;\n        while let (Some(c), remaining) = input.split_first() {\n            if let Some(digit) = c.to_digit(10) {\n                port = port * 10 + digit;\n                if port > ::std::u16::MAX as u32 {\n                    return Err(ParseError::InvalidPort);\n                }\n                has_any_digit = true;\n            } else if context == Context::UrlParser && !matches!(c, '/' | '\\\\' | '?' | '#') {\n                return Err(ParseError::InvalidPort);\n            } else {\n                break;\n            }\n            input = remaining;\n        }\n        let mut opt_port = Some(port as u16);\n        if !has_any_digit || opt_port == default_port() {\n            opt_port = None;\n        }\n        Ok((opt_port, input))\n    }\n\n    pub fn parse_path_start<'i>(\n        &mut self,\n        scheme_type: SchemeType,\n        has_host: &mut bool,\n        input: Input<'i>,\n    ) -> Input<'i> {\n        let path_start = self.serialization.len();\n        let (maybe_c, remaining) = input.split_first();\n        // If url is special, then:\n        if scheme_type.is_special() {\n            if maybe_c == Some('\\\\') {\n                // If c is U+005C (\\), validation error.\n                self.log_violation(SyntaxViolation::Backslash);\n            }\n            // A special URL always has a non-empty path.\n            if !self.serialization.ends_with('/') {\n                self.serialization.push('/');\n                // We have already made sure the forward slash is present.\n                if maybe_c == Some('/') || maybe_c == Some('\\\\') {\n                    return self.parse_path(scheme_type, has_host, path_start, remaining);\n                }\n            }\n            return self.parse_path(scheme_type, has_host, path_start, input);\n        } else if maybe_c == Some('?') || maybe_c == Some('#') {\n            // Otherwise, if state override is not given and c is U+003F (?),\n            // set url’s query to the empty string and state to query state.\n            // Otherwise, if state override is not given and c is U+0023 (#),\n            // set url’s fragment to the empty string and state to fragment state.\n            // The query and path states will be handled by the caller.\n            return input;\n        }\n\n        if maybe_c.is_some() && maybe_c != Some('/') {\n            self.serialization.push('/');\n        }\n        // Otherwise, if c is not the EOF code point:\n        self.parse_path(scheme_type, has_host, path_start, input)\n    }\n\n    pub fn parse_path<'i>(\n        &mut self,\n        scheme_type: SchemeType,\n        has_host: &mut bool,\n        path_start: usize,\n        mut input: Input<'i>,\n    ) -> Input<'i> {\n        // Relative path state\n        loop {\n            let mut segment_start = self.serialization.len();\n            let mut ends_with_slash = false;\n            loop {\n                let input_before_c = input.clone();\n                let (c, utf8_c) = if let Some(x) = input.next_utf8() {\n                    x\n                } else {\n                    break;\n                };\n                match c {\n                    '/' if self.context != Context::PathSegmentSetter => {\n                        self.serialization.push(c);\n                        ends_with_slash = true;\n                        break;\n                    }\n                    '\\\\' if self.context != Context::PathSegmentSetter\n                        && scheme_type.is_special() =>\n                    {\n                        self.log_violation(SyntaxViolation::Backslash);\n                        self.serialization.push('/');\n                        ends_with_slash = true;\n                        break;\n                    }\n                    '?' | '#' if self.context == Context::UrlParser => {\n                        input = input_before_c;\n                        break;\n                    }\n                    _ => {\n                        self.check_url_code_point(c, &input);\n                        if scheme_type.is_file()\n                            && self.serialization.len() > path_start\n                            && is_normalized_windows_drive_letter(\n                                &self.serialization[path_start + 1..],\n                            )\n                        {\n                            self.serialization.push('/');\n                            segment_start += 1;\n                        }\n                        if self.context == Context::PathSegmentSetter {\n                            if scheme_type.is_special() {\n                                self.serialization\n                                    .extend(utf8_percent_encode(utf8_c, SPECIAL_PATH_SEGMENT));\n                            } else {\n                                self.serialization\n                                    .extend(utf8_percent_encode(utf8_c, PATH_SEGMENT));\n                            }\n                        } else {\n                            self.serialization.extend(utf8_percent_encode(utf8_c, PATH));\n                        }\n                    }\n                }\n            }\n            let segment_before_slash = if ends_with_slash {\n                &self.serialization[segment_start..self.serialization.len() - 1]\n            } else {\n                &self.serialization[segment_start..self.serialization.len()]\n            };\n            match segment_before_slash {\n                // If buffer is a double-dot path segment, shorten url’s path,\n                \"..\" | \"%2e%2e\" | \"%2e%2E\" | \"%2E%2e\" | \"%2E%2E\" | \"%2e.\" | \"%2E.\" | \".%2e\"\n                | \".%2E\" => {\n                    debug_assert!(self.serialization.as_bytes()[segment_start - 1] == b'/');\n                    self.serialization.truncate(segment_start);\n                    if self.serialization.ends_with('/')\n                        && Parser::last_slash_can_be_removed(&self.serialization, path_start)\n                    {\n                        self.serialization.pop();\n                    }\n                    self.shorten_path(scheme_type, path_start);\n\n                    // and then if neither c is U+002F (/), nor url is special and c is U+005C (\\), append the empty string to url’s path.\n                    if ends_with_slash && !self.serialization.ends_with('/') {\n                        self.serialization.push('/');\n                    }\n                }\n                // Otherwise, if buffer is a single-dot path segment and if neither c is U+002F (/),\n                // nor url is special and c is U+005C (\\), append the empty string to url’s path.\n                \".\" | \"%2e\" | \"%2E\" => {\n                    self.serialization.truncate(segment_start);\n                    if !self.serialization.ends_with('/') {\n                        self.serialization.push('/');\n                    }\n                }\n                _ => {\n                    // If url’s scheme is \"file\", url’s path is empty, and buffer is a Windows drive letter, then\n                    if scheme_type.is_file()\n                        && segment_start == path_start + 1\n                        && is_windows_drive_letter(segment_before_slash)\n                    {\n                        // Replace the second code point in buffer with U+003A (:).\n                        if let Some(c) = segment_before_slash.chars().next() {\n                            self.serialization.truncate(segment_start);\n                            self.serialization.push(c);\n                            self.serialization.push(':');\n                            if ends_with_slash {\n                                self.serialization.push('/');\n                            }\n                        }\n                        // If url’s host is neither the empty string nor null,\n                        // validation error, set url’s host to the empty string.\n                        if *has_host {\n                            self.log_violation(SyntaxViolation::FileWithHostAndWindowsDrive);\n                            *has_host = false; // FIXME account for this in callers\n                        }\n                    }\n                }\n            }\n            if !ends_with_slash {\n                break;\n            }\n        }\n        if scheme_type.is_file() {\n            // while url’s path’s size is greater than 1\n            // and url’s path[0] is the empty string,\n            // validation error, remove the first item from url’s path.\n            //FIXME: log violation\n            let path = self.serialization.split_off(path_start);\n            self.serialization.push('/');\n            self.serialization.push_str(path.trim_start_matches('/'));\n        }\n\n        input\n    }\n\n    fn last_slash_can_be_removed(serialization: &str, path_start: usize) -> bool {\n        let url_before_segment = &serialization[..serialization.len() - 1];\n        if let Some(segment_before_start) = url_before_segment.rfind('/') {\n            // Do not remove the root slash\n            segment_before_start >= path_start\n                // Or a windows drive letter slash\n                && !path_starts_with_windows_drive_letter(&serialization[segment_before_start..])\n        } else {\n            false\n        }\n    }\n\n    /// https://url.spec.whatwg.org/#shorten-a-urls-path\n    fn shorten_path(&mut self, scheme_type: SchemeType, path_start: usize) {\n        // If path is empty, then return.\n        if self.serialization.len() == path_start {\n            return;\n        }\n        // If url’s scheme is \"file\", path’s size is 1, and path[0] is a normalized Windows drive letter, then return.\n        if scheme_type.is_file()\n            && is_normalized_windows_drive_letter(&self.serialization[path_start..])\n        {\n            return;\n        }\n        // Remove path’s last item.\n        self.pop_path(scheme_type, path_start);\n    }\n\n    /// https://url.spec.whatwg.org/#pop-a-urls-path\n    fn pop_path(&mut self, scheme_type: SchemeType, path_start: usize) {\n        if self.serialization.len() > path_start {\n            let slash_position = self.serialization[path_start..].rfind('/').unwrap();\n            // + 1 since rfind returns the position before the slash.\n            let segment_start = path_start + slash_position + 1;\n            // Don’t pop a Windows drive letter\n            if !(scheme_type.is_file()\n                && is_normalized_windows_drive_letter(&self.serialization[segment_start..]))\n            {\n                self.serialization.truncate(segment_start);\n            }\n        }\n    }\n\n    pub fn parse_cannot_be_a_base_path<'i>(&mut self, mut input: Input<'i>) -> Input<'i> {\n        loop {\n            let input_before_c = input.clone();\n            match input.next_utf8() {\n                Some(('?', _)) | Some(('#', _)) if self.context == Context::UrlParser => {\n                    return input_before_c\n                }\n                Some((c, utf8_c)) => {\n                    self.check_url_code_point(c, &input);\n                    self.serialization\n                        .extend(utf8_percent_encode(utf8_c, CONTROLS));\n                }\n                None => return input,\n            }\n        }\n    }\n\n    #[allow(clippy::too_many_arguments)]\n    fn with_query_and_fragment(\n        mut self,\n        scheme_type: SchemeType,\n        scheme_end: u32,\n        username_end: u32,\n        host_start: u32,\n        host_end: u32,\n        host: HostInternal,\n        port: Option<u16>,\n        mut path_start: u32,\n        remaining: Input<'_>,\n    ) -> ParseResult<Url> {\n        // Special case for anarchist URL's with a leading empty path segment\n        // This prevents web+demo:/.//not-a-host/ or web+demo:/path/..//not-a-host/,\n        // when parsed and then serialized, from ending up as web+demo://not-a-host/\n        // (they end up as web+demo:/.//not-a-host/).\n        //\n        // If url’s host is null, url does not have an opaque path,\n        // url’s path’s size is greater than 1, and url’s path[0] is the empty string,\n        // then append U+002F (/) followed by U+002E (.) to output.\n        let scheme_end_as_usize = scheme_end as usize;\n        let path_start_as_usize = path_start as usize;\n        if path_start_as_usize == scheme_end_as_usize + 1 {\n            // Anarchist URL\n            if self.serialization[path_start_as_usize..].starts_with(\"//\") {\n                // Case 1: The base URL did not have an empty path segment, but the resulting one does\n                // Insert the \"/.\" prefix\n                self.serialization.insert_str(path_start_as_usize, \"/.\");\n                path_start += 2;\n            }\n            assert!(!self.serialization[scheme_end_as_usize..].starts_with(\"://\"));\n        } else if path_start_as_usize == scheme_end_as_usize + 3\n            && &self.serialization[scheme_end_as_usize..path_start_as_usize] == \":/.\"\n        {\n            // Anarchist URL with leading empty path segment\n            // The base URL has a \"/.\" between the host and the path\n            assert_eq!(self.serialization.as_bytes()[path_start_as_usize], b'/');\n            if self\n                .serialization\n                .as_bytes()\n                .get(path_start_as_usize + 1)\n                .copied()\n                != Some(b'/')\n            {\n                // Case 2: The base URL had an empty path segment, but the resulting one does not\n                // Remove the \"/.\" prefix\n                self.serialization\n                    .replace_range(scheme_end_as_usize..path_start_as_usize, \":\");\n                path_start -= 2;\n            }\n            assert!(!self.serialization[scheme_end_as_usize..].starts_with(\"://\"));\n        }\n\n        let (query_start, fragment_start) =\n            self.parse_query_and_fragment(scheme_type, scheme_end, remaining)?;\n        Ok(Url {\n            serialization: self.serialization,\n            scheme_end,\n            username_end,\n            host_start,\n            host_end,\n            host,\n            port,\n            path_start,\n            query_start,\n            fragment_start,\n        })\n    }\n\n    /// Return (query_start, fragment_start)\n    fn parse_query_and_fragment(\n        &mut self,\n        scheme_type: SchemeType,\n        scheme_end: u32,\n        mut input: Input<'_>,\n    ) -> ParseResult<(Option<u32>, Option<u32>)> {\n        let mut query_start = None;\n        match input.next() {\n            Some('#') => {}\n            Some('?') => {\n                query_start = Some(to_u32(self.serialization.len())?);\n                self.serialization.push('?');\n                let remaining = self.parse_query(scheme_type, scheme_end, input);\n                if let Some(remaining) = remaining {\n                    input = remaining\n                } else {\n                    return Ok((query_start, None));\n                }\n            }\n            None => return Ok((None, None)),\n            _ => panic!(\"Programming error. parse_query_and_fragment() called without ? or #\"),\n        }\n\n        let fragment_start = to_u32(self.serialization.len())?;\n        self.serialization.push('#');\n        self.parse_fragment(input);\n        Ok((query_start, Some(fragment_start)))\n    }\n\n    pub fn parse_query<'i>(\n        &mut self,\n        scheme_type: SchemeType,\n        scheme_end: u32,\n        mut input: Input<'i>,\n    ) -> Option<Input<'i>> {\n        let len = input.chars.as_str().len();\n        let mut query = String::with_capacity(len); // FIXME: use a streaming decoder instead\n        let mut remaining = None;\n        while let Some(c) = input.next() {\n            if c == '#' && self.context == Context::UrlParser {\n                remaining = Some(input);\n                break;\n            } else {\n                self.check_url_code_point(c, &input);\n                query.push(c);\n            }\n        }\n\n        let encoding = match &self.serialization[..scheme_end as usize] {\n            \"http\" | \"https\" | \"file\" | \"ftp\" => self.query_encoding_override,\n            _ => None,\n        };\n        let query_bytes = if let Some(o) = encoding {\n            o(&query)\n        } else {\n            query.as_bytes().into()\n        };\n        let set = if scheme_type.is_special() {\n            SPECIAL_QUERY\n        } else {\n            QUERY\n        };\n        self.serialization.extend(percent_encode(&query_bytes, set));\n        remaining\n    }\n\n    fn fragment_only(mut self, base_url: &Url, mut input: Input<'_>) -> ParseResult<Url> {\n        let before_fragment = match base_url.fragment_start {\n            Some(i) => base_url.slice(..i),\n            None => &*base_url.serialization,\n        };\n        debug_assert!(self.serialization.is_empty());\n        self.serialization\n            .reserve(before_fragment.len() + input.chars.as_str().len());\n        self.serialization.push_str(before_fragment);\n        self.serialization.push('#');\n        let next = input.next();\n        debug_assert!(next == Some('#'));\n        self.parse_fragment(input);\n        Ok(Url {\n            serialization: self.serialization,\n            fragment_start: Some(to_u32(before_fragment.len())?),\n            ..*base_url\n        })\n    }\n\n    pub fn parse_fragment(&mut self, mut input: Input<'_>) {\n        while let Some((c, utf8_c)) = input.next_utf8() {\n            if c == '\\0' {\n                self.log_violation(SyntaxViolation::NullInFragment)\n            } else {\n                self.check_url_code_point(c, &input);\n            }\n            self.serialization\n                .extend(utf8_percent_encode(utf8_c, FRAGMENT));\n        }\n    }\n\n    fn check_url_code_point(&self, c: char, input: &Input<'_>) {\n        if let Some(vfn) = self.violation_fn {\n            if c == '%' {\n                let mut input = input.clone();\n                if !matches!((input.next(), input.next()), (Some(a), Some(b))\n                             if a.is_ascii_hexdigit() && b.is_ascii_hexdigit())\n                {\n                    vfn(SyntaxViolation::PercentDecode)\n                }\n            } else if !is_url_code_point(c) {\n                vfn(SyntaxViolation::NonUrlCodePoint)\n            }\n        }\n    }\n}\n\n// Non URL code points:\n// U+0000 to U+0020 (space)\n// \" # % < > [ \\ ] ^ ` { | }\n// U+007F to U+009F\n// surrogates\n// U+FDD0 to U+FDEF\n// Last two of each plane: U+__FFFE to U+__FFFF for __ in 00 to 10 hex\n#[inline]\nfn is_url_code_point(c: char) -> bool {\n    matches!(c,\n        'a'..='z' |\n        'A'..='Z' |\n        '0'..='9' |\n        '!' | '$' | '&' | '\\'' | '(' | ')' | '*' | '+' | ',' | '-' |\n        '.' | '/' | ':' | ';' | '=' | '?' | '@' | '_' | '~' |\n        '\\u{A0}'..='\\u{D7FF}' | '\\u{E000}'..='\\u{FDCF}' | '\\u{FDF0}'..='\\u{FFFD}' |\n        '\\u{10000}'..='\\u{1FFFD}' | '\\u{20000}'..='\\u{2FFFD}' |\n        '\\u{30000}'..='\\u{3FFFD}' | '\\u{40000}'..='\\u{4FFFD}' |\n        '\\u{50000}'..='\\u{5FFFD}' | '\\u{60000}'..='\\u{6FFFD}' |\n        '\\u{70000}'..='\\u{7FFFD}' | '\\u{80000}'..='\\u{8FFFD}' |\n        '\\u{90000}'..='\\u{9FFFD}' | '\\u{A0000}'..='\\u{AFFFD}' |\n        '\\u{B0000}'..='\\u{BFFFD}' | '\\u{C0000}'..='\\u{CFFFD}' |\n        '\\u{D0000}'..='\\u{DFFFD}' | '\\u{E1000}'..='\\u{EFFFD}' |\n        '\\u{F0000}'..='\\u{FFFFD}' | '\\u{100000}'..='\\u{10FFFD}')\n}\n\n/// https://url.spec.whatwg.org/#c0-controls-and-space\n#[inline]\nfn c0_control_or_space(ch: char) -> bool {\n    ch <= ' ' // U+0000 to U+0020\n}\n\n/// https://infra.spec.whatwg.org/#ascii-tab-or-newline\n#[inline]\nfn ascii_tab_or_new_line(ch: char) -> bool {\n    matches!(ch, '\\t' | '\\r' | '\\n')\n}\n\n/// https://url.spec.whatwg.org/#ascii-alpha\n#[inline]\npub fn ascii_alpha(ch: char) -> bool {\n    ch.is_ascii_alphabetic()\n}\n\n#[inline]\npub fn to_u32(i: usize) -> ParseResult<u32> {\n    if i <= ::std::u32::MAX as usize {\n        Ok(i as u32)\n    } else {\n        Err(ParseError::Overflow)\n    }\n}\n\nfn is_normalized_windows_drive_letter(segment: &str) -> bool {\n    is_windows_drive_letter(segment) && segment.as_bytes()[1] == b':'\n}\n\n/// Whether the scheme is file:, the path has a single segment, and that segment\n/// is a Windows drive letter\n#[inline]\npub fn is_windows_drive_letter(segment: &str) -> bool {\n    segment.len() == 2 && starts_with_windows_drive_letter(segment)\n}\n\n/// Whether path starts with a root slash\n/// and a windows drive letter eg: \"/c:\" or \"/a:/\"\nfn path_starts_with_windows_drive_letter(s: &str) -> bool {\n    if let Some(c) = s.as_bytes().first() {\n        matches!(c, b'/' | b'\\\\' | b'?' | b'#') && starts_with_windows_drive_letter(&s[1..])\n    } else {\n        false\n    }\n}\n\nfn starts_with_windows_drive_letter(s: &str) -> bool {\n    s.len() >= 2\n        && ascii_alpha(s.as_bytes()[0] as char)\n        && matches!(s.as_bytes()[1], b':' | b'|')\n        && (s.len() == 2 || matches!(s.as_bytes()[2], b'/' | b'\\\\' | b'?' | b'#'))\n}\n\n/// https://url.spec.whatwg.org/#start-with-a-windows-drive-letter\nfn starts_with_windows_drive_letter_segment(input: &Input<'_>) -> bool {\n    let mut input = input.clone();\n    match (input.next(), input.next(), input.next()) {\n        // its first two code points are a Windows drive letter\n        // its third code point is U+002F (/), U+005C (\\), U+003F (?), or U+0023 (#).\n        (Some(a), Some(b), Some(c))\n            if ascii_alpha(a) && matches!(b, ':' | '|') && matches!(c, '/' | '\\\\' | '?' | '#') =>\n        {\n            true\n        }\n        // its first two code points are a Windows drive letter\n        // its length is 2\n        (Some(a), Some(b), None) if ascii_alpha(a) && matches!(b, ':' | '|') => true,\n        _ => false,\n    }\n}\n"
    },
    "url/src/path_segments.rs": {
      "language": "rust",
      "mutants": [
        {
          "id": "url/src/path_segments.rs:141:9:150:13:FnValue:Box::leak(Box::new(Default::default()))",
          "duration": 5.31898098,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 141,
              "column": 9
            },
            "end": {
              "line": 150,
              "column": 13
            }
          },
          "replacement": "Box::leak(Box::new(Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by Box::leak(Box::new(Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/path_segments.rs:149:46:149:47:BinaryOperator:-",
          "duration": 2.041649526,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 149,
              "column": 46
            },
            "end": {
              "line": 149,
              "column": 47
            }
          },
          "replacement": "-",
          "status": "Killed",
          "description": "Replace BinaryOperator by -",
          "statusReason": "thread 'append_empty_segment_then_mutate' panicked at url/tests/unit.rs:496:28:\ncalled `Result::unwrap()` on an `Err` value: \"97 != 58 (self.byte_at(self.host_end) != b':') for URL \\\"http://localhos?a=b\\\"\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "append_empty_segment_then_mutate"
          ]
        },
        {
          "id": "url/src/path_segments.rs:67:9:68:80:FnValue:()",
          "duration": 1.818075437,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 67,
              "column": 9
            },
            "end": {
              "line": 68,
              "column": 80
            }
          },
          "replacement": "()",
          "status": "Killed",
          "description": "Replace FnValue by ()",
          "statusReason": "thread 'append_trailing_slash' panicked at url/tests/unit.rs:467:28:\ncalled `Result::unwrap()` on an `Err` value: \"47 != 63 (self.byte_at(start) != b'?') for URL \\\"http://localhost:6767/foo/bar/\\\"\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "append_trailing_slash",
            "extend_query_pairs_then_mutate",
            "append_empty_segment_then_mutate"
          ]
        },
        {
          "id": "url/src/path_segments.rs:229:60:229:61:BinaryOperator:-",
          "duration": 2.766015688,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 229,
              "column": 60
            },
            "end": {
              "line": 229,
              "column": 61
            }
          },
          "replacement": "-",
          "status": "Killed",
          "description": "Replace BinaryOperator by -",
          "statusReason": "thread 'path_backslash_fun' panicked at url/tests/unit.rs:215:5:\nassertion `left == right` failed\n  left: \"http://foobar.com//foo%5Cbar\"\n right: \"http://foobar.com/foo%5Cbar\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "path_backslash_fun"
          ]
        },
        {
          "id": "url/src/path_segments.rs:126:35:126:37:BinaryOperator:<",
          "duration": 1.833961155,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 126,
              "column": 35
            },
            "end": {
              "line": 126,
              "column": 37
            }
          },
          "replacement": "<",
          "status": "Killed",
          "description": "Replace BinaryOperator by <",
          "statusReason": "thread 'pop_if_empty_in_bounds' panicked at url/src/path_segments.rs:129:34:\nbyte index 5 is out of bounds of `m://`\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "pop_if_empty_in_bounds"
          ]
        },
        {
          "id": "url/src/path_segments.rs:149:46:149:47:BinaryOperator:*",
          "duration": 0.654870955,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 149,
              "column": 46
            },
            "end": {
              "line": 149,
              "column": 47
            }
          },
          "replacement": "*",
          "status": "Killed",
          "description": "Replace BinaryOperator by *",
          "statusReason": "thread 'append_empty_segment_then_mutate' panicked at url/tests/unit.rs:497:5:\nassertion `left == right` failed\n  left: \"http://localhost:6767/foo/bar/?a=b\"\n right: \"http://localhost:6767/foo/bar?a=b\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "append_empty_segment_then_mutate"
          ]
        },
        {
          "id": "url/src/path_segments.rs:141:35:141:37:BinaryOperator:<",
          "duration": 1.7625718670000001,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 141,
              "column": 35
            },
            "end": {
              "line": 141,
              "column": 37
            }
          },
          "replacement": "<",
          "status": "Killed",
          "description": "Replace BinaryOperator by <",
          "statusReason": "thread 'append_empty_segment_then_mutate' panicked at url/tests/unit.rs:497:5:\nassertion `left == right` failed\n  left: \"http://localhost:6767/foo/bar/?a=b\"\n right: \"http://localhost:6767/foo/bar?a=b\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "append_empty_segment_then_mutate",
            "pop_if_empty_in_bounds"
          ]
        },
        {
          "id": "url/src/path_segments.rs:93:9:94:13:FnValue:Box::leak(Box::new(Default::default()))",
          "duration": 0.151927735,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 93,
              "column": 9
            },
            "end": {
              "line": 94,
              "column": 13
            }
          },
          "replacement": "Box::leak(Box::new(Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by Box::leak(Box::new(Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/path_segments.rs:159:9:159:35:FnValue:Box::leak(Box::new(Default::default()))",
          "duration": 0.517703306,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 159,
              "column": 9
            },
            "end": {
              "line": 159,
              "column": 35
            }
          },
          "replacement": "Box::leak(Box::new(Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by Box::leak(Box::new(Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/path_segments.rs:229:60:229:61:BinaryOperator:*",
          "duration": 2.3300128570000003,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 229,
              "column": 60
            },
            "end": {
              "line": 229,
              "column": 61
            }
          },
          "replacement": "*",
          "status": "Killed",
          "description": "Replace BinaryOperator by *",
          "statusReason": "thread 'path_backslash_fun' panicked at url/tests/unit.rs:215:5:\nassertion `left == right` failed\n  left: \"http://foobar.com//foo%5Cbar\"\n right: \"http://foobar.com/foo%5Cbar\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "path_backslash_fun"
          ]
        },
        {
          "id": "url/src/path_segments.rs:229:47:229:48:BinaryOperator:==",
          "duration": 1.181715359,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 229,
              "column": 47
            },
            "end": {
              "line": 229,
              "column": 48
            }
          },
          "replacement": "==",
          "status": "Killed",
          "description": "Replace BinaryOperator by ==",
          "statusReason": "thread 'path_backslash_fun' panicked at url/tests/unit.rs:215:5:\nassertion `left == right` failed\n  left: \"http://foobar.com//foo%5Cbar\"\n right: \"http://foobar.com/foo%5Cbar\"\n",
          "killedBy": [
            "path_backslash_fun",
            "append_trailing_slash",
            "extend_query_pairs_then_mutate",
            "append_empty_segment_then_mutate"
          ]
        },
        {
          "id": "url/src/path_segments.rs:58:52:58:53:BinaryOperator:*",
          "duration": 4.68427692,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 58,
              "column": 52
            },
            "end": {
              "line": 58,
              "column": 53
            }
          },
          "replacement": "*",
          "status": "Survived",
          "description": "Replace BinaryOperator by *",
          "killedBy": []
        },
        {
          "id": "url/src/path_segments.rs:229:47:229:48:BinaryOperator:<",
          "duration": 1.669357076,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 229,
              "column": 47
            },
            "end": {
              "line": 229,
              "column": 48
            }
          },
          "replacement": "<",
          "status": "Killed",
          "description": "Replace BinaryOperator by <",
          "statusReason": "thread 'extend_query_pairs_then_mutate' panicked at url/tests/unit.rs:484:5:\nassertion `left == right` failed\n  left: \"http://localhost:6767/foo/barsome_other_path?auth=my-token\"\n right: \"http://localhost:6767/foo/bar/some_other_path?auth=my-token\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "extend_query_pairs_then_mutate",
            "append_empty_segment_then_mutate",
            "append_trailing_slash"
          ]
        },
        {
          "id": "url/src/path_segments.rs:46:5:62:6:FnValue:Default::default()",
          "duration": 0.519678983,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 46,
              "column": 5
            },
            "end": {
              "line": 62,
              "column": 6
            }
          },
          "replacement": "Default::default()",
          "status": "CompileError",
          "description": "Replace FnValue by Default::default()",
          "killedBy": []
        },
        {
          "id": "url/src/path_segments.rs:231:21:231:23:BinaryOperator:&&",
          "duration": 0.9099738749999999,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 231,
              "column": 21
            },
            "end": {
              "line": 231,
              "column": 23
            }
          },
          "replacement": "&&",
          "status": "Killed",
          "description": "Replace BinaryOperator by &&",
          "statusReason": "thread 'append_empty_segment_then_mutate' panicked at url/tests/unit.rs:497:5:\nassertion `left == right` failed\n  left: \"http://localhost:6767/foo?a=b\"\n right: \"http://localhost:6767/foo/bar?a=b\"\n",
          "killedBy": [
            "append_empty_segment_then_mutate",
            "extend_query_pairs_then_mutate",
            "append_trailing_slash",
            "path_backslash_fun"
          ]
        },
        {
          "id": "url/src/path_segments.rs:58:52:58:53:BinaryOperator:-",
          "duration": 2.307293589,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 58,
              "column": 52
            },
            "end": {
              "line": 58,
              "column": 53
            }
          },
          "replacement": "-",
          "status": "Killed",
          "description": "Replace BinaryOperator by -",
          "statusReason": "Test executable failed (exit status: 101).\n\nstderr:\nthread 'main' panicked at url/src/path_segments.rs:12:1:\nassertion `left == right` failed\n  left: \"https://github.cologout\"\n right: \"https://github.com/logout\"\nstack backtrace:\n   0:     0x55e9032b5266 - std::backtrace_rs::backtrace::libunwind::trace::h5aa1f3f50fd6005d\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/../../backtrace/src/backtrace/libunwind.rs:104:5\n   1:     0x55e9032b5266 - std::backtrace_rs::backtrace::trace_unsynchronized::h39f759d0ceaa839b\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/../../backtrace/src/backtrace/mod.rs:66:5\n   2:     0x55e9032b5266 - std::sys_common::backtrace::_print_fmt::hfd4aa038a1413f7f\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:68:5\n   3:     0x55e9032b5266 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::ha47fba1de44cec55\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:44:22\n   4:     0x55e9032d2d0c - core::fmt::rt::Argument::fmt::h375396e1292b08cb\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/fmt/rt.rs:142:9\n   5:     0x55e9032d2d0c - core::fmt::write::h93e0b545aa9eb320\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/fmt/mod.rs:1120:17\n   6:     0x55e9032b347f - std::io::Write::write_fmt::h97fad0674ecdf154\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/io/mod.rs:1854:15\n   7:     0x55e9032b5014 - std::sys_common::backtrace::_print::hb7626a1b4ea382df\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:47:5\n   8:     0x55e9032b5014 - std::sys_common::backtrace::print::h89f2abc5b98b82a2\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:34:9\n   9:     0x55e9032b650b - std::panicking::default_hook::{{closure}}::h73fe684137831048\n  10:     0x55e9032b6259 - std::panicking::default_hook::h8dfe6e62b35915a0\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:292:9\n  11:     0x55e9032b69ad - std::panicking::rust_panic_with_hook::hc33e259baf535986\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:781:13\n  12:     0x55e9032b6882 - std::panicking::begin_panic_handler::{{closure}}::hcfbf8e29c9418131\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:659:13\n  13:     0x55e9032b5746 - std::sys_common::backtrace::__rust_end_short_backtrace::h99b80dfa4797f5b6\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:171:18\n  14:     0x55e9032b65b4 - rust_begin_unwind\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:647:5\n  15:     0x55e903250cf5 - core::panicking::panic_fmt::h96700527d99a56a9\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/panicking.rs:72:14\n  16:     0x55e903250ffb - core::panicking::assert_failed_inner::h88ed53873568fcef\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/panicking.rs:342:17\n  17:     0x55e90325183a - core::panicking::assert_failed::h03f34daddd0b0bf6\n  18:     0x55e903252409 - rust_out::main::_doctest_main_url_src_path_segments_rs_79_0::run::ha32ed3084befe4e3\n  19:     0x55e903251ff9 - rust_out::main::_doctest_main_url_src_path_segments_rs_79_0::h46c77791cc99e455\n  20:     0x55e903251fe6 - rust_out::main::h11d1a6ed4289a3df\n  21:     0x55e9032515b3 - core::ops::function::FnOnce::call_once::h903f19ac3af5d648\n  22:     0x55e9032514b6 - std::sys_common::backtrace::__rust_begin_short_backtrace::ha11011b11b4aaa1f\n  23:     0x55e903251509 - std::rt::lang_start::{{closure}}::h196360a935ed97d8\n  24:     0x55e9032b1783 - core::ops::function::impls::<impl core::ops::function::FnOnce<A> for &F>::call_once::hb12a069c52b9e638\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/ops/function.rs:284:13\n  25:     0x55e9032b1783 - std::panicking::try::do_call::h34ba557680a1662c\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:554:40\n  26:     0x55e9032b1783 - std::panicking::try::hb88778117e3deeb6\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:518:19\n  27:     0x55e9032b1783 - std::panic::catch_unwind::hbd3c1fafc0d9693e\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panic.rs:142:14\n  28:     0x55e9032b1783 - std::rt::lang_start_internal::{{closure}}::h0b81b8de0028b6f3\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/rt.rs:148:48\n  29:     0x55e9032b1783 - std::panicking::try::do_call::hbbb521b5391ac872\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:554:40\n  30:     0x55e9032b1783 - std::panicking::try::hf108a0b7deb842f7\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:518:19\n  31:     0x55e9032b1783 - std::panic::catch_unwind::h6451f9c53324fd81\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panic.rs:142:14\n  32:     0x55e9032b1783 - std::rt::lang_start_internal::hc6ad905f9af5ea03\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/rt.rs:148:20\n  33:     0x55e9032514e7 - std::rt::lang_start::h4d1167809e102347\n  34:     0x55e903252495 - main\n  35:     0x7f86dd3a1cd0 - <unknown>\n  36:     0x7f86dd3a1d8a - __libc_start_main\n  37:     0x55e903251315 - _start\n  38:                0x0 - <unknown>\n\n",
          "killedBy": [
            "url/src/path_segments.rs - path_segments::PathSegmentsMut<'a>::clear (line 79)"
          ]
        },
        {
          "id": "url/src/path_segments.rs:220:9:244:13:FnValue:Box::leak(Box::new(Default::default()))",
          "duration": 0.462674228,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 220,
              "column": 9
            },
            "end": {
              "line": 244,
              "column": 13
            }
          },
          "replacement": "Box::leak(Box::new(Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by Box::leak(Box::new(Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/path_segments.rs:126:9:132:13:FnValue:Box::leak(Box::new(Default::default()))",
          "duration": 0.960170318,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 126,
              "column": 9
            },
            "end": {
              "line": 132,
              "column": 13
            }
          },
          "replacement": "Box::leak(Box::new(Default::default()))",
          "status": "CompileError",
          "description": "Replace FnValue by Box::leak(Box::new(Default::default()))",
          "killedBy": []
        },
        {
          "id": "url/src/path_segments.rs:231:51:231:53:BinaryOperator:!=",
          "duration": 3.084160921,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 231,
              "column": 51
            },
            "end": {
              "line": 231,
              "column": 53
            }
          },
          "replacement": "!=",
          "status": "Killed",
          "description": "Replace BinaryOperator by !=",
          "statusReason": "thread 'path_backslash_fun' panicked at url/tests/unit.rs:215:5:\nassertion `left == right` failed\n  left: \"http://foobar.com//foo%5Cbar\"\n right: \"http://foobar.com/foo%5Cbar\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "path_backslash_fun"
          ]
        }
      ],
      "source": "// Copyright 2016 The rust-url developers.\n//\n// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n// option. This file may not be copied, modified, or distributed\n// except according to those terms.\n\nuse crate::parser::{self, to_u32, SchemeType};\nuse crate::Url;\nuse std::str;\n\n/// Exposes methods to manipulate the path of an URL that is not cannot-be-base.\n///\n/// The path always starts with a `/` slash, and is made of slash-separated segments.\n/// There is always at least one segment (which may be the empty string).\n///\n/// Examples:\n///\n/// ```rust\n/// use url::Url;\n/// # use std::error::Error;\n///\n/// # fn run() -> Result<(), Box<dyn Error>> {\n/// let mut url = Url::parse(\"mailto:me@example.com\")?;\n/// assert!(url.path_segments_mut().is_err());\n///\n/// let mut url = Url::parse(\"http://example.net/foo/index.html\")?;\n/// url.path_segments_mut().map_err(|_| \"cannot be base\")?\n///     .pop().push(\"img\").push(\"2/100%.png\");\n/// assert_eq!(url.as_str(), \"http://example.net/foo/img/2%2F100%25.png\");\n/// # Ok(())\n/// # }\n/// # run().unwrap();\n/// ```\n#[derive(Debug)]\npub struct PathSegmentsMut<'a> {\n    url: &'a mut Url,\n    after_first_slash: usize,\n    after_path: String,\n    old_after_path_position: u32,\n}\n\n// Not re-exported outside the crate\npub fn new(url: &mut Url) -> PathSegmentsMut<'_> {\n    let after_path = url.take_after_path();\n    let old_after_path_position = to_u32(url.serialization.len()).unwrap();\n    // Special urls always have a non empty path\n    if SchemeType::from(url.scheme()).is_special() {\n        debug_assert!(url.byte_at(url.path_start) == b'/');\n    } else {\n        debug_assert!(\n            url.serialization.len() == url.path_start as usize\n                || url.byte_at(url.path_start) == b'/'\n        );\n    }\n    PathSegmentsMut {\n        after_first_slash: url.path_start as usize + \"/\".len(),\n        url,\n        old_after_path_position,\n        after_path,\n    }\n}\n\nimpl<'a> Drop for PathSegmentsMut<'a> {\n    fn drop(&mut self) {\n        self.url\n            .restore_after_path(self.old_after_path_position, &self.after_path)\n    }\n}\n\nimpl<'a> PathSegmentsMut<'a> {\n    /// Remove all segments in the path, leaving the minimal `url.path() == \"/\"`.\n    ///\n    /// Returns `&mut Self` so that method calls can be chained.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// use url::Url;\n    /// # use std::error::Error;\n    ///\n    /// # fn run() -> Result<(), Box<dyn Error>> {\n    /// let mut url = Url::parse(\"https://github.com/servo/rust-url/\")?;\n    /// url.path_segments_mut().map_err(|_| \"cannot be base\")?\n    ///     .clear().push(\"logout\");\n    /// assert_eq!(url.as_str(), \"https://github.com/logout\");\n    /// # Ok(())\n    /// # }\n    /// # run().unwrap();\n    /// ```\n    pub fn clear(&mut self) -> &mut Self {\n        self.url.serialization.truncate(self.after_first_slash);\n        self\n    }\n\n    /// Remove the last segment of this URL’s path if it is empty,\n    /// except if these was only one segment to begin with.\n    ///\n    /// In other words, remove one path trailing slash, if any,\n    /// unless it is also the initial slash (so this does nothing if `url.path() == \"/\")`.\n    ///\n    /// Returns `&mut Self` so that method calls can be chained.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// use url::Url;\n    /// # use std::error::Error;\n    ///\n    /// # fn run() -> Result<(), Box<dyn Error>> {\n    /// let mut url = Url::parse(\"https://github.com/servo/rust-url/\")?;\n    /// url.path_segments_mut().map_err(|_| \"cannot be base\")?\n    ///     .push(\"pulls\");\n    /// assert_eq!(url.as_str(), \"https://github.com/servo/rust-url//pulls\");\n    ///\n    /// let mut url = Url::parse(\"https://github.com/servo/rust-url/\")?;\n    /// url.path_segments_mut().map_err(|_| \"cannot be base\")?\n    ///     .pop_if_empty().push(\"pulls\");\n    /// assert_eq!(url.as_str(), \"https://github.com/servo/rust-url/pulls\");\n    /// # Ok(())\n    /// # }\n    /// # run().unwrap();\n    /// ```\n    pub fn pop_if_empty(&mut self) -> &mut Self {\n        if self.after_first_slash >= self.url.serialization.len() {\n            return self;\n        }\n        if self.url.serialization[self.after_first_slash..].ends_with('/') {\n            self.url.serialization.pop();\n        }\n        self\n    }\n\n    /// Remove the last segment of this URL’s path.\n    ///\n    /// If the path only has one segment, make it empty such that `url.path() == \"/\"`.\n    ///\n    /// Returns `&mut Self` so that method calls can be chained.\n    pub fn pop(&mut self) -> &mut Self {\n        if self.after_first_slash >= self.url.serialization.len() {\n            return self;\n        }\n        let last_slash = self.url.serialization[self.after_first_slash..]\n            .rfind('/')\n            .unwrap_or(0);\n        self.url\n            .serialization\n            .truncate(self.after_first_slash + last_slash);\n        self\n    }\n\n    /// Append the given segment at the end of this URL’s path.\n    ///\n    /// See the documentation for `.extend()`.\n    ///\n    /// Returns `&mut Self` so that method calls can be chained.\n    pub fn push(&mut self, segment: &str) -> &mut Self {\n        self.extend(Some(segment))\n    }\n\n    /// Append each segment from the given iterator at the end of this URL’s path.\n    ///\n    /// Each segment is percent-encoded like in `Url::parse` or `Url::join`,\n    /// except that `%` and `/` characters are also encoded (to `%25` and `%2F`).\n    /// This is unlike `Url::parse` where `%` is left as-is in case some of the input\n    /// is already percent-encoded, and `/` denotes a path segment separator.)\n    ///\n    /// Note that, in addition to slashes between new segments,\n    /// this always adds a slash between the existing path and the new segments\n    /// *except* if the existing path is `\"/\"`.\n    /// If the previous last segment was empty (if the path had a trailing slash)\n    /// the path after `.extend()` will contain two consecutive slashes.\n    /// If that is undesired, call `.pop_if_empty()` first.\n    ///\n    /// To obtain a behavior similar to `Url::join`, call `.pop()` unconditionally first.\n    ///\n    /// Returns `&mut Self` so that method calls can be chained.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// use url::Url;\n    /// # use std::error::Error;\n    ///\n    /// # fn run() -> Result<(), Box<dyn Error>> {\n    /// let mut url = Url::parse(\"https://github.com/\")?;\n    /// let org = \"servo\";\n    /// let repo = \"rust-url\";\n    /// let issue_number = \"188\";\n    /// url.path_segments_mut().map_err(|_| \"cannot be base\")?\n    ///     .extend(&[org, repo, \"issues\", issue_number]);\n    /// assert_eq!(url.as_str(), \"https://github.com/servo/rust-url/issues/188\");\n    /// # Ok(())\n    /// # }\n    /// # run().unwrap();\n    /// ```\n    ///\n    /// In order to make sure that parsing the serialization of an URL gives the same URL,\n    /// a segment is ignored if it is `\".\"` or `\"..\"`:\n    ///\n    /// ```rust\n    /// use url::Url;\n    /// # use std::error::Error;\n    ///\n    /// # fn run() -> Result<(), Box<dyn Error>> {\n    /// let mut url = Url::parse(\"https://github.com/servo\")?;\n    /// url.path_segments_mut().map_err(|_| \"cannot be base\")?\n    ///     .extend(&[\"..\", \"rust-url\", \".\", \"pulls\"]);\n    /// assert_eq!(url.as_str(), \"https://github.com/servo/rust-url/pulls\");\n    /// # Ok(())\n    /// # }\n    /// # run().unwrap();\n    /// ```\n    pub fn extend<I>(&mut self, segments: I) -> &mut Self\n    where\n        I: IntoIterator,\n        I::Item: AsRef<str>,\n    {\n        let scheme_type = SchemeType::from(self.url.scheme());\n        let path_start = self.url.path_start as usize;\n        self.url.mutate(|parser| {\n            parser.context = parser::Context::PathSegmentSetter;\n            for segment in segments {\n                let segment = segment.as_ref();\n                if matches!(segment, \".\" | \"..\") {\n                    continue;\n                }\n                if parser.serialization.len() > path_start + 1\n                    // Non special url's path might still be empty\n                    || parser.serialization.len() == path_start\n                {\n                    parser.serialization.push('/');\n                }\n                let mut has_host = true; // FIXME account for this?\n                parser.parse_path(\n                    scheme_type,\n                    &mut has_host,\n                    path_start,\n                    parser::Input::new_no_trim(segment),\n                );\n            }\n        });\n        self\n    }\n}\n"
    },
    "url/src/host.rs": {
      "language": "rust",
      "mutants": [
        {
          "id": "url/src/host.rs:448:31:448:32:BinaryOperator:<",
          "duration": 1.8108840769999999,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 448,
              "column": 31
            },
            "end": {
              "line": 448,
              "column": 32
            }
          },
          "replacement": "<",
          "status": "Survived",
          "description": "Replace BinaryOperator by <",
          "killedBy": []
        },
        {
          "id": "url/src/host.rs:252:23:252:24:BinaryOperator:==",
          "duration": 1.554307561,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 252,
              "column": 23
            },
            "end": {
              "line": 252,
              "column": 24
            }
          },
          "replacement": "==",
          "status": "Survived",
          "description": "Replace BinaryOperator by ==",
          "killedBy": []
        },
        {
          "id": "url/src/host.rs:82:57:82:58:BinaryOperator:/",
          "duration": 4.472314655,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 82,
              "column": 57
            },
            "end": {
              "line": 82,
              "column": 58
            }
          },
          "replacement": "/",
          "status": "Killed",
          "description": "Replace BinaryOperator by /",
          "statusReason": "thread 'host_serialization' panicked at url/tests/unit.rs:345:37:\ncalled `Result::unwrap()` on an `Err` value: InvalidIpv6Address\n",
          "killedBy": [
            "host_serialization",
            "host",
            "test_authority",
            "test_socket_addrs"
          ]
        },
        {
          "id": "url/src/host.rs:203:14:203:16:BinaryOperator:!=",
          "duration": 4.828516338,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 203,
              "column": 14
            },
            "end": {
              "line": 203,
              "column": 16
            }
          },
          "replacement": "!=",
          "status": "Killed",
          "description": "Replace BinaryOperator by !=",
          "statusReason": "thread 'host_serialization' panicked at url/tests/unit.rs:344:5:\nassertion `left == right` failed\n  left: Some(\"[0::2]\")\n right: Some(\"[::2]\")\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host_serialization",
            "host",
            "test_authority",
            "test_set_ip_host"
          ]
        },
        {
          "id": "url/src/host.rs:318:5:344:29:FnValue:ParseResult::from_iter([Default::default()])",
          "duration": 0.31438243,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 318,
              "column": 5
            },
            "end": {
              "line": 344,
              "column": 29
            }
          },
          "replacement": "ParseResult::from_iter([Default::default()])",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from_iter([Default::default()])",
          "killedBy": []
        },
        {
          "id": "url/src/host.rs:362:21:362:23:BinaryOperator:==",
          "duration": 1.6147946,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 362,
              "column": 21
            },
            "end": {
              "line": 362,
              "column": 23
            }
          },
          "replacement": "==",
          "status": "Killed",
          "description": "Replace BinaryOperator by ==",
          "statusReason": "thread 'host' panicked at url/tests/unit.rs:301:38:\ncalled `Result::unwrap()` on an `Err` value: InvalidIpv6Address\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host",
            "test_authority",
            "test_socket_addrs"
          ]
        },
        {
          "id": "url/src/host.rs:65:9:69:10:FnValue:Host::from_iter([\"xyzzy\".into()])",
          "duration": 0.507787301,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 65,
              "column": 9
            },
            "end": {
              "line": 69,
              "column": 10
            }
          },
          "replacement": "Host::from_iter([\"xyzzy\".into()])",
          "status": "CompileError",
          "description": "Replace FnValue by Host::from_iter([\"xyzzy\".into()])",
          "killedBy": []
        },
        {
          "id": "url/src/host.rs:241:22:241:23:BinaryOperator:==",
          "duration": 1.9907970279999998,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 241,
              "column": 22
            },
            "end": {
              "line": 241,
              "column": 23
            }
          },
          "replacement": "==",
          "status": "Killed",
          "description": "Replace BinaryOperator by ==",
          "statusReason": "thread 'host_serialization' panicked at url/tests/unit.rs:344:5:\nassertion `left == right` failed\n  left: Some(\"[0:0:0:0:0:0:0:2]\")\n right: Some(\"[::2]\")\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host_serialization",
            "test_authority",
            "test_set_ip_host"
          ]
        },
        {
          "id": "url/src/host.rs:457:39:457:40:BinaryOperator:+",
          "duration": 3.228951521,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 457,
              "column": 39
            },
            "end": {
              "line": 457,
              "column": 40
            }
          },
          "replacement": "+",
          "status": "Survived",
          "description": "Replace BinaryOperator by +",
          "killedBy": []
        },
        {
          "id": "url/src/host.rs:424:26:424:27:BinaryOperator:<",
          "duration": 3.4690987470000003,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 424,
              "column": 26
            },
            "end": {
              "line": 424,
              "column": 27
            }
          },
          "replacement": "<",
          "status": "Survived",
          "description": "Replace BinaryOperator by <",
          "killedBy": []
        },
        {
          "id": "url/src/host.rs:218:11:218:13:BinaryOperator:-=",
          "duration": 30.026601415000002,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 218,
              "column": 11
            },
            "end": {
              "line": 218,
              "column": 13
            }
          },
          "replacement": "-=",
          "status": "Timeout",
          "description": "Replace BinaryOperator by -=",
          "statusReason": "thread 'host' panicked at url/src/host.rs:214:27:\nindex out of bounds: the len is 8 but the index is 18446744073709551614\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host"
          ]
        },
        {
          "id": "url/src/host.rs:335:38:335:39:BinaryOperator:/",
          "duration": 1.618791493,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 335,
              "column": 38
            },
            "end": {
              "line": 335,
              "column": 39
            }
          },
          "replacement": "/",
          "status": "Killed",
          "description": "Replace BinaryOperator by /",
          "statusReason": "thread 'host' panicked at url/src/host.rs:335:35:\nattempt to divide by zero\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host"
          ]
        },
        {
          "id": "url/src/host.rs:430:49:430:51:BinaryOperator:||",
          "duration": 4.043802946,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 430,
              "column": 49
            },
            "end": {
              "line": 430,
              "column": 51
            }
          },
          "replacement": "||",
          "status": "Survived",
          "description": "Replace BinaryOperator by ||",
          "killedBy": []
        },
        {
          "id": "url/src/host.rs:126:9:161:10:FnValue:Ok(Default::default())",
          "duration": 0.515852177,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 126,
              "column": 9
            },
            "end": {
              "line": 161,
              "column": 10
            }
          },
          "replacement": "Ok(Default::default())",
          "status": "CompileError",
          "description": "Replace FnValue by Ok(Default::default())",
          "killedBy": []
        },
        {
          "id": "url/src/host.rs:191:49:191:51:BinaryOperator:!=",
          "duration": 3.282721799,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 191,
              "column": 49
            },
            "end": {
              "line": 191,
              "column": 51
            }
          },
          "replacement": "!=",
          "status": "Killed",
          "description": "Replace BinaryOperator by !=",
          "statusReason": "thread 'test_make_relative' panicked at url/tests/unit.rs:1192:67:\ncalled `Option::unwrap()` on a `None` value\n",
          "killedBy": [
            "test_make_relative",
            "host"
          ]
        },
        {
          "id": "url/src/host.rs:342:30:342:31:BinaryOperator:+",
          "duration": 1.571223027,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 342,
              "column": 30
            },
            "end": {
              "line": 342,
              "column": 31
            }
          },
          "replacement": "+",
          "status": "Killed",
          "description": "Replace BinaryOperator by +",
          "statusReason": "thread 'host' panicked at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/ops/bit.rs:496:1:\nattempt to shift left with overflow\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host",
            "test_domain",
            "test_authority",
            "test_make_relative",
            "test_origin_unicode_serialization",
            "test_socket_addrs"
          ]
        },
        {
          "id": "url/src/host.rs:420:23:420:25:BinaryOperator:*=",
          "duration": 2.719994201,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 420,
              "column": 23
            },
            "end": {
              "line": 420,
              "column": 25
            }
          },
          "replacement": "*=",
          "status": "Killed",
          "description": "Replace BinaryOperator by *=",
          "statusReason": "thread 'host_serialization' panicked at url/tests/unit.rs:344:5:\nassertion `left == right` failed\n  left: Some(\"[0:2::]\")\n right: Some(\"[::2]\")\n",
          "killedBy": [
            "host_serialization",
            "host",
            "test_authority",
            "test_socket_addrs"
          ]
        },
        {
          "id": "url/src/host.rs:202:13:202:14:BinaryOperator:==",
          "duration": 0.918450301,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 202,
              "column": 13
            },
            "end": {
              "line": 202,
              "column": 14
            }
          },
          "replacement": "==",
          "status": "Killed",
          "description": "Replace BinaryOperator by ==",
          "statusReason": "thread 'host_serialization' panicked at url/tests/unit.rs:344:5:\nassertion `left == right` failed\n  left: Some(\"[]\")\n right: Some(\"[::2]\")\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host_serialization",
            "test_authority",
            "test_set_ip_host"
          ]
        },
        {
          "id": "url/src/host.rs:349:5:495:7:FnValue:ParseResult::new(Default::default())",
          "duration": 0.408478321,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 349,
              "column": 5
            },
            "end": {
              "line": 495,
              "column": 7
            }
          },
          "replacement": "ParseResult::new(Default::default())",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new(Default::default())",
          "killedBy": []
        },
        {
          "id": "url/src/host.rs:282:5:313:6:FnValue:Ok(Some(0))",
          "duration": 2.3210545469999997,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 282,
              "column": 5
            },
            "end": {
              "line": 313,
              "column": 6
            }
          },
          "replacement": "Ok(Some(0))",
          "status": "Killed",
          "description": "Replace FnValue by Ok(Some(0))",
          "statusReason": "thread 'host' panicked at url/tests/unit.rs:301:9:\nassertion `left == right` failed\n  left: Some(Ipv4(0.0.0.0))\n right: Some(Domain(\"www.mozilla.org\"))\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host",
            "extend_query_pairs_then_mutate",
            "append_trailing_slash",
            "append_empty_segment_then_mutate",
            "test_equality",
            "test_leading_dots",
            "path_backslash_fun",
            "test_domain",
            "test_domain_encoding_quirks",
            "test_authority",
            "test_origin_unicode_serialization",
            "test_idna",
            "test_make_relative",
            "test_options_reuse",
            "parse_with_params",
            "test_set_empty_host",
            "test_set_scheme_to_file_with_host",
            "test_socket_addrs",
            "test_serialization",
            "test_slicing",
            "test_set_host"
          ]
        },
        {
          "id": "url/src/host.rs:290:27:290:29:BinaryOperator:<",
          "duration": 3.4476516800000003,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 290,
              "column": 27
            },
            "end": {
              "line": 290,
              "column": 29
            }
          },
          "replacement": "<",
          "status": "Killed",
          "description": "Replace BinaryOperator by <",
          "statusReason": "thread 'host' panicked at url/tests/unit.rs:301:9:\nassertion `left == right` failed\n  left: Some(Ipv4(1.35.33.61))\n right: Some(Ipv4(1.35.33.49))\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host"
          ]
        },
        {
          "id": "url/src/host.rs:225:5:256:6:FnValue:(0, -1)",
          "duration": 1.8842674430000002,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 225,
              "column": 5
            },
            "end": {
              "line": 256,
              "column": 6
            }
          },
          "replacement": "(0, -1)",
          "status": "Killed",
          "description": "Replace FnValue by (0, -1)",
          "statusReason": "thread 'test_authority' panicked at url/src/host.rs:214:27:\nindex out of bounds: the len is 8 but the index is 18446744073709551615\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_authority",
            "host",
            "host_serialization",
            "test_set_ip_host",
            "test_socket_addrs"
          ]
        },
        {
          "id": "url/src/host.rs:395:14:395:15:BinaryOperator:>",
          "duration": 1.169156168,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 395,
              "column": 14
            },
            "end": {
              "line": 395,
              "column": 15
            }
          },
          "replacement": ">",
          "status": "Killed",
          "description": "Replace BinaryOperator by >",
          "statusReason": "thread 'host' panicked at url/tests/unit.rs:301:38:\ncalled `Result::unwrap()` on an `Err` value: InvalidIpv6Address\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host",
            "host_serialization"
          ]
        },
        {
          "id": "url/src/host.rs:361:17:361:19:BinaryOperator:!=",
          "duration": 1.0145266,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 361,
              "column": 17
            },
            "end": {
              "line": 361,
              "column": 19
            }
          },
          "replacement": "!=",
          "status": "Killed",
          "description": "Replace BinaryOperator by !=",
          "statusReason": "thread 'host_serialization' panicked at url/tests/unit.rs:345:37:\ncalled `Result::unwrap()` on an `Err` value: InvalidIpv6Address\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host_serialization",
            "host",
            "test_authority",
            "test_socket_addrs"
          ]
        },
        {
          "id": "url/src/host.rs:261:5:276:35:FnValue:true",
          "duration": 2.883231243,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 261,
              "column": 5
            },
            "end": {
              "line": 276,
              "column": 35
            }
          },
          "replacement": "true",
          "status": "Killed",
          "description": "Replace FnValue by true",
          "statusReason": "thread 'test_leading_dots' panicked at url/tests/unit.rs:525:29:\ncalled `Result::unwrap()` on an `Err` value: InvalidIpv4Address\n",
          "killedBy": [
            "test_leading_dots",
            "extend_query_pairs_then_mutate",
            "from_str",
            "host",
            "test_domain",
            "test_has_authority",
            "test_authority",
            "append_trailing_slash",
            "issue_61",
            "path_backslash_fun",
            "parse_with_params",
            "test_fragment",
            "test_equality",
            "append_empty_segment_then_mutate",
            "test_idna",
            "test_domain_encoding_quirks",
            "test_origin_unicode_serialization",
            "test_origin_blob_equality",
            "test_options_reuse",
            "test_syntax_violation_callback",
            "test_origin_hash",
            "test_slicing",
            "test_set_ip_host",
            "test_query",
            "test_serialization",
            "test_socket_addrs",
            "test_syntax_violation_callback_lifetimes",
            "test_set_empty_host",
            "test_set_scheme_to_file_with_host",
            "test_syntax_violation_callback_types",
            "test_set_host",
            "test_set_href"
          ]
        },
        {
          "id": "url/src/host.rs:431:23:431:25:BinaryOperator:-=",
          "duration": 3.376474506,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 431,
              "column": 23
            },
            "end": {
              "line": 431,
              "column": 25
            }
          },
          "replacement": "-=",
          "status": "Survived",
          "description": "Replace BinaryOperator by -=",
          "killedBy": []
        },
        {
          "id": "url/src/host.rs:370:13:370:14:BinaryOperator:==",
          "duration": 1.832053547,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 370,
              "column": 13
            },
            "end": {
              "line": 370,
              "column": 14
            }
          },
          "replacement": "==",
          "status": "Killed",
          "description": "Replace BinaryOperator by ==",
          "statusReason": "thread 'host_serialization' panicked at url/tests/unit.rs:345:37:\ncalled `Result::unwrap()` on an `Err` value: InvalidIpv6Address\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host_serialization",
            "host",
            "test_authority",
            "test_socket_addrs"
          ]
        },
        {
          "id": "url/src/host.rs:318:5:344:29:FnValue:ParseResult::new()",
          "duration": 0.151385252,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 318,
              "column": 5
            },
            "end": {
              "line": 344,
              "column": 29
            }
          },
          "replacement": "ParseResult::new()",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new()",
          "killedBy": []
        },
        {
          "id": "url/src/host.rs:457:39:457:40:BinaryOperator:/",
          "duration": 2.46905669,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 457,
              "column": 39
            },
            "end": {
              "line": 457,
              "column": 40
            }
          },
          "replacement": "/",
          "status": "Survived",
          "description": "Replace BinaryOperator by /",
          "killedBy": []
        },
        {
          "id": "url/src/host.rs:30:9:35:10:FnValue:Default::default()",
          "duration": 0.866132351,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 30,
              "column": 9
            },
            "end": {
              "line": 35,
              "column": 10
            }
          },
          "replacement": "Default::default()",
          "status": "CompileError",
          "description": "Replace FnValue by Default::default()",
          "killedBy": []
        },
        {
          "id": "url/src/host.rs:82:57:82:58:BinaryOperator:+",
          "duration": 2.163515924,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 82,
              "column": 57
            },
            "end": {
              "line": 82,
              "column": 58
            }
          },
          "replacement": "+",
          "status": "Killed",
          "description": "Replace BinaryOperator by +",
          "statusReason": "thread 'host' panicked at url/src/host.rs:82:41:\nbyte index 42 is out of bounds of `[2001:0db8:85a3:08d3:1319:8a2e:0370:7344]`\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host",
            "test_authority",
            "host_serialization",
            "test_socket_addrs"
          ]
        },
        {
          "id": "url/src/host.rs:78:9:121:10:FnValue:Ok(Default::default())",
          "duration": 0.152000402,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 78,
              "column": 9
            },
            "end": {
              "line": 121,
              "column": 10
            }
          },
          "replacement": "Ok(Default::default())",
          "status": "CompileError",
          "description": "Replace FnValue by Ok(Default::default())",
          "killedBy": []
        },
        {
          "id": "url/src/host.rs:378:15:378:17:BinaryOperator:-=",
          "duration": 0.603931349,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 378,
              "column": 15
            },
            "end": {
              "line": 378,
              "column": 17
            }
          },
          "replacement": "-=",
          "status": "Killed",
          "description": "Replace BinaryOperator by -=",
          "statusReason": "thread 'host_serialization' panicked at url/tests/unit.rs:345:37:\ncalled `Result::unwrap()` on an `Err` value: InvalidIpv6Address\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host_serialization"
          ]
        },
        {
          "id": "url/src/host.rs:389:42:389:43:BinaryOperator:-",
          "duration": 0.654795276,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 389,
              "column": 42
            },
            "end": {
              "line": 389,
              "column": 43
            }
          },
          "replacement": "-",
          "status": "Killed",
          "description": "Replace BinaryOperator by -",
          "statusReason": "thread 'host' panicked at url/src/host.rs:389:29:\nattempt to subtract with overflow\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host",
            "host_serialization",
            "test_authority",
            "test_socket_addrs"
          ]
        },
        {
          "id": "url/src/host.rs:342:30:342:31:BinaryOperator:/",
          "duration": 1.01614903,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 342,
              "column": 30
            },
            "end": {
              "line": 342,
              "column": 31
            }
          },
          "replacement": "/",
          "status": "Killed",
          "description": "Replace BinaryOperator by /",
          "statusReason": "thread 'host' panicked at url/src/host.rs:342:27:\nattempt to divide by zero\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host",
            "test_domain",
            "test_authority",
            "test_origin_unicode_serialization",
            "test_make_relative",
            "test_socket_addrs"
          ]
        },
        {
          "id": "url/src/host.rs:482:61:482:62:BinaryOperator:-",
          "duration": 1.979561137,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 482,
              "column": 61
            },
            "end": {
              "line": 482,
              "column": 62
            }
          },
          "replacement": "-",
          "status": "Killed",
          "description": "Replace BinaryOperator by -",
          "statusReason": "thread 'host' panicked at url/src/host.rs:482:44:\nattempt to subtract with overflow\n",
          "killedBy": [
            "host",
            "test_authority",
            "host_serialization",
            "test_socket_addrs"
          ]
        },
        {
          "id": "url/src/host.rs:65:9:69:10:FnValue:Host::new()",
          "duration": 0.563899359,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 65,
              "column": 9
            },
            "end": {
              "line": 69,
              "column": 10
            }
          },
          "replacement": "Host::new()",
          "status": "CompileError",
          "description": "Replace FnValue by Host::new()",
          "killedBy": []
        },
        {
          "id": "url/src/host.rs:338:34:338:35:BinaryOperator:<",
          "duration": 1.675303123,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 338,
              "column": 34
            },
            "end": {
              "line": 338,
              "column": 35
            }
          },
          "replacement": "<",
          "status": "Killed",
          "description": "Replace BinaryOperator by <",
          "statusReason": "thread 'test_domain' panicked at url/tests/unit.rs:677:48:\ncalled `Result::unwrap()` on an `Err` value: InvalidIpv4Address\n",
          "killedBy": [
            "test_domain",
            "test_authority",
            "test_make_relative",
            "host",
            "test_origin_unicode_serialization",
            "test_socket_addrs"
          ]
        },
        {
          "id": "url/src/host.rs:420:23:420:25:BinaryOperator:-=",
          "duration": 1.969259046,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 420,
              "column": 23
            },
            "end": {
              "line": 420,
              "column": 25
            }
          },
          "replacement": "-=",
          "status": "Killed",
          "description": "Replace BinaryOperator by -=",
          "statusReason": "thread 'host' panicked at url/src/host.rs:420:9:\nattempt to subtract with overflow\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host",
            "host_serialization",
            "test_authority",
            "test_socket_addrs"
          ]
        },
        {
          "id": "url/src/host.rs:440:42:440:43:BinaryOperator:/",
          "duration": 3.3848652990000003,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 440,
              "column": 42
            },
            "end": {
              "line": 440,
              "column": 43
            }
          },
          "replacement": "/",
          "status": "Survived",
          "description": "Replace BinaryOperator by /",
          "killedBy": []
        },
        {
          "id": "url/src/host.rs:398:26:398:28:BinaryOperator:!=",
          "duration": 3.9753870549999997,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 398,
              "column": 26
            },
            "end": {
              "line": 398,
              "column": 28
            }
          },
          "replacement": "!=",
          "status": "Survived",
          "description": "Replace BinaryOperator by !=",
          "killedBy": []
        },
        {
          "id": "url/src/host.rs:371:26:371:28:BinaryOperator:!=",
          "duration": 3.325126074,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 371,
              "column": 26
            },
            "end": {
              "line": 371,
              "column": 28
            }
          },
          "replacement": "!=",
          "status": "Killed",
          "description": "Replace BinaryOperator by !=",
          "statusReason": "thread 'host_serialization' panicked at url/tests/unit.rs:345:37:\ncalled `Result::unwrap()` on an `Err` value: InvalidIpv6Address\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host_serialization",
            "host",
            "test_authority",
            "test_socket_addrs"
          ]
        },
        {
          "id": "url/src/host.rs:65:9:69:10:FnValue:Host::new(\"xyzzy\".into())",
          "duration": 0.452910866,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 65,
              "column": 9
            },
            "end": {
              "line": 69,
              "column": 10
            }
          },
          "replacement": "Host::new(\"xyzzy\".into())",
          "status": "CompileError",
          "description": "Replace FnValue by Host::new(\"xyzzy\".into())",
          "killedBy": []
        },
        {
          "id": "url/src/host.rs:225:5:256:6:FnValue:(-1, -1)",
          "duration": 1.3098080589999999,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 225,
              "column": 5
            },
            "end": {
              "line": 256,
              "column": 6
            }
          },
          "replacement": "(-1, -1)",
          "status": "Killed",
          "description": "Replace FnValue by (-1, -1)",
          "statusReason": "thread 'host_serialization' panicked at url/tests/unit.rs:344:5:\nassertion `left == right` failed\n  left: Some(\"[0:0:0:0:0:0:0:2]\")\n right: Some(\"[::2]\")\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host_serialization",
            "test_authority",
            "test_set_ip_host"
          ]
        },
        {
          "id": "url/src/host.rs:402:38:402:39:BinaryOperator:==",
          "duration": 4.4759136999999996,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 402,
              "column": 38
            },
            "end": {
              "line": 402,
              "column": 39
            }
          },
          "replacement": "==",
          "status": "Survived",
          "description": "Replace BinaryOperator by ==",
          "killedBy": []
        },
        {
          "id": "url/src/host.rs:479:43:479:44:BinaryOperator:/",
          "duration": 2.465820618,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 479,
              "column": 43
            },
            "end": {
              "line": 479,
              "column": 44
            }
          },
          "replacement": "/",
          "status": "Killed",
          "description": "Replace BinaryOperator by /",
          "statusReason": "thread 'test_authority' panicked at url/tests/unit.rs:1252:5:\nassertion `left == right` failed\n  left: \":password@[::1:0]:8080\"\n right: \":password@[::1]:8080\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_authority",
            "host",
            "host_serialization",
            "test_socket_addrs"
          ]
        },
        {
          "id": "url/src/host.rs:190:53:190:55:BinaryOperator:!=",
          "duration": 2.675316909,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 190,
              "column": 53
            },
            "end": {
              "line": 190,
              "column": 55
            }
          },
          "replacement": "!=",
          "status": "Killed",
          "description": "Replace BinaryOperator by !=",
          "statusReason": "thread 'test_idna' panicked at url/tests/unit.rs:357:5:\nassertion `left == right` failed\n  left: Some(Domain(\"xn--n3h.net\"))\n right: Some(Domain(\"xn--n3h.net\"))\n",
          "killedBy": [
            "test_idna",
            "test_origin_blob_equality",
            "test_origin_hash",
            "host",
            "test_leading_dots",
            "test_set_empty_host",
            "test_set_empty_username_and_password",
            "test_set_empty_password"
          ]
        },
        {
          "id": "url/src/host.rs:272:25:272:27:BinaryOperator:||",
          "duration": 3.278906109,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 272,
              "column": 25
            },
            "end": {
              "line": 272,
              "column": 27
            }
          },
          "replacement": "||",
          "status": "Killed",
          "description": "Replace BinaryOperator by ||",
          "statusReason": "thread 'test_authority' panicked at url/tests/unit.rs:1243:56:\ncalled `Result::unwrap()` on an `Err` value: InvalidIpv4Address\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_authority",
            "path_backslash_fun",
            "test_idna",
            "test_has_authority",
            "test_equality",
            "host",
            "extend_query_pairs_then_mutate",
            "parse_with_params",
            "append_empty_segment_then_mutate",
            "issue_61",
            "test_fragment",
            "from_str",
            "test_domain_encoding_quirks",
            "test_domain",
            "append_trailing_slash",
            "test_options_reuse",
            "test_origin_blob_equality",
            "test_socket_addrs",
            "test_query",
            "test_syntax_violation_callback_lifetimes",
            "test_set_empty_host",
            "test_leading_dots",
            "test_syntax_violation_callback",
            "test_set_ip_host",
            "test_serialization",
            "test_set_href",
            "test_set_host",
            "test_origin_unicode_serialization",
            "test_slicing",
            "test_syntax_violation_callback_types",
            "test_set_scheme_to_file_with_host",
            "test_origin_hash"
          ]
        },
        {
          "id": "url/src/host.rs:225:5:256:6:FnValue:(0, 1)",
          "duration": 1.005687234,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 225,
              "column": 5
            },
            "end": {
              "line": 256,
              "column": 6
            }
          },
          "replacement": "(0, 1)",
          "status": "Killed",
          "description": "Replace FnValue by (0, 1)",
          "statusReason": "thread 'host_serialization' panicked at url/tests/unit.rs:344:5:\nassertion `left == right` failed\n  left: Some(\"[::0:0:0:0:0:0:2]\")\n right: Some(\"[::2]\")\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host_serialization",
            "test_authority",
            "test_set_ip_host"
          ]
        },
        {
          "id": "url/src/host.rs:290:32:290:34:BinaryOperator:||",
          "duration": 1.426818356,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 290,
              "column": 32
            },
            "end": {
              "line": 290,
              "column": 34
            }
          },
          "replacement": "||",
          "status": "Killed",
          "description": "Replace BinaryOperator by ||",
          "statusReason": "thread 'host' panicked at url/tests/unit.rs:301:38:\ncalled `Result::unwrap()` on an `Err` value: InvalidIpv4Address\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host",
            "test_authority",
            "test_make_relative",
            "test_socket_addrs"
          ]
        },
        {
          "id": "url/src/host.rs:473:10:473:11:BinaryOperator:>",
          "duration": 4.299245045,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 473,
              "column": 10
            },
            "end": {
              "line": 473,
              "column": 11
            }
          },
          "replacement": ">",
          "status": "Survived",
          "description": "Replace BinaryOperator by >",
          "killedBy": []
        },
        {
          "id": "url/src/host.rs:464:31:464:33:BinaryOperator:*=",
          "duration": 4.744634261,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 464,
              "column": 31
            },
            "end": {
              "line": 464,
              "column": 33
            }
          },
          "replacement": "*=",
          "status": "Survived",
          "description": "Replace BinaryOperator by *=",
          "killedBy": []
        },
        {
          "id": "url/src/host.rs:447:33:447:34:BinaryOperator:/",
          "duration": 5.090474257,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 447,
              "column": 33
            },
            "end": {
              "line": 447,
              "column": 34
            }
          },
          "replacement": "/",
          "status": "Survived",
          "description": "Replace BinaryOperator by /",
          "killedBy": []
        },
        {
          "id": "url/src/host.rs:457:47:457:48:BinaryOperator:-",
          "duration": 5.890724737,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 457,
              "column": 47
            },
            "end": {
              "line": 457,
              "column": 48
            }
          },
          "replacement": "-",
          "status": "Survived",
          "description": "Replace BinaryOperator by -",
          "killedBy": []
        },
        {
          "id": "url/src/host.rs:255:27:255:28:BinaryOperator:-",
          "duration": 2.976969663,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 255,
              "column": 27
            },
            "end": {
              "line": 255,
              "column": 28
            }
          },
          "replacement": "-",
          "status": "Killed",
          "description": "Replace BinaryOperator by -",
          "statusReason": "thread 'host_serialization' panicked at url/src/host.rs:214:27:\nindex out of bounds: the len is 8 but the index is 18446744073709551609\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host_serialization",
            "host",
            "test_authority",
            "test_socket_addrs",
            "test_set_ip_host"
          ]
        },
        {
          "id": "url/src/host.rs:447:38:447:39:BinaryOperator:*",
          "duration": 4.98200545,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 447,
              "column": 38
            },
            "end": {
              "line": 447,
              "column": 39
            }
          },
          "replacement": "*",
          "status": "Survived",
          "description": "Replace BinaryOperator by *",
          "killedBy": []
        },
        {
          "id": "url/src/host.rs:342:25:342:26:BinaryOperator:/",
          "duration": 1.472490184,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 342,
              "column": 25
            },
            "end": {
              "line": 342,
              "column": 26
            }
          },
          "replacement": "/",
          "status": "Killed",
          "description": "Replace BinaryOperator by /",
          "statusReason": "thread 'host' panicked at url/tests/unit.rs:301:9:\nassertion `left == right` failed\n  left: Some(Ipv4(0.0.35.101))\n right: Some(Ipv4(1.35.33.49))\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host",
            "test_authority",
            "test_make_relative",
            "test_socket_addrs"
          ]
        },
        {
          "id": "url/src/host.rs:202:13:202:14:BinaryOperator:>",
          "duration": 0.862669522,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 202,
              "column": 13
            },
            "end": {
              "line": 202,
              "column": 14
            }
          },
          "replacement": ">",
          "status": "Killed",
          "description": "Replace BinaryOperator by >",
          "statusReason": "thread 'host_serialization' panicked at url/tests/unit.rs:344:5:\nassertion `left == right` failed\n  left: Some(\"[]\")\n right: Some(\"[::2]\")\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host_serialization",
            "test_authority",
            "test_set_ip_host"
          ]
        },
        {
          "id": "url/src/host.rs:215:14:215:15:BinaryOperator:>",
          "duration": 1.2202099290000001,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 215,
              "column": 14
            },
            "end": {
              "line": 215,
              "column": 15
            }
          },
          "replacement": ">",
          "status": "Killed",
          "description": "Replace BinaryOperator by >",
          "statusReason": "thread 'host_serialization' panicked at url/tests/unit.rs:348:5:\nassertion `left == right` failed\n  left: Some(\"[::ffff02]\")\n right: Some(\"[::ffff:0:2]\")\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host_serialization"
          ]
        },
        {
          "id": "url/src/host.rs:438:21:438:22:BinaryOperator:>",
          "duration": 3.164120433,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 438,
              "column": 21
            },
            "end": {
              "line": 438,
              "column": 22
            }
          },
          "replacement": ">",
          "status": "Survived",
          "description": "Replace BinaryOperator by >",
          "killedBy": []
        },
        {
          "id": "url/src/host.rs:386:17:386:18:BinaryOperator:>",
          "duration": 3.022914271,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 386,
              "column": 17
            },
            "end": {
              "line": 386,
              "column": 18
            }
          },
          "replacement": ">",
          "status": "Killed",
          "description": "Replace BinaryOperator by >",
          "statusReason": "thread 'host_serialization' panicked at url/tests/unit.rs:345:37:\ncalled `Result::unwrap()` on an `Err` value: InvalidIpv6Address\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host_serialization",
            "host",
            "test_socket_addrs",
            "test_authority"
          ]
        },
        {
          "id": "url/src/host.rs:338:34:338:35:BinaryOperator:==",
          "duration": 3.3191603699999996,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 338,
              "column": 34
            },
            "end": {
              "line": 338,
              "column": 35
            }
          },
          "replacement": "==",
          "status": "Survived",
          "description": "Replace BinaryOperator by ==",
          "killedBy": []
        },
        {
          "id": "url/src/host.rs:482:69:482:70:BinaryOperator:/",
          "duration": 2.174679244,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 482,
              "column": 69
            },
            "end": {
              "line": 482,
              "column": 70
            }
          },
          "replacement": "/",
          "status": "Killed",
          "description": "Replace BinaryOperator by /",
          "statusReason": "thread 'host' panicked at url/tests/unit.rs:301:9:\nassertion `left == right` failed\n  left: Some(Ipv6(0:1::))\n right: Some(Ipv6(::1))\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host",
            "host_serialization",
            "test_authority",
            "test_socket_addrs"
          ]
        },
        {
          "id": "url/src/host.rs:225:5:256:6:FnValue:(0, 0)",
          "duration": 2.117052742,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 225,
              "column": 5
            },
            "end": {
              "line": 256,
              "column": 6
            }
          },
          "replacement": "(0, 0)",
          "status": "Killed",
          "description": "Replace FnValue by (0, 0)",
          "statusReason": "thread 'test_set_ip_host' panicked at url/tests/unit.rs:738:5:\nassertion `left == right` failed\n  left: Some(\"[::0:0:0:0:0:0:0:1]\")\n right: Some(\"[::1]\")\n",
          "killedBy": [
            "test_set_ip_host",
            "test_authority",
            "host_serialization"
          ]
        },
        {
          "id": "url/src/host.rs:409:26:409:28:BinaryOperator:!=",
          "duration": 1.829668467,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 409,
              "column": 26
            },
            "end": {
              "line": 409,
              "column": 28
            }
          },
          "replacement": "!=",
          "status": "Killed",
          "description": "Replace BinaryOperator by !=",
          "statusReason": "thread 'host' panicked at url/tests/unit.rs:301:38:\ncalled `Result::unwrap()` on an `Err` value: InvalidIpv6Address\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host",
            "host_serialization"
          ]
        },
        {
          "id": "url/src/host.rs:335:38:335:39:BinaryOperator:+",
          "duration": 2.151100099,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 335,
              "column": 38
            },
            "end": {
              "line": 335,
              "column": 39
            }
          },
          "replacement": "+",
          "status": "Killed",
          "description": "Replace BinaryOperator by +",
          "statusReason": "thread 'host' panicked at url/tests/unit.rs:301:38:\ncalled `Result::unwrap()` on an `Err` value: InvalidIpv4Address\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host"
          ]
        },
        {
          "id": "url/src/host.rs:225:5:256:6:FnValue:(-1, 0)",
          "duration": 1.356002586,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 225,
              "column": 5
            },
            "end": {
              "line": 256,
              "column": 6
            }
          },
          "replacement": "(-1, 0)",
          "status": "Killed",
          "description": "Replace FnValue by (-1, 0)",
          "statusReason": "thread 'host_serialization' panicked at url/tests/unit.rs:344:5:\nassertion `left == right` failed\n  left: Some(\"[0:0:0:0:0:0:0:2]\")\n right: Some(\"[::2]\")\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host_serialization",
            "test_authority",
            "test_set_ip_host"
          ]
        },
        {
          "id": "url/src/host.rs:225:5:256:6:FnValue:(1, -1)",
          "duration": 1.556683932,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 225,
              "column": 5
            },
            "end": {
              "line": 256,
              "column": 6
            }
          },
          "replacement": "(1, -1)",
          "status": "Killed",
          "description": "Replace FnValue by (1, -1)",
          "statusReason": "thread 'host_serialization' panicked at url/src/host.rs:214:27:\nindex out of bounds: the len is 8 but the index is 18446744073709551615\n",
          "killedBy": [
            "host_serialization",
            "host",
            "test_authority",
            "test_set_ip_host",
            "test_socket_addrs"
          ]
        },
        {
          "id": "url/src/host.rs:447:33:447:34:BinaryOperator:+",
          "duration": 4.927064788,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 447,
              "column": 33
            },
            "end": {
              "line": 447,
              "column": 34
            }
          },
          "replacement": "+",
          "status": "Survived",
          "description": "Replace BinaryOperator by +",
          "killedBy": []
        },
        {
          "id": "url/src/host.rs:208:29:208:30:BinaryOperator:>",
          "duration": 1.877656709,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 208,
              "column": 29
            },
            "end": {
              "line": 208,
              "column": 30
            }
          },
          "replacement": ">",
          "status": "Killed",
          "description": "Replace BinaryOperator by >",
          "statusReason": "thread 'host_serialization' panicked at url/tests/unit.rs:344:5:\nassertion `left == right` failed\n  left: Some(\"[::]\")\n right: Some(\"[::2]\")\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host_serialization",
            "test_authority",
            "test_set_ip_host"
          ]
        },
        {
          "id": "url/src/host.rs:430:43:430:44:BinaryOperator:==",
          "duration": 5.5396719050000005,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 430,
              "column": 43
            },
            "end": {
              "line": 430,
              "column": 44
            }
          },
          "replacement": "==",
          "status": "Survived",
          "description": "Replace BinaryOperator by ==",
          "killedBy": []
        },
        {
          "id": "url/src/host.rs:424:26:424:27:BinaryOperator:==",
          "duration": 5.082319707,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 424,
              "column": 26
            },
            "end": {
              "line": 424,
              "column": 27
            }
          },
          "replacement": "==",
          "status": "Survived",
          "description": "Replace BinaryOperator by ==",
          "killedBy": []
        },
        {
          "id": "url/src/host.rs:335:13:335:14:BinaryOperator:<",
          "duration": 2.026378882,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 335,
              "column": 13
            },
            "end": {
              "line": 335,
              "column": 14
            }
          },
          "replacement": "<",
          "status": "Killed",
          "description": "Replace BinaryOperator by <",
          "statusReason": "thread 'test_make_relative' panicked at url/tests/unit.rs:1190:46:\ncalled `Result::unwrap()` on an `Err` value: InvalidIpv4Address\n",
          "killedBy": [
            "test_make_relative",
            "host",
            "test_authority",
            "test_domain",
            "test_origin_unicode_serialization",
            "test_socket_addrs"
          ]
        },
        {
          "id": "url/src/host.rs:374:21:374:23:BinaryOperator:!=",
          "duration": 2.376928972,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 374,
              "column": 21
            },
            "end": {
              "line": 374,
              "column": 23
            }
          },
          "replacement": "!=",
          "status": "Killed",
          "description": "Replace BinaryOperator by !=",
          "statusReason": "thread 'host' panicked at url/tests/unit.rs:301:38:\ncalled `Result::unwrap()` on an `Err` value: InvalidIpv6Address\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host",
            "host_serialization",
            "test_authority",
            "test_socket_addrs"
          ]
        },
        {
          "id": "url/src/host.rs:429:29:429:30:BinaryOperator:==",
          "duration": 3.285336965,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 429,
              "column": 29
            },
            "end": {
              "line": 429,
              "column": 30
            }
          },
          "replacement": "==",
          "status": "Survived",
          "description": "Replace BinaryOperator by ==",
          "killedBy": []
        },
        {
          "id": "url/src/host.rs:402:38:402:39:BinaryOperator:<",
          "duration": 3.376881464,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 402,
              "column": 38
            },
            "end": {
              "line": 402,
              "column": 39
            }
          },
          "replacement": "<",
          "status": "Survived",
          "description": "Replace BinaryOperator by <",
          "killedBy": []
        },
        {
          "id": "url/src/host.rs:429:29:429:30:BinaryOperator:<",
          "duration": 3.958896415,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 429,
              "column": 29
            },
            "end": {
              "line": 429,
              "column": 30
            }
          },
          "replacement": "<",
          "status": "Survived",
          "description": "Replace BinaryOperator by <",
          "killedBy": []
        },
        {
          "id": "url/src/host.rs:370:13:370:14:BinaryOperator:>",
          "duration": 3.287772583,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 370,
              "column": 13
            },
            "end": {
              "line": 370,
              "column": 14
            }
          },
          "replacement": ">",
          "status": "Killed",
          "description": "Replace BinaryOperator by >",
          "statusReason": "thread 'host_serialization' panicked at url/tests/unit.rs:345:37:\ncalled `Result::unwrap()` on an `Err` value: InvalidIpv6Address\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host_serialization",
            "host",
            "test_authority",
            "test_socket_addrs"
          ]
        },
        {
          "id": "url/src/host.rs:379:27:379:29:BinaryOperator:-=",
          "duration": 3.86187822,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 379,
              "column": 27
            },
            "end": {
              "line": 379,
              "column": 29
            }
          },
          "replacement": "-=",
          "status": "Survived",
          "description": "Replace BinaryOperator by -=",
          "killedBy": []
        },
        {
          "id": "url/src/host.rs:430:33:430:34:BinaryOperator:>",
          "duration": 4.225697783,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 430,
              "column": 33
            },
            "end": {
              "line": 430,
              "column": 34
            }
          },
          "replacement": ">",
          "status": "Survived",
          "description": "Replace BinaryOperator by >",
          "killedBy": []
        },
        {
          "id": "url/src/host.rs:379:27:379:29:BinaryOperator:*=",
          "duration": 5.188013316,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 379,
              "column": 27
            },
            "end": {
              "line": 379,
              "column": 29
            }
          },
          "replacement": "*=",
          "status": "Survived",
          "description": "Replace BinaryOperator by *=",
          "killedBy": []
        },
        {
          "id": "url/src/host.rs:349:5:495:7:FnValue:ParseResult::new()",
          "duration": 0.25782683,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 349,
              "column": 5
            },
            "end": {
              "line": 495,
              "column": 7
            }
          },
          "replacement": "ParseResult::new()",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new()",
          "killedBy": []
        },
        {
          "id": "url/src/host.rs:282:5:313:6:FnValue:Ok(Some(1))",
          "duration": 1.579659724,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 282,
              "column": 5
            },
            "end": {
              "line": 313,
              "column": 6
            }
          },
          "replacement": "Ok(Some(1))",
          "status": "Killed",
          "description": "Replace FnValue by Ok(Some(1))",
          "statusReason": "thread 'issue_61' panicked at url/tests/unit.rs:438:28:\ncalled `Result::unwrap()` on an `Err` value: \"\\\"https://1.0.0.1/\\\" != \\\"https://1.1.1.1/\\\" (&self.serialization != &other.serialization) for URL \\\"https://1.0.0.1/\\\"\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "issue_61",
            "extend_query_pairs_then_mutate",
            "host",
            "test_authority",
            "append_empty_segment_then_mutate",
            "test_domain_encoding_quirks",
            "test_domain",
            "test_equality",
            "parse_with_params",
            "path_backslash_fun",
            "append_trailing_slash",
            "test_idna",
            "test_make_relative",
            "test_slicing",
            "test_socket_addrs",
            "test_leading_dots",
            "test_options_reuse",
            "test_set_empty_host",
            "test_set_host",
            "test_serialization",
            "test_set_scheme_to_file_with_host",
            "test_origin_unicode_serialization"
          ]
        },
        {
          "id": "url/src/host.rs:342:19:342:21:BinaryOperator:>>",
          "duration": 1.77048191,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 342,
              "column": 19
            },
            "end": {
              "line": 342,
              "column": 21
            }
          },
          "replacement": ">>",
          "status": "Killed",
          "description": "Replace BinaryOperator by >>",
          "statusReason": "thread 'test_authority' panicked at url/tests/unit.rs:1246:5:\nassertion `left == right` failed\n  left: \"0.0.0.1\"\n right: \"127.0.0.1\"\n",
          "killedBy": [
            "test_authority",
            "host",
            "test_socket_addrs",
            "test_make_relative"
          ]
        },
        {
          "id": "url/src/host.rs:225:5:256:6:FnValue:(1, 1)",
          "duration": 2.882095933,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 225,
              "column": 5
            },
            "end": {
              "line": 256,
              "column": 6
            }
          },
          "replacement": "(1, 1)",
          "status": "Killed",
          "description": "Replace FnValue by (1, 1)",
          "statusReason": "thread 'host_serialization' panicked at url/tests/unit.rs:344:5:\nassertion `left == right` failed\n  left: Some(\"[0::0:0:0:0:0:0:2]\")\n right: Some(\"[::2]\")\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host_serialization",
            "test_authority",
            "test_set_ip_host"
          ]
        },
        {
          "id": "url/src/host.rs:457:47:457:48:BinaryOperator:*",
          "duration": 5.043134932999999,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 457,
              "column": 47
            },
            "end": {
              "line": 457,
              "column": 48
            }
          },
          "replacement": "*",
          "status": "Survived",
          "description": "Replace BinaryOperator by *",
          "killedBy": []
        },
        {
          "id": "url/src/host.rs:484:31:484:33:BinaryOperator:+=",
          "duration": 3.450594566,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 484,
              "column": 31
            },
            "end": {
              "line": 484,
              "column": 33
            }
          },
          "replacement": "+=",
          "status": "Killed",
          "description": "Replace BinaryOperator by +=",
          "statusReason": "thread 'host_serialization' panicked at url/src/host.rs:482:24:\nindex out of bounds: the len is 8 but the index is 8\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host_serialization"
          ]
        },
        {
          "id": "url/src/host.rs:384:39:384:40:BinaryOperator:*",
          "duration": 1.27191703,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 384,
              "column": 39
            },
            "end": {
              "line": 384,
              "column": 40
            }
          },
          "replacement": "*",
          "status": "Killed",
          "description": "Replace BinaryOperator by *",
          "statusReason": "thread 'host' panicked at url/tests/unit.rs:301:38:\ncalled `Result::unwrap()` on an `Err` value: InvalidIpv6Address\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host",
            "host_serialization"
          ]
        },
        {
          "id": "url/src/host.rs:225:5:256:6:FnValue:(-1, 1)",
          "duration": 1.467998264,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 225,
              "column": 5
            },
            "end": {
              "line": 256,
              "column": 6
            }
          },
          "replacement": "(-1, 1)",
          "status": "Killed",
          "description": "Replace FnValue by (-1, 1)",
          "statusReason": "thread 'host_serialization' panicked at url/tests/unit.rs:344:5:\nassertion `left == right` failed\n  left: Some(\"[0:0:0:0:0:0:0:2]\")\n right: Some(\"[::2]\")\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host_serialization",
            "test_authority",
            "test_set_ip_host"
          ]
        },
        {
          "id": "url/src/host.rs:319:21:319:23:BinaryOperator:!=",
          "duration": 1.368398727,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 319,
              "column": 21
            },
            "end": {
              "line": 319,
              "column": 23
            }
          },
          "replacement": "!=",
          "status": "Killed",
          "description": "Replace BinaryOperator by !=",
          "statusReason": "thread 'test_authority' panicked at url/tests/unit.rs:1246:5:\nassertion `left == right` failed\n  left: \"127.0.0.0\"\n right: \"127.0.0.1\"\n",
          "killedBy": [
            "test_authority",
            "host",
            "test_make_relative",
            "test_socket_addrs"
          ]
        },
        {
          "id": "url/src/host.rs:384:39:384:40:BinaryOperator:-",
          "duration": 1.120725159,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 384,
              "column": 39
            },
            "end": {
              "line": 384,
              "column": 40
            }
          },
          "replacement": "-",
          "status": "Killed",
          "description": "Replace BinaryOperator by -",
          "statusReason": "thread 'test_authority' panicked at url/src/host.rs:384:33:\nattempt to subtract with overflow\n",
          "killedBy": [
            "test_authority",
            "host",
            "host_serialization",
            "test_socket_addrs"
          ]
        },
        {
          "id": "url/src/host.rs:342:14:342:16:BinaryOperator:-=",
          "duration": 1.762252962,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 342,
              "column": 14
            },
            "end": {
              "line": 342,
              "column": 16
            }
          },
          "replacement": "-=",
          "status": "Killed",
          "description": "Replace BinaryOperator by -=",
          "statusReason": "thread 'host' panicked at url/src/host.rs:342:9:\nattempt to subtract with overflow\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host",
            "test_authority",
            "test_domain",
            "test_make_relative",
            "test_origin_unicode_serialization",
            "test_socket_addrs"
          ]
        },
        {
          "id": "url/src/host.rs:241:22:241:23:BinaryOperator:>",
          "duration": 1.469079132,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 241,
              "column": 22
            },
            "end": {
              "line": 241,
              "column": 23
            }
          },
          "replacement": ">",
          "status": "Killed",
          "description": "Replace BinaryOperator by >",
          "statusReason": "thread 'host_serialization' panicked at url/tests/unit.rs:344:5:\nassertion `left == right` failed\n  left: Some(\"[0:0:0:0:0:0:0:2]\")\n right: Some(\"[::2]\")\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host_serialization",
            "test_set_ip_host",
            "test_authority"
          ]
        },
        {
          "id": "url/src/host.rs:255:27:255:28:BinaryOperator:*",
          "duration": 0.91876793,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 255,
              "column": 27
            },
            "end": {
              "line": 255,
              "column": 28
            }
          },
          "replacement": "*",
          "status": "Killed",
          "description": "Replace BinaryOperator by *",
          "statusReason": "thread 'host_serialization' panicked at url/tests/unit.rs:344:5:\nassertion `left == right` failed\n  left: Some(\"[::0:0:0:0:0:0:0:2]\")\n right: Some(\"[::2]\")\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host_serialization",
            "test_authority",
            "test_set_ip_host"
          ]
        },
        {
          "id": "url/src/host.rs:318:5:344:29:FnValue:ParseResult::from(Default::default())",
          "duration": 0.151947641,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 318,
              "column": 5
            },
            "end": {
              "line": 344,
              "column": 29
            }
          },
          "replacement": "ParseResult::from(Default::default())",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from(Default::default())",
          "killedBy": []
        },
        {
          "id": "url/src/host.rs:482:61:482:62:BinaryOperator:*",
          "duration": 1.456448716,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 482,
              "column": 61
            },
            "end": {
              "line": 482,
              "column": 62
            }
          },
          "replacement": "*",
          "status": "Killed",
          "description": "Replace BinaryOperator by *",
          "statusReason": "thread 'host' panicked at url/tests/unit.rs:301:9:\nassertion `left == right` failed\n  left: Some(Ipv6(0:1::))\n right: Some(Ipv6(::1))\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host",
            "host_serialization",
            "test_authority",
            "test_socket_addrs"
          ]
        },
        {
          "id": "url/src/host.rs:130:57:130:58:BinaryOperator:+",
          "duration": 2.414730493,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 130,
              "column": 57
            },
            "end": {
              "line": 130,
              "column": 58
            }
          },
          "replacement": "+",
          "status": "Killed",
          "description": "Replace BinaryOperator by +",
          "statusReason": "thread 'test_socket_addrs' panicked at url/src/host.rs:130:41:\nbyte index 6 is out of bounds of `[::1]`\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_socket_addrs"
          ]
        },
        {
          "id": "url/src/host.rs:318:5:344:29:FnValue:ParseResult::new(Default::default())",
          "duration": 0.359731018,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 318,
              "column": 5
            },
            "end": {
              "line": 344,
              "column": 29
            }
          },
          "replacement": "ParseResult::new(Default::default())",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::new(Default::default())",
          "killedBy": []
        },
        {
          "id": "url/src/host.rs:440:42:440:43:BinaryOperator:+",
          "duration": 3.4384091330000004,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 440,
              "column": 42
            },
            "end": {
              "line": 440,
              "column": 43
            }
          },
          "replacement": "+",
          "status": "Survived",
          "description": "Replace BinaryOperator by +",
          "killedBy": []
        },
        {
          "id": "url/src/host.rs:468:25:468:27:BinaryOperator:==",
          "duration": 3.230941968,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 468,
              "column": 25
            },
            "end": {
              "line": 468,
              "column": 27
            }
          },
          "replacement": "==",
          "status": "Survived",
          "description": "Replace BinaryOperator by ==",
          "killedBy": []
        },
        {
          "id": "url/src/host.rs:287:32:287:34:BinaryOperator:&&",
          "duration": 1.213792385,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 287,
              "column": 32
            },
            "end": {
              "line": 287,
              "column": 34
            }
          },
          "replacement": "&&",
          "status": "Killed",
          "description": "Replace BinaryOperator by &&",
          "statusReason": "thread 'host' panicked at url/tests/unit.rs:301:38:\ncalled `Result::unwrap()` on an `Err` value: InvalidIpv4Address\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host"
          ]
        },
        {
          "id": "url/src/host.rs:386:17:386:18:BinaryOperator:==",
          "duration": 0.604718122,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 386,
              "column": 17
            },
            "end": {
              "line": 386,
              "column": 18
            }
          },
          "replacement": "==",
          "status": "Killed",
          "description": "Replace BinaryOperator by ==",
          "statusReason": "thread 'host' panicked at url/tests/unit.rs:301:38:\ncalled `Result::unwrap()` on an `Err` value: InvalidIpv6Address\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host",
            "host_serialization",
            "test_authority",
            "test_socket_addrs"
          ]
        },
        {
          "id": "url/src/host.rs:172:9:180:10:FnValue:Ok(Default::default())",
          "duration": 0.808604625,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 172,
              "column": 9
            },
            "end": {
              "line": 180,
              "column": 10
            }
          },
          "replacement": "Ok(Default::default())",
          "status": "Killed",
          "description": "Replace FnValue by Ok(Default::default())",
          "statusReason": "thread 'append_empty_segment_then_mutate' panicked at url/tests/unit.rs:494:28:\ncalled `Result::unwrap()` on an `Err` value: \"!( self.host_start >= self.username_end + 2 ) for URL \\\"http://:6767/foo/bar?a=b\\\"\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "append_empty_segment_then_mutate",
            "host",
            "host_serialization",
            "issue_61",
            "test_non_special_path",
            "append_trailing_slash",
            "test_relative",
            "test_serialization",
            "test_set_empty_host",
            "test_set_empty_password",
            "test_set_empty_query",
            "test_set_empty_username_and_password",
            "test_set_host",
            "test_set_ip_host",
            "test_set_scheme_to_file_with_host",
            "test_slicing",
            "path_backslash_fun",
            "test_socket_addrs",
            "test_relative_empty",
            "test_leading_dots",
            "extend_query_pairs_then_mutate",
            "test_domain",
            "parse_with_params",
            "test_origin_unicode_serialization",
            "test_equality",
            "test_authority",
            "test_idna",
            "test_non_special_path2",
            "test_make_relative",
            "test_non_special_path3",
            "test_options_reuse"
          ]
        },
        {
          "id": "url/src/host.rs:463:50:463:52:BinaryOperator:!=",
          "duration": 3.031166872,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 463,
              "column": 50
            },
            "end": {
              "line": 463,
              "column": 52
            }
          },
          "replacement": "!=",
          "status": "Survived",
          "description": "Replace BinaryOperator by !=",
          "killedBy": []
        },
        {
          "id": "url/src/host.rs:349:5:495:7:FnValue:ParseResult::from(Default::default())",
          "duration": 0.30258094,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 349,
              "column": 5
            },
            "end": {
              "line": 495,
              "column": 7
            }
          },
          "replacement": "ParseResult::from(Default::default())",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from(Default::default())",
          "killedBy": []
        },
        {
          "id": "url/src/host.rs:378:15:378:17:BinaryOperator:*=",
          "duration": 1.220518569,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 378,
              "column": 15
            },
            "end": {
              "line": 378,
              "column": 17
            }
          },
          "replacement": "*=",
          "status": "Killed",
          "description": "Replace BinaryOperator by *=",
          "statusReason": "thread 'host_serialization' panicked at url/tests/unit.rs:345:37:\ncalled `Result::unwrap()` on an `Err` value: InvalidIpv6Address\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host_serialization"
          ]
        },
        {
          "id": "url/src/host.rs:481:25:481:26:BinaryOperator:==",
          "duration": 2.385938812,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 481,
              "column": 25
            },
            "end": {
              "line": 481,
              "column": 26
            }
          },
          "replacement": "==",
          "status": "Killed",
          "description": "Replace BinaryOperator by ==",
          "statusReason": "thread 'host' panicked at url/src/host.rs:483:17:\nattempt to subtract with overflow\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host",
            "test_authority",
            "host_serialization",
            "test_socket_addrs"
          ]
        },
        {
          "id": "url/src/host.rs:430:33:430:34:BinaryOperator:==",
          "duration": 3.9437131680000004,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 430,
              "column": 33
            },
            "end": {
              "line": 430,
              "column": 34
            }
          },
          "replacement": "==",
          "status": "Survived",
          "description": "Replace BinaryOperator by ==",
          "killedBy": []
        },
        {
          "id": "url/src/host.rs:428:17:428:18:BinaryOperator:>",
          "duration": 3.9378311999999998,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 428,
              "column": 17
            },
            "end": {
              "line": 428,
              "column": 18
            }
          },
          "replacement": ">",
          "status": "Survived",
          "description": "Replace BinaryOperator by >",
          "killedBy": []
        },
        {
          "id": "url/src/host.rs:453:19:453:21:BinaryOperator:*=",
          "duration": 5.230234505,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 453,
              "column": 19
            },
            "end": {
              "line": 453,
              "column": 21
            }
          },
          "replacement": "*=",
          "status": "Survived",
          "description": "Replace BinaryOperator by *=",
          "killedBy": []
        },
        {
          "id": "url/src/host.rs:463:34:463:36:BinaryOperator:&&",
          "duration": 5.985092074000001,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 463,
              "column": 34
            },
            "end": {
              "line": 463,
              "column": 36
            }
          },
          "replacement": "&&",
          "status": "Survived",
          "description": "Replace BinaryOperator by &&",
          "killedBy": []
        },
        {
          "id": "url/src/host.rs:430:43:430:44:BinaryOperator:>",
          "duration": 5.130820385,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 430,
              "column": 43
            },
            "end": {
              "line": 430,
              "column": 44
            }
          },
          "replacement": ">",
          "status": "Survived",
          "description": "Replace BinaryOperator by >",
          "killedBy": []
        },
        {
          "id": "url/src/host.rs:252:23:252:24:BinaryOperator:>",
          "duration": 1.310547453,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 252,
              "column": 23
            },
            "end": {
              "line": 252,
              "column": 24
            }
          },
          "replacement": ">",
          "status": "Killed",
          "description": "Replace BinaryOperator by >",
          "statusReason": "thread 'host_serialization' panicked at url/tests/unit.rs:344:5:\nassertion `left == right` failed\n  left: Some(\"[0:0:0:0:0:0:0:2]\")\n right: Some(\"[::2]\")\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host_serialization",
            "test_authority",
            "test_set_ip_host"
          ]
        },
        {
          "id": "url/src/host.rs:482:69:482:70:BinaryOperator:+",
          "duration": 1.569167114,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 482,
              "column": 69
            },
            "end": {
              "line": 482,
              "column": 70
            }
          },
          "replacement": "+",
          "status": "Killed",
          "description": "Replace BinaryOperator by +",
          "statusReason": "thread 'host_serialization' panicked at url/tests/unit.rs:344:5:\nassertion `left == right` failed\n  left: Some(\"[0:0:2::]\")\n right: Some(\"[::2]\")\n",
          "killedBy": [
            "host_serialization",
            "host",
            "test_authority",
            "test_socket_addrs"
          ]
        },
        {
          "id": "url/src/host.rs:130:57:130:58:BinaryOperator:/",
          "duration": 0.605396869,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 130,
              "column": 57
            },
            "end": {
              "line": 130,
              "column": 58
            }
          },
          "replacement": "/",
          "status": "Killed",
          "description": "Replace BinaryOperator by /",
          "statusReason": "thread 'test_socket_addrs' panicked at url/tests/unit.rs:645:47:\ncalled `Result::unwrap()` on an `Err` value: InvalidIpv6Address\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_socket_addrs"
          ]
        },
        {
          "id": "url/src/host.rs:389:42:389:43:BinaryOperator:*",
          "duration": 1.378326814,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 389,
              "column": 42
            },
            "end": {
              "line": 389,
              "column": 43
            }
          },
          "replacement": "*",
          "status": "Killed",
          "description": "Replace BinaryOperator by *",
          "statusReason": "thread 'host' panicked at url/tests/unit.rs:301:9:\nassertion `left == right` failed\n  left: Some(Ipv6(::))\n right: Some(Ipv6(2001:db8:85a3:8d3:1319:8a2e:370:7344))\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host",
            "test_authority",
            "host_serialization",
            "test_socket_addrs"
          ]
        },
        {
          "id": "url/src/host.rs:225:5:256:6:FnValue:(1, 0)",
          "duration": 21.657614427,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 225,
              "column": 5
            },
            "end": {
              "line": 256,
              "column": 6
            }
          },
          "replacement": "(1, 0)",
          "status": "Timeout",
          "description": "Replace FnValue by (1, 0)",
          "killedBy": []
        },
        {
          "id": "url/src/host.rs:189:9:194:10:FnValue:false",
          "duration": 1.9388914990000001,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 189,
              "column": 9
            },
            "end": {
              "line": 194,
              "column": 10
            }
          },
          "replacement": "false",
          "status": "Killed",
          "description": "Replace FnValue by false",
          "statusReason": "thread 'test_idna' panicked at url/tests/unit.rs:357:5:\nassertion `left == right` failed\n  left: Some(Domain(\"xn--n3h.net\"))\n right: Some(Domain(\"xn--n3h.net\"))\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_idna",
            "test_make_relative",
            "test_origin_blob_equality",
            "test_leading_dots",
            "host",
            "test_origin_hash"
          ]
        },
        {
          "id": "url/src/host.rs:389:35:389:36:BinaryOperator:/",
          "duration": 2.0786331479999998,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 389,
              "column": 35
            },
            "end": {
              "line": 389,
              "column": 36
            }
          },
          "replacement": "/",
          "status": "Killed",
          "description": "Replace BinaryOperator by /",
          "statusReason": "thread 'host' panicked at url/tests/unit.rs:301:9:\nassertion `left == right` failed\n  left: Some(Ipv6(1:8:3:3:9:e:0:4))\n right: Some(Ipv6(2001:db8:85a3:8d3:1319:8a2e:370:7344))\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host",
            "host_serialization"
          ]
        },
        {
          "id": "url/src/host.rs:282:5:313:6:FnValue:Ok(None)",
          "duration": 1.637966661,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 282,
              "column": 5
            },
            "end": {
              "line": 313,
              "column": 6
            }
          },
          "replacement": "Ok(None)",
          "status": "Killed",
          "description": "Replace FnValue by Ok(None)",
          "statusReason": "thread 'append_trailing_slash' panicked at url/tests/unit.rs:464:68:\ncalled `Result::unwrap()` on an `Err` value: InvalidIpv4Address\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "append_trailing_slash",
            "issue_61",
            "host",
            "extend_query_pairs_then_mutate",
            "from_str",
            "test_fragment",
            "test_has_authority",
            "test_make_relative",
            "test_origin_blob_equality",
            "test_domain_encoding_quirks",
            "test_query",
            "test_origin_hash",
            "test_leading_dots",
            "test_authority",
            "test_set_ip_host",
            "append_empty_segment_then_mutate",
            "test_serialization",
            "test_set_empty_host",
            "test_set_host",
            "test_set_scheme_to_file_with_host",
            "path_backslash_fun",
            "parse_with_params",
            "test_slicing",
            "test_socket_addrs",
            "test_origin_unicode_serialization",
            "test_domain",
            "test_options_reuse",
            "test_set_href",
            "test_equality",
            "test_idna",
            "test_syntax_violation_callback_types",
            "test_syntax_violation_callback",
            "test_syntax_violation_callback_lifetimes"
          ]
        },
        {
          "id": "url/src/host.rs:428:17:428:18:BinaryOperator:==",
          "duration": 3.88773027,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 428,
              "column": 17
            },
            "end": {
              "line": 428,
              "column": 18
            }
          },
          "replacement": "==",
          "status": "Survived",
          "description": "Replace BinaryOperator by ==",
          "killedBy": []
        },
        {
          "id": "url/src/host.rs:208:29:208:30:BinaryOperator:==",
          "duration": 2.2692265380000003,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 208,
              "column": 29
            },
            "end": {
              "line": 208,
              "column": 30
            }
          },
          "replacement": "==",
          "status": "Killed",
          "description": "Replace BinaryOperator by ==",
          "statusReason": "thread 'host' panicked at url/src/host.rs:214:27:\nindex out of bounds: the len is 8 but the index is 8\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host",
            "test_authority",
            "host_serialization",
            "test_set_ip_host"
          ]
        },
        {
          "id": "url/src/host.rs:65:9:69:10:FnValue:Host::from_iter([String::new()])",
          "duration": 0.151904552,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 65,
              "column": 9
            },
            "end": {
              "line": 69,
              "column": 10
            }
          },
          "replacement": "Host::from_iter([String::new()])",
          "status": "CompileError",
          "description": "Replace FnValue by Host::from_iter([String::new()])",
          "killedBy": []
        },
        {
          "id": "url/src/host.rs:408:23:408:25:BinaryOperator:-=",
          "duration": 2.7931230190000003,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 408,
              "column": 23
            },
            "end": {
              "line": 408,
              "column": 25
            }
          },
          "replacement": "-=",
          "status": "Killed",
          "description": "Replace BinaryOperator by -=",
          "statusReason": "thread 'host' panicked at url/tests/unit.rs:301:38:\ncalled `Result::unwrap()` on an `Err` value: InvalidIpv6Address\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host",
            "host_serialization"
          ]
        },
        {
          "id": "url/src/host.rs:430:61:430:63:BinaryOperator:!=",
          "duration": 5.424480036,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 430,
              "column": 61
            },
            "end": {
              "line": 430,
              "column": 63
            }
          },
          "replacement": "!=",
          "status": "Survived",
          "description": "Replace BinaryOperator by !=",
          "killedBy": []
        },
        {
          "id": "url/src/host.rs:484:31:484:33:BinaryOperator:/=",
          "duration": 1.085944283,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 484,
              "column": 31
            },
            "end": {
              "line": 484,
              "column": 33
            }
          },
          "replacement": "/=",
          "status": "Killed",
          "description": "Replace BinaryOperator by /=",
          "statusReason": "thread 'host_serialization' panicked at url/tests/unit.rs:348:5:\nassertion `left == right` failed\n  left: Some(\"[::2:0:0:0:ffff]\")\n right: Some(\"[::ffff:0:2]\")\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host_serialization"
          ]
        },
        {
          "id": "url/src/host.rs:483:23:483:25:BinaryOperator:+=",
          "duration": 1.215574706,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 483,
              "column": 23
            },
            "end": {
              "line": 483,
              "column": 25
            }
          },
          "replacement": "+=",
          "status": "Killed",
          "description": "Replace BinaryOperator by +=",
          "statusReason": "thread 'test_authority' panicked at url/src/host.rs:482:24:\nindex out of bounds: the len is 8 but the index is 8\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_authority",
            "host",
            "host_serialization",
            "test_socket_addrs"
          ]
        },
        {
          "id": "url/src/host.rs:335:13:335:14:BinaryOperator:==",
          "duration": 1.192946778,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 335,
              "column": 13
            },
            "end": {
              "line": 335,
              "column": 14
            }
          },
          "replacement": "==",
          "status": "Killed",
          "description": "Replace BinaryOperator by ==",
          "statusReason": "thread 'host' panicked at url/tests/unit.rs:330:5:\nassertion failed: Url::parse(\"http://42.0x1232131\").is_err()\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host"
          ]
        },
        {
          "id": "url/src/host.rs:322:20:322:21:BinaryOperator:<",
          "duration": 1.88987683,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 322,
              "column": 20
            },
            "end": {
              "line": 322,
              "column": 21
            }
          },
          "replacement": "<",
          "status": "Killed",
          "description": "Replace BinaryOperator by <",
          "statusReason": "thread 'host' panicked at url/tests/unit.rs:301:38:\ncalled `Result::unwrap()` on an `Err` value: InvalidIpv4Address\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host"
          ]
        },
        {
          "id": "url/src/host.rs:65:9:69:10:FnValue:Host::new(String::new())",
          "duration": 0.151848196,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 65,
              "column": 9
            },
            "end": {
              "line": 69,
              "column": 10
            }
          },
          "replacement": "Host::new(String::new())",
          "status": "CompileError",
          "description": "Replace FnValue by Host::new(String::new())",
          "killedBy": []
        },
        {
          "id": "url/src/host.rs:481:25:481:26:BinaryOperator:<",
          "duration": 2.115389191,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 481,
              "column": 25
            },
            "end": {
              "line": 481,
              "column": 26
            }
          },
          "replacement": "<",
          "status": "Killed",
          "description": "Replace BinaryOperator by <",
          "statusReason": "thread 'host' panicked at url/tests/unit.rs:301:9:\nassertion `left == right` failed\n  left: Some(Ipv6(0:1::))\n right: Some(Ipv6(::1))\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host",
            "host_serialization",
            "test_authority",
            "test_socket_addrs"
          ]
        },
        {
          "id": "url/src/host.rs:342:25:342:26:BinaryOperator:+",
          "duration": 2.3377744469999997,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 342,
              "column": 25
            },
            "end": {
              "line": 342,
              "column": 26
            }
          },
          "replacement": "+",
          "status": "Killed",
          "description": "Replace BinaryOperator by +",
          "statusReason": "thread 'host' panicked at url/tests/unit.rs:301:9:\nassertion `left == right` failed\n  left: Some(Ipv4(0.0.214.49))\n right: Some(Ipv4(1.35.33.49))\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host",
            "test_authority",
            "test_make_relative",
            "test_socket_addrs"
          ]
        },
        {
          "id": "url/src/host.rs:342:14:342:16:BinaryOperator:*=",
          "duration": 1.978250533,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 342,
              "column": 14
            },
            "end": {
              "line": 342,
              "column": 16
            }
          },
          "replacement": "*=",
          "status": "Killed",
          "description": "Replace BinaryOperator by *=",
          "statusReason": "thread 'host' panicked at url/src/host.rs:342:9:\nattempt to multiply with overflow\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host",
            "test_authority",
            "test_make_relative",
            "test_socket_addrs"
          ]
        },
        {
          "id": "url/src/host.rs:463:29:463:31:BinaryOperator:!=",
          "duration": 4.005497214,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 463,
              "column": 29
            },
            "end": {
              "line": 463,
              "column": 31
            }
          },
          "replacement": "!=",
          "status": "Survived",
          "description": "Replace BinaryOperator by !=",
          "killedBy": []
        },
        {
          "id": "url/src/host.rs:357:12:357:13:BinaryOperator:==",
          "duration": 2.267332407,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 357,
              "column": 12
            },
            "end": {
              "line": 357,
              "column": 13
            }
          },
          "replacement": "==",
          "status": "Killed",
          "description": "Replace BinaryOperator by ==",
          "statusReason": "thread 'host' panicked at url/tests/unit.rs:301:38:\ncalled `Result::unwrap()` on an `Err` value: InvalidIpv6Address\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host"
          ]
        },
        {
          "id": "url/src/host.rs:390:23:390:25:BinaryOperator:-=",
          "duration": 2.3339874579999997,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 390,
              "column": 23
            },
            "end": {
              "line": 390,
              "column": 25
            }
          },
          "replacement": "-=",
          "status": "Killed",
          "description": "Replace BinaryOperator by -=",
          "statusReason": "thread 'host' panicked at url/src/host.rs:390:21:\nattempt to subtract with overflow\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host",
            "host_serialization",
            "test_authority",
            "test_socket_addrs"
          ]
        },
        {
          "id": "url/src/host.rs:166:9:166:58:FnValue:Ok(String::new())",
          "duration": 2.297276784,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 166,
              "column": 9
            },
            "end": {
              "line": 166,
              "column": 58
            }
          },
          "replacement": "Ok(String::new())",
          "status": "Killed",
          "description": "Replace FnValue by Ok(String::new())",
          "statusReason": "thread 'append_empty_segment_then_mutate' panicked at url/tests/unit.rs:493:68:\ncalled `Result::unwrap()` on an `Err` value: EmptyHost\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "append_empty_segment_then_mutate",
            "from_str",
            "extend_query_pairs_then_mutate",
            "append_trailing_slash",
            "host",
            "test_origin_hash",
            "test_equality",
            "test_options_reuse",
            "test_query",
            "test_origin_blob_equality",
            "test_leading_dots",
            "test_domain_encoding_quirks",
            "test_origin_unicode_serialization",
            "test_make_relative",
            "issue_61",
            "parse_with_params",
            "path_backslash_fun",
            "test_has_authority",
            "test_set_host",
            "test_syntax_violation_callback_types",
            "test_serialization",
            "test_set_scheme_to_file_with_host",
            "test_idna",
            "test_syntax_violation_callback_lifetimes",
            "test_slicing",
            "test_set_href",
            "test_set_ip_host",
            "test_set_empty_host",
            "test_socket_addrs",
            "test_syntax_violation_callback",
            "test_domain",
            "test_fragment",
            "test_authority"
          ]
        },
        {
          "id": "url/src/host.rs:431:23:431:25:BinaryOperator:*=",
          "duration": 4.452837593,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 431,
              "column": 23
            },
            "end": {
              "line": 431,
              "column": 25
            }
          },
          "replacement": "*=",
          "status": "Survived",
          "description": "Replace BinaryOperator by *=",
          "killedBy": []
        },
        {
          "id": "url/src/host.rs:395:14:395:15:BinaryOperator:==",
          "duration": 2.58606009,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 395,
              "column": 14
            },
            "end": {
              "line": 395,
              "column": 15
            }
          },
          "replacement": "==",
          "status": "Killed",
          "description": "Replace BinaryOperator by ==",
          "statusReason": "thread 'host' panicked at url/tests/unit.rs:301:38:\ncalled `Result::unwrap()` on an `Err` value: InvalidIpv6Address\n",
          "killedBy": [
            "host",
            "test_authority",
            "host_serialization",
            "test_socket_addrs"
          ]
        },
        {
          "id": "url/src/host.rs:192:49:192:51:BinaryOperator:!=",
          "duration": 1.074517774,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 192,
              "column": 49
            },
            "end": {
              "line": 192,
              "column": 51
            }
          },
          "replacement": "!=",
          "status": "Killed",
          "description": "Replace BinaryOperator by !=",
          "statusReason": "thread 'host' panicked at url/tests/unit.rs:301:9:\nassertion `left == right` failed\n  left: Some(Ipv6(2001:db8:85a3:8d3:1319:8a2e:370:7344))\n right: Some(Ipv6(2001:db8:85a3:8d3:1319:8a2e:370:7344))\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host"
          ]
        },
        {
          "id": "url/src/host.rs:479:43:479:44:BinaryOperator:+",
          "duration": 3.3719924289999996,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 479,
              "column": 43
            },
            "end": {
              "line": 479,
              "column": 44
            }
          },
          "replacement": "+",
          "status": "Killed",
          "description": "Replace BinaryOperator by +",
          "statusReason": "thread 'host' panicked at url/tests/unit.rs:301:9:\nassertion `left == right` failed\n  left: Some(Ipv6(::1:0:0))\n right: Some(Ipv6(::1))\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host",
            "host_serialization",
            "test_authority",
            "test_socket_addrs"
          ]
        },
        {
          "id": "url/src/host.rs:205:18:205:20:BinaryOperator:!=",
          "duration": 1.433655027,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 205,
              "column": 18
            },
            "end": {
              "line": 205,
              "column": 20
            }
          },
          "replacement": "!=",
          "status": "Killed",
          "description": "Replace BinaryOperator by !=",
          "statusReason": "thread 'test_authority' panicked at url/tests/unit.rs:1252:5:\nassertion `left == right` failed\n  left: \":password@[:1]:8080\"\n right: \":password@[::1]:8080\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_authority",
            "host_serialization",
            "test_set_ip_host"
          ]
        },
        {
          "id": "url/src/host.rs:261:5:276:35:FnValue:false",
          "duration": 1.685535829,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 261,
              "column": 5
            },
            "end": {
              "line": 276,
              "column": 35
            }
          },
          "replacement": "false",
          "status": "Killed",
          "description": "Replace FnValue by false",
          "statusReason": "thread 'test_domain' panicked at url/tests/unit.rs:678:5:\nassertion `left == right` failed\n  left: Some(\"127.0.0.1\")\n right: None\n",
          "killedBy": [
            "test_domain",
            "host"
          ]
        },
        {
          "id": "url/src/host.rs:215:14:215:15:BinaryOperator:==",
          "duration": 2.54004091,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 215,
              "column": 14
            },
            "end": {
              "line": 215,
              "column": 15
            }
          },
          "replacement": "==",
          "status": "Killed",
          "description": "Replace BinaryOperator by ==",
          "statusReason": "thread 'test_authority' panicked at url/tests/unit.rs:1252:5:\nassertion `left == right` failed\n  left: \":password@[::1:]:8080\"\n right: \":password@[::1]:8080\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_authority",
            "host_serialization",
            "test_set_ip_host"
          ]
        },
        {
          "id": "url/src/host.rs:438:21:438:22:BinaryOperator:==",
          "duration": 3.523669291,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 438,
              "column": 21
            },
            "end": {
              "line": 438,
              "column": 22
            }
          },
          "replacement": "==",
          "status": "Survived",
          "description": "Replace BinaryOperator by ==",
          "killedBy": []
        },
        {
          "id": "url/src/host.rs:199:5:220:11:FnValue:Ok(Default::default())",
          "duration": 2.289358167,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 199,
              "column": 5
            },
            "end": {
              "line": 220,
              "column": 11
            }
          },
          "replacement": "Ok(Default::default())",
          "status": "Killed",
          "description": "Replace FnValue by Ok(Default::default())",
          "statusReason": "thread 'host_serialization' panicked at url/tests/unit.rs:344:5:\nassertion `left == right` failed\n  left: Some(\"[]\")\n right: Some(\"[::2]\")\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host_serialization",
            "test_authority",
            "test_set_ip_host"
          ]
        },
        {
          "id": "url/src/host.rs:447:38:447:39:BinaryOperator:-",
          "duration": 4.725380745,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 447,
              "column": 38
            },
            "end": {
              "line": 447,
              "column": 39
            }
          },
          "replacement": "-",
          "status": "Survived",
          "description": "Replace BinaryOperator by -",
          "killedBy": []
        },
        {
          "id": "url/src/host.rs:448:31:448:32:BinaryOperator:==",
          "duration": 4.435856247,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 448,
              "column": 31
            },
            "end": {
              "line": 448,
              "column": 32
            }
          },
          "replacement": "==",
          "status": "Survived",
          "description": "Replace BinaryOperator by ==",
          "killedBy": []
        },
        {
          "id": "url/src/host.rs:408:23:408:25:BinaryOperator:*=",
          "duration": 4.45630806,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 408,
              "column": 23
            },
            "end": {
              "line": 408,
              "column": 25
            }
          },
          "replacement": "*=",
          "status": "Killed",
          "description": "Replace BinaryOperator by *=",
          "statusReason": "thread 'host_serialization' panicked at url/tests/unit.rs:345:37:\ncalled `Result::unwrap()` on an `Err` value: InvalidIpv6Address\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host_serialization",
            "host"
          ]
        },
        {
          "id": "url/src/host.rs:430:37:430:39:BinaryOperator:||",
          "duration": 6.39974781,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 430,
              "column": 37
            },
            "end": {
              "line": 430,
              "column": 39
            }
          },
          "replacement": "||",
          "status": "Survived",
          "description": "Replace BinaryOperator by ||",
          "killedBy": []
        },
        {
          "id": "url/src/host.rs:483:23:483:25:BinaryOperator:/=",
          "duration": 0.873604968,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 483,
              "column": 23
            },
            "end": {
              "line": 483,
              "column": 25
            }
          },
          "replacement": "/=",
          "status": "Killed",
          "description": "Replace BinaryOperator by /=",
          "statusReason": "thread 'host' panicked at url/src/host.rs:484:17:\nattempt to subtract with overflow\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host",
            "host_serialization",
            "test_authority",
            "test_socket_addrs"
          ]
        },
        {
          "id": "url/src/host.rs:473:10:473:11:BinaryOperator:==",
          "duration": 0.9726363309999999,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 473,
              "column": 10
            },
            "end": {
              "line": 473,
              "column": 11
            }
          },
          "replacement": "==",
          "status": "Killed",
          "description": "Replace BinaryOperator by ==",
          "statusReason": "thread 'host_serialization' panicked at url/tests/unit.rs:345:37:\ncalled `Result::unwrap()` on an `Err` value: InvalidIpv6Address\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host_serialization",
            "host",
            "test_authority",
            "test_socket_addrs"
          ]
        },
        {
          "id": "url/src/host.rs:322:20:322:21:BinaryOperator:==",
          "duration": 1.81509038,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 322,
              "column": 20
            },
            "end": {
              "line": 322,
              "column": 21
            }
          },
          "replacement": "==",
          "status": "Killed",
          "description": "Replace BinaryOperator by ==",
          "statusReason": "thread 'host' panicked at url/tests/unit.rs:301:38:\ncalled `Result::unwrap()` on an `Err` value: InvalidIpv4Address\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host",
            "test_origin_unicode_serialization",
            "test_socket_addrs",
            "test_authority",
            "test_domain",
            "test_make_relative"
          ]
        },
        {
          "id": "url/src/host.rs:335:32:335:34:BinaryOperator:<<",
          "duration": 1.6242419209999999,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 335,
              "column": 32
            },
            "end": {
              "line": 335,
              "column": 34
            }
          },
          "replacement": "<<",
          "status": "Killed",
          "description": "Replace BinaryOperator by <<",
          "statusReason": "thread 'host' panicked at url/tests/unit.rs:330:5:\nassertion failed: Url::parse(\"http://42.0x1232131\").is_err()\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host"
          ]
        },
        {
          "id": "url/src/host.rs:464:31:464:33:BinaryOperator:-=",
          "duration": 3.027387159,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 464,
              "column": 31
            },
            "end": {
              "line": 464,
              "column": 33
            }
          },
          "replacement": "-=",
          "status": "Survived",
          "description": "Replace BinaryOperator by -=",
          "killedBy": []
        },
        {
          "id": "url/src/host.rs:189:9:194:10:FnValue:true",
          "duration": 1.872214534,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 189,
              "column": 9
            },
            "end": {
              "line": 194,
              "column": 10
            }
          },
          "replacement": "true",
          "status": "Killed",
          "description": "Replace FnValue by true",
          "statusReason": "thread 'host' panicked at url/tests/unit.rs:334:5:\nassertion `left != right` failed\n  left: Domain(\"foo\")\n right: Domain(\"bar\")\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host",
            "test_make_relative",
            "test_set_empty_host",
            "test_set_empty_password",
            "test_set_empty_username_and_password"
          ]
        },
        {
          "id": "url/src/host.rs:390:23:390:25:BinaryOperator:*=",
          "duration": 21.678015503,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 390,
              "column": 23
            },
            "end": {
              "line": 390,
              "column": 25
            }
          },
          "replacement": "*=",
          "status": "Timeout",
          "description": "Replace BinaryOperator by *=",
          "statusReason": "thread 'host' panicked at url/src/host.rs:389:29:\nattempt to multiply with overflow\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host",
            "test_authority",
            "test_socket_addrs"
          ]
        },
        {
          "id": "url/src/host.rs:389:35:389:36:BinaryOperator:+",
          "duration": 2.532831648,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 389,
              "column": 35
            },
            "end": {
              "line": 389,
              "column": 36
            }
          },
          "replacement": "+",
          "status": "Killed",
          "description": "Replace BinaryOperator by +",
          "statusReason": "thread 'host' panicked at url/tests/unit.rs:301:9:\nassertion `left == right` failed\n  left: Some(Ipv6(43:60:5a:58:4e:62:4a:52))\n right: Some(Ipv6(2001:db8:85a3:8d3:1319:8a2e:370:7344))\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host",
            "test_authority",
            "host_serialization",
            "test_socket_addrs"
          ]
        },
        {
          "id": "url/src/host.rs:488:30:488:32:BinaryOperator:==",
          "duration": 2.6320639449999996,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 488,
              "column": 30
            },
            "end": {
              "line": 488,
              "column": 32
            }
          },
          "replacement": "==",
          "status": "Killed",
          "description": "Replace BinaryOperator by ==",
          "statusReason": "thread 'host' panicked at url/tests/unit.rs:301:38:\ncalled `Result::unwrap()` on an `Err` value: InvalidIpv6Address\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host"
          ]
        },
        {
          "id": "url/src/host.rs:349:5:495:7:FnValue:ParseResult::from_iter([Default::default()])",
          "duration": 0.210897004,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 349,
              "column": 5
            },
            "end": {
              "line": 495,
              "column": 7
            }
          },
          "replacement": "ParseResult::from_iter([Default::default()])",
          "status": "CompileError",
          "description": "Replace FnValue by ParseResult::from_iter([Default::default()])",
          "killedBy": []
        },
        {
          "id": "url/src/host.rs:65:9:69:10:FnValue:Host::from(String::new())",
          "duration": 0.559394569,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 65,
              "column": 9
            },
            "end": {
              "line": 69,
              "column": 10
            }
          },
          "replacement": "Host::from(String::new())",
          "status": "CompileError",
          "description": "Replace FnValue by Host::from(String::new())",
          "killedBy": []
        },
        {
          "id": "url/src/host.rs:240:31:240:33:BinaryOperator:!=",
          "duration": 1.063906227,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 240,
              "column": 31
            },
            "end": {
              "line": 240,
              "column": 33
            }
          },
          "replacement": "!=",
          "status": "Killed",
          "description": "Replace BinaryOperator by !=",
          "statusReason": "thread 'host_serialization' panicked at url/tests/unit.rs:344:5:\nassertion `left == right` failed\n  left: Some(\"[0:0:0:0:0:0:0:2]\")\n right: Some(\"[::2]\")\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host_serialization",
            "test_authority",
            "test_set_ip_host"
          ]
        },
        {
          "id": "url/src/host.rs:65:9:69:10:FnValue:Host::from(\"xyzzy\".into())",
          "duration": 0.408714412,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 65,
              "column": 9
            },
            "end": {
              "line": 69,
              "column": 10
            }
          },
          "replacement": "Host::from(\"xyzzy\".into())",
          "status": "CompileError",
          "description": "Replace FnValue by Host::from(\"xyzzy\".into())",
          "killedBy": []
        },
        {
          "id": "url/src/host.rs:461:26:461:28:BinaryOperator:-=",
          "duration": 3.0182779259999997,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 461,
              "column": 26
            },
            "end": {
              "line": 461,
              "column": 28
            }
          },
          "replacement": "-=",
          "status": "Survived",
          "description": "Replace BinaryOperator by -=",
          "killedBy": []
        },
        {
          "id": "url/src/host.rs:166:9:166:58:FnValue:Ok(\"xyzzy\".into())",
          "duration": 5.588805082,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 166,
              "column": 9
            },
            "end": {
              "line": 166,
              "column": 58
            }
          },
          "replacement": "Ok(\"xyzzy\".into())",
          "status": "Killed",
          "description": "Replace FnValue by Ok(\"xyzzy\".into())",
          "statusReason": "thread 'append_trailing_slash' panicked at url/tests/unit.rs:468:5:\nassertion `left == right` failed\n  left: \"http://xyzzy:6767/foo/bar/?a=b\"\n right: \"http://localhost:6767/foo/bar/?a=b\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "append_trailing_slash",
            "append_empty_segment_then_mutate",
            "test_equality",
            "test_authority",
            "test_domain_encoding_quirks",
            "test_domain",
            "parse_with_params",
            "path_backslash_fun",
            "extend_query_pairs_then_mutate",
            "test_set_empty_host",
            "test_idna",
            "test_leading_dots",
            "test_make_relative",
            "host",
            "test_origin_unicode_serialization",
            "test_serialization",
            "test_options_reuse",
            "test_set_scheme_to_file_with_host",
            "test_set_host",
            "test_slicing",
            "test_socket_addrs"
          ]
        },
        {
          "id": "url/src/host.rs:357:12:357:13:BinaryOperator:>",
          "duration": 1.929179504,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 357,
              "column": 12
            },
            "end": {
              "line": 357,
              "column": 13
            }
          },
          "replacement": ">",
          "status": "Killed",
          "description": "Replace BinaryOperator by >",
          "statusReason": "thread 'host_serialization' panicked at url/tests/unit.rs:345:37:\ncalled `Result::unwrap()` on an `Err` value: InvalidIpv6Address\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "host_serialization",
            "host",
            "test_authority",
            "test_socket_addrs"
          ]
        },
        {
          "id": "url/src/host.rs:461:26:461:28:BinaryOperator:*=",
          "duration": 3.425493051,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 461,
              "column": 26
            },
            "end": {
              "line": 461,
              "column": 28
            }
          },
          "replacement": "*=",
          "status": "Survived",
          "description": "Replace BinaryOperator by *=",
          "killedBy": []
        },
        {
          "id": "url/src/host.rs:453:19:453:21:BinaryOperator:-=",
          "duration": 2.227087543,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 453,
              "column": 19
            },
            "end": {
              "line": 453,
              "column": 21
            }
          },
          "replacement": "-=",
          "status": "Survived",
          "description": "Replace BinaryOperator by -=",
          "killedBy": []
        },
        {
          "id": "url/src/host.rs:218:11:218:13:BinaryOperator:*=",
          "duration": 21.648351024,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 218,
              "column": 11
            },
            "end": {
              "line": 218,
              "column": 13
            }
          },
          "replacement": "*=",
          "status": "Timeout",
          "description": "Replace BinaryOperator by *=",
          "killedBy": []
        }
      ],
      "source": "// Copyright 2013-2016 The rust-url developers.\n//\n// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n// option. This file may not be copied, modified, or distributed\n// except according to those terms.\n\nuse std::cmp;\nuse std::fmt::{self, Formatter};\nuse std::net::{Ipv4Addr, Ipv6Addr};\n\nuse percent_encoding::{percent_decode, utf8_percent_encode, CONTROLS};\n#[cfg(feature = \"serde\")]\nuse serde::{Deserialize, Serialize};\n\nuse crate::parser::{ParseError, ParseResult};\n\n#[cfg_attr(feature = \"serde\", derive(Deserialize, Serialize))]\n#[derive(Copy, Clone, Debug, Eq, PartialEq)]\npub(crate) enum HostInternal {\n    None,\n    Domain,\n    Ipv4(Ipv4Addr),\n    Ipv6(Ipv6Addr),\n}\n\nimpl From<Host<String>> for HostInternal {\n    fn from(host: Host<String>) -> HostInternal {\n        match host {\n            Host::Domain(ref s) if s.is_empty() => HostInternal::None,\n            Host::Domain(_) => HostInternal::Domain,\n            Host::Ipv4(address) => HostInternal::Ipv4(address),\n            Host::Ipv6(address) => HostInternal::Ipv6(address),\n        }\n    }\n}\n\n/// The host name of an URL.\n#[cfg_attr(feature = \"serde\", derive(Deserialize, Serialize))]\n#[derive(Clone, Debug, Eq, Ord, PartialOrd, Hash)]\npub enum Host<S = String> {\n    /// A DNS domain name, as '.' dot-separated labels.\n    /// Non-ASCII labels are encoded in punycode per IDNA if this is the host of\n    /// a special URL, or percent encoded for non-special URLs. Hosts for\n    /// non-special URLs are also called opaque hosts.\n    Domain(S),\n\n    /// An IPv4 address.\n    /// `Url::host_str` returns the serialization of this address,\n    /// as four decimal integers separated by `.` dots.\n    Ipv4(Ipv4Addr),\n\n    /// An IPv6 address.\n    /// `Url::host_str` returns the serialization of that address between `[` and `]` brackets,\n    /// in the format per [RFC 5952 *A Recommendation\n    /// for IPv6 Address Text Representation*](https://tools.ietf.org/html/rfc5952):\n    /// lowercase hexadecimal with maximal `::` compression.\n    Ipv6(Ipv6Addr),\n}\n\nimpl<'a> Host<&'a str> {\n    /// Return a copy of `self` that owns an allocated `String` but does not borrow an `&Url`.\n    pub fn to_owned(&self) -> Host<String> {\n        match *self {\n            Host::Domain(domain) => Host::Domain(domain.to_owned()),\n            Host::Ipv4(address) => Host::Ipv4(address),\n            Host::Ipv6(address) => Host::Ipv6(address),\n        }\n    }\n}\n\nimpl Host<String> {\n    /// Parse a host: either an IPv6 address in [] square brackets, or a domain.\n    ///\n    /// <https://url.spec.whatwg.org/#host-parsing>\n    pub fn parse(input: &str) -> Result<Self, ParseError> {\n        if input.starts_with('[') {\n            if !input.ends_with(']') {\n                return Err(ParseError::InvalidIpv6Address);\n            }\n            return parse_ipv6addr(&input[1..input.len() - 1]).map(Host::Ipv6);\n        }\n        let domain = percent_decode(input.as_bytes()).decode_utf8_lossy();\n\n        let domain = Self::domain_to_ascii(&domain)?;\n\n        if domain.is_empty() {\n            return Err(ParseError::EmptyHost);\n        }\n\n        let is_invalid_domain_char = |c| {\n            matches!(\n                c,\n                '\\0'..='\\u{001F}'\n                    | ' '\n                    | '#'\n                    | '%'\n                    | '/'\n                    | ':'\n                    | '<'\n                    | '>'\n                    | '?'\n                    | '@'\n                    | '['\n                    | '\\\\'\n                    | ']'\n                    | '^'\n                    | '\\u{007F}'\n                    | '|'\n            )\n        };\n\n        if domain.find(is_invalid_domain_char).is_some() {\n            Err(ParseError::InvalidDomainCharacter)\n        } else if ends_in_a_number(&domain) {\n            let address = parse_ipv4addr(&domain)?;\n            Ok(Host::Ipv4(address))\n        } else {\n            Ok(Host::Domain(domain))\n        }\n    }\n\n    // <https://url.spec.whatwg.org/#concept-opaque-host-parser>\n    pub fn parse_opaque(input: &str) -> Result<Self, ParseError> {\n        if input.starts_with('[') {\n            if !input.ends_with(']') {\n                return Err(ParseError::InvalidIpv6Address);\n            }\n            return parse_ipv6addr(&input[1..input.len() - 1]).map(Host::Ipv6);\n        }\n\n        let is_invalid_host_char = |c| {\n            matches!(\n                c,\n                '\\0' | '\\t'\n                    | '\\n'\n                    | '\\r'\n                    | ' '\n                    | '#'\n                    | '/'\n                    | ':'\n                    | '<'\n                    | '>'\n                    | '?'\n                    | '@'\n                    | '['\n                    | '\\\\'\n                    | ']'\n                    | '^'\n                    | '|'\n            )\n        };\n\n        if input.find(is_invalid_host_char).is_some() {\n            Err(ParseError::InvalidDomainCharacter)\n        } else {\n            Ok(Host::Domain(\n                utf8_percent_encode(input, CONTROLS).to_string(),\n            ))\n        }\n    }\n\n    /// convert domain with idna\n    fn domain_to_ascii(domain: &str) -> Result<String, ParseError> {\n        idna::domain_to_ascii(domain).map_err(Into::into)\n    }\n}\n\nimpl<S: AsRef<str>> fmt::Display for Host<S> {\n    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {\n        match *self {\n            Host::Domain(ref domain) => domain.as_ref().fmt(f),\n            Host::Ipv4(ref addr) => addr.fmt(f),\n            Host::Ipv6(ref addr) => {\n                f.write_str(\"[\")?;\n                write_ipv6(addr, f)?;\n                f.write_str(\"]\")\n            }\n        }\n    }\n}\n\nimpl<S, T> PartialEq<Host<T>> for Host<S>\nwhere\n    S: PartialEq<T>,\n{\n    fn eq(&self, other: &Host<T>) -> bool {\n        match (self, other) {\n            (Host::Domain(a), Host::Domain(b)) => a == b,\n            (Host::Ipv4(a), Host::Ipv4(b)) => a == b,\n            (Host::Ipv6(a), Host::Ipv6(b)) => a == b,\n            (_, _) => false,\n        }\n    }\n}\n\nfn write_ipv6(addr: &Ipv6Addr, f: &mut Formatter<'_>) -> fmt::Result {\n    let segments = addr.segments();\n    let (compress_start, compress_end) = longest_zero_sequence(&segments);\n    let mut i = 0;\n    while i < 8 {\n        if i == compress_start {\n            f.write_str(\":\")?;\n            if i == 0 {\n                f.write_str(\":\")?;\n            }\n            if compress_end < 8 {\n                i = compress_end;\n            } else {\n                break;\n            }\n        }\n        write!(f, \"{:x}\", segments[i as usize])?;\n        if i < 7 {\n            f.write_str(\":\")?;\n        }\n        i += 1;\n    }\n    Ok(())\n}\n\n// https://url.spec.whatwg.org/#concept-ipv6-serializer step 2 and 3\nfn longest_zero_sequence(pieces: &[u16; 8]) -> (isize, isize) {\n    let mut longest = -1;\n    let mut longest_length = -1;\n    let mut start = -1;\n    macro_rules! finish_sequence(\n        ($end: expr) => {\n            if start >= 0 {\n                let length = $end - start;\n                if length > longest_length {\n                    longest = start;\n                    longest_length = length;\n                }\n            }\n        };\n    );\n    for i in 0..8 {\n        if pieces[i as usize] == 0 {\n            if start < 0 {\n                start = i;\n            }\n        } else {\n            finish_sequence!(i);\n            start = -1;\n        }\n    }\n    finish_sequence!(8);\n    // https://url.spec.whatwg.org/#concept-ipv6-serializer\n    // step 3: ignore lone zeroes\n    if longest_length < 2 {\n        (-1, -2)\n    } else {\n        (longest, longest + longest_length)\n    }\n}\n\n/// <https://url.spec.whatwg.org/#ends-in-a-number-checker>\nfn ends_in_a_number(input: &str) -> bool {\n    let mut parts = input.rsplit('.');\n    let last = parts.next().unwrap();\n    let last = if last.is_empty() {\n        if let Some(last) = parts.next() {\n            last\n        } else {\n            return false;\n        }\n    } else {\n        last\n    };\n    if !last.is_empty() && last.as_bytes().iter().all(|c| c.is_ascii_digit()) {\n        return true;\n    }\n\n    parse_ipv4number(last).is_ok()\n}\n\n/// <https://url.spec.whatwg.org/#ipv4-number-parser>\n/// Ok(None) means the input is a valid number, but it overflows a `u32`.\nfn parse_ipv4number(mut input: &str) -> Result<Option<u32>, ()> {\n    if input.is_empty() {\n        return Err(());\n    }\n\n    let mut r = 10;\n    if input.starts_with(\"0x\") || input.starts_with(\"0X\") {\n        input = &input[2..];\n        r = 16;\n    } else if input.len() >= 2 && input.starts_with('0') {\n        input = &input[1..];\n        r = 8;\n    }\n\n    if input.is_empty() {\n        return Ok(Some(0));\n    }\n\n    let valid_number = match r {\n        8 => input.as_bytes().iter().all(|c| (b'0'..=b'7').contains(c)),\n        10 => input.as_bytes().iter().all(|c| c.is_ascii_digit()),\n        16 => input.as_bytes().iter().all(|c| c.is_ascii_hexdigit()),\n        _ => false,\n    };\n    if !valid_number {\n        return Err(());\n    }\n\n    match u32::from_str_radix(input, r) {\n        Ok(num) => Ok(Some(num)),\n        Err(_) => Ok(None), // The only possible error kind here is an integer overflow.\n                            // The validity of the chars in the input is checked above.\n    }\n}\n\n/// <https://url.spec.whatwg.org/#concept-ipv4-parser>\nfn parse_ipv4addr(input: &str) -> ParseResult<Ipv4Addr> {\n    let mut parts: Vec<&str> = input.split('.').collect();\n    if parts.last() == Some(&\"\") {\n        parts.pop();\n    }\n    if parts.len() > 4 {\n        return Err(ParseError::InvalidIpv4Address);\n    }\n    let mut numbers: Vec<u32> = Vec::new();\n    for part in parts {\n        match parse_ipv4number(part) {\n            Ok(Some(n)) => numbers.push(n),\n            Ok(None) => return Err(ParseError::InvalidIpv4Address), // u32 overflow\n            Err(()) => return Err(ParseError::InvalidIpv4Address),\n        };\n    }\n    let mut ipv4 = numbers.pop().expect(\"a non-empty list of numbers\");\n    // Equivalent to: ipv4 >= 256 ** (4 − numbers.len())\n    if ipv4 > u32::max_value() >> (8 * numbers.len() as u32) {\n        return Err(ParseError::InvalidIpv4Address);\n    }\n    if numbers.iter().any(|x| *x > 255) {\n        return Err(ParseError::InvalidIpv4Address);\n    }\n    for (counter, n) in numbers.iter().enumerate() {\n        ipv4 += n << (8 * (3 - counter as u32))\n    }\n    Ok(Ipv4Addr::from(ipv4))\n}\n\n/// <https://url.spec.whatwg.org/#concept-ipv6-parser>\nfn parse_ipv6addr(input: &str) -> ParseResult<Ipv6Addr> {\n    let input = input.as_bytes();\n    let len = input.len();\n    let mut is_ip_v4 = false;\n    let mut pieces = [0, 0, 0, 0, 0, 0, 0, 0];\n    let mut piece_pointer = 0;\n    let mut compress_pointer = None;\n    let mut i = 0;\n\n    if len < 2 {\n        return Err(ParseError::InvalidIpv6Address);\n    }\n\n    if input[0] == b':' {\n        if input[1] != b':' {\n            return Err(ParseError::InvalidIpv6Address);\n        }\n        i = 2;\n        piece_pointer = 1;\n        compress_pointer = Some(1);\n    }\n\n    while i < len {\n        if piece_pointer == 8 {\n            return Err(ParseError::InvalidIpv6Address);\n        }\n        if input[i] == b':' {\n            if compress_pointer.is_some() {\n                return Err(ParseError::InvalidIpv6Address);\n            }\n            i += 1;\n            piece_pointer += 1;\n            compress_pointer = Some(piece_pointer);\n            continue;\n        }\n        let start = i;\n        let end = cmp::min(len, start + 4);\n        let mut value = 0u16;\n        while i < end {\n            match (input[i] as char).to_digit(16) {\n                Some(digit) => {\n                    value = value * 0x10 + digit as u16;\n                    i += 1;\n                }\n                None => break,\n            }\n        }\n        if i < len {\n            match input[i] {\n                b'.' => {\n                    if i == start {\n                        return Err(ParseError::InvalidIpv6Address);\n                    }\n                    i = start;\n                    if piece_pointer > 6 {\n                        return Err(ParseError::InvalidIpv6Address);\n                    }\n                    is_ip_v4 = true;\n                }\n                b':' => {\n                    i += 1;\n                    if i == len {\n                        return Err(ParseError::InvalidIpv6Address);\n                    }\n                }\n                _ => return Err(ParseError::InvalidIpv6Address),\n            }\n        }\n        if is_ip_v4 {\n            break;\n        }\n        pieces[piece_pointer] = value;\n        piece_pointer += 1;\n    }\n\n    if is_ip_v4 {\n        if piece_pointer > 6 {\n            return Err(ParseError::InvalidIpv6Address);\n        }\n        let mut numbers_seen = 0;\n        while i < len {\n            if numbers_seen > 0 {\n                if numbers_seen < 4 && (i < len && input[i] == b'.') {\n                    i += 1\n                } else {\n                    return Err(ParseError::InvalidIpv6Address);\n                }\n            }\n\n            let mut ipv4_piece = None;\n            while i < len {\n                let digit = match input[i] {\n                    c @ b'0'..=b'9' => c - b'0',\n                    _ => break,\n                };\n                match ipv4_piece {\n                    None => ipv4_piece = Some(digit as u16),\n                    Some(0) => return Err(ParseError::InvalidIpv6Address), // No leading zero\n                    Some(ref mut v) => {\n                        *v = *v * 10 + digit as u16;\n                        if *v > 255 {\n                            return Err(ParseError::InvalidIpv6Address);\n                        }\n                    }\n                }\n                i += 1;\n            }\n\n            pieces[piece_pointer] = if let Some(v) = ipv4_piece {\n                pieces[piece_pointer] * 0x100 + v\n            } else {\n                return Err(ParseError::InvalidIpv6Address);\n            };\n            numbers_seen += 1;\n\n            if numbers_seen == 2 || numbers_seen == 4 {\n                piece_pointer += 1;\n            }\n        }\n\n        if numbers_seen != 4 {\n            return Err(ParseError::InvalidIpv6Address);\n        }\n    }\n\n    if i < len {\n        return Err(ParseError::InvalidIpv6Address);\n    }\n\n    match compress_pointer {\n        Some(compress_pointer) => {\n            let mut swaps = piece_pointer - compress_pointer;\n            piece_pointer = 7;\n            while swaps > 0 {\n                pieces.swap(piece_pointer, compress_pointer + swaps - 1);\n                swaps -= 1;\n                piece_pointer -= 1;\n            }\n        }\n        _ => {\n            if piece_pointer != 8 {\n                return Err(ParseError::InvalidIpv6Address);\n            }\n        }\n    }\n    Ok(Ipv6Addr::new(\n        pieces[0], pieces[1], pieces[2], pieces[3], pieces[4], pieces[5], pieces[6], pieces[7],\n    ))\n}\n"
    },
    "url/src/quirks.rs": {
      "language": "rust",
      "mutants": [
        {
          "id": "url/src/quirks.rs:143:5:143:52:FnValue:\"xyzzy\"",
          "duration": 8.140085736,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 143,
              "column": 5
            },
            "end": {
              "line": 143,
              "column": 52
            }
          },
          "replacement": "\"xyzzy\"",
          "status": "Survived",
          "description": "Replace FnValue by \"xyzzy\"",
          "killedBy": []
        },
        {
          "id": "url/src/quirks.rs:248:78:248:80:BinaryOperator:!=",
          "duration": 4.076266642,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 248,
              "column": 78
            },
            "end": {
              "line": 248,
              "column": 80
            }
          },
          "replacement": "!=",
          "status": "Survived",
          "description": "Replace BinaryOperator by !=",
          "killedBy": []
        },
        {
          "id": "url/src/quirks.rs:196:5:196:33:FnValue:\"xyzzy\"",
          "duration": 3.168351827,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 196,
              "column": 5
            },
            "end": {
              "line": 196,
              "column": 33
            }
          },
          "replacement": "\"xyzzy\"",
          "status": "Survived",
          "description": "Replace FnValue by \"xyzzy\"",
          "killedBy": []
        },
        {
          "id": "url/src/quirks.rs:127:5:127:33:FnValue:\"xyzzy\"",
          "duration": 3.774179941,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 127,
              "column": 5
            },
            "end": {
              "line": 127,
              "column": 33
            }
          },
          "replacement": "\"xyzzy\"",
          "status": "Survived",
          "description": "Replace FnValue by \"xyzzy\"",
          "killedBy": []
        },
        {
          "id": "url/src/quirks.rs:98:5:98:52:FnValue:\"\"",
          "duration": 3.937449969,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 98,
              "column": 5
            },
            "end": {
              "line": 98,
              "column": 52
            }
          },
          "replacement": "\"\"",
          "status": "Survived",
          "description": "Replace FnValue by \"\"",
          "killedBy": []
        },
        {
          "id": "url/src/quirks.rs:48:5:57:6:FnValue:Default::default()",
          "duration": 4.1154406009999995,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 48,
              "column": 5
            },
            "end": {
              "line": 57,
              "column": 6
            }
          },
          "replacement": "Default::default()",
          "status": "Survived",
          "description": "Replace FnValue by Default::default()",
          "killedBy": []
        },
        {
          "id": "url/src/quirks.rs:268:5:268:15:FnValue:\"\"",
          "duration": 4.231133458,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 268,
              "column": 5
            },
            "end": {
              "line": 268,
              "column": 15
            }
          },
          "replacement": "\"\"",
          "status": "Survived",
          "description": "Replace FnValue by \"\"",
          "killedBy": []
        },
        {
          "id": "url/src/quirks.rs:310:5:317:7:FnValue:()",
          "duration": 3.873169656,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 310,
              "column": 5
            },
            "end": {
              "line": 317,
              "column": 7
            }
          },
          "replacement": "()",
          "status": "Survived",
          "description": "Replace FnValue by ()",
          "killedBy": []
        },
        {
          "id": "url/src/quirks.rs:92:5:92:39:FnValue:String::new()",
          "duration": 3.572316382,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 92,
              "column": 5
            },
            "end": {
              "line": 92,
              "column": 39
            }
          },
          "replacement": "String::new()",
          "status": "Survived",
          "description": "Replace FnValue by String::new()",
          "killedBy": []
        },
        {
          "id": "url/src/quirks.rs:248:28:248:30:BinaryOperator:&&",
          "duration": 2.821571354,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 248,
              "column": 28
            },
            "end": {
              "line": 248,
              "column": 30
            }
          },
          "replacement": "&&",
          "status": "Survived",
          "description": "Replace BinaryOperator by &&",
          "killedBy": []
        },
        {
          "id": "url/src/quirks.rs:106:5:109:33:FnValue:Ok(())",
          "duration": 3.3359634479999998,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 106,
              "column": 5
            },
            "end": {
              "line": 109,
              "column": 33
            }
          },
          "replacement": "Ok(())",
          "status": "Survived",
          "description": "Replace FnValue by Ok(())",
          "killedBy": []
        },
        {
          "id": "url/src/quirks.rs:238:5:238:52:FnValue:\"xyzzy\"",
          "duration": 1.744538474,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 238,
              "column": 5
            },
            "end": {
              "line": 238,
              "column": 52
            }
          },
          "replacement": "\"xyzzy\"",
          "status": "Killed",
          "description": "Replace FnValue by \"xyzzy\"",
          "statusReason": "thread 'no_panic' panicked at url/tests/unit.rs:990:79:\ncalled `Result::unwrap()` on an `Err` value: ()\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "no_panic",
            "test_set_empty_hostname"
          ]
        },
        {
          "id": "url/src/quirks.rs:296:5:300:7:FnValue:()",
          "duration": 2.508313255,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 296,
              "column": 5
            },
            "end": {
              "line": 300,
              "column": 7
            }
          },
          "replacement": "()",
          "status": "Survived",
          "description": "Replace FnValue by ()",
          "killedBy": []
        },
        {
          "id": "url/src/quirks.rs:321:5:325:6:FnValue:\"\"",
          "duration": 2.866773768,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 321,
              "column": 5
            },
            "end": {
              "line": 325,
              "column": 6
            }
          },
          "replacement": "\"\"",
          "status": "Survived",
          "description": "Replace FnValue by \"\"",
          "killedBy": []
        },
        {
          "id": "url/src/quirks.rs:238:5:238:52:FnValue:\"\"",
          "duration": 3.662326238,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 238,
              "column": 5
            },
            "end": {
              "line": 238,
              "column": 52
            }
          },
          "replacement": "\"\"",
          "status": "Survived",
          "description": "Replace FnValue by \"\"",
          "killedBy": []
        },
        {
          "id": "url/src/quirks.rs:98:5:98:52:FnValue:\"xyzzy\"",
          "duration": 3.530336792,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 98,
              "column": 5
            },
            "end": {
              "line": 98,
              "column": 52
            }
          },
          "replacement": "\"xyzzy\"",
          "status": "Survived",
          "description": "Replace FnValue by \"xyzzy\"",
          "killedBy": []
        },
        {
          "id": "url/src/quirks.rs:279:13:279:15:BinaryOperator:||",
          "duration": 4.08350922,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 279,
              "column": 13
            },
            "end": {
              "line": 279,
              "column": 15
            }
          },
          "replacement": "||",
          "status": "Survived",
          "description": "Replace BinaryOperator by ||",
          "killedBy": []
        },
        {
          "id": "url/src/quirks.rs:219:21:219:23:BinaryOperator:&&",
          "duration": 5.948339198999999,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 219,
              "column": 21
            },
            "end": {
              "line": 219,
              "column": 23
            }
          },
          "replacement": "&&",
          "status": "Survived",
          "description": "Replace BinaryOperator by &&",
          "killedBy": []
        },
        {
          "id": "url/src/quirks.rs:92:5:92:39:FnValue:\"xyzzy\".into()",
          "duration": 4.522800135000001,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 92,
              "column": 5
            },
            "end": {
              "line": 92,
              "column": 39
            }
          },
          "replacement": "\"xyzzy\".into()",
          "status": "Survived",
          "description": "Replace FnValue by \"xyzzy\".into()",
          "killedBy": []
        },
        {
          "id": "url/src/quirks.rs:161:24:161:26:BinaryOperator:!=",
          "duration": 4.884643562,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 161,
              "column": 24
            },
            "end": {
              "line": 161,
              "column": 26
            }
          },
          "replacement": "!=",
          "status": "Survived",
          "description": "Replace BinaryOperator by !=",
          "killedBy": []
        },
        {
          "id": "url/src/quirks.rs:185:9:185:11:BinaryOperator:||",
          "duration": 3.459926409,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 185,
              "column": 9
            },
            "end": {
              "line": 185,
              "column": 11
            }
          },
          "replacement": "||",
          "status": "Survived",
          "description": "Replace BinaryOperator by ||",
          "killedBy": []
        },
        {
          "id": "url/src/quirks.rs:222:21:222:23:BinaryOperator:&&",
          "duration": 2.061608616,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 222,
              "column": 21
            },
            "end": {
              "line": 222,
              "column": 23
            }
          },
          "replacement": "&&",
          "status": "Killed",
          "description": "Replace BinaryOperator by &&",
          "statusReason": "thread 'test_set_empty_hostname' panicked at url/tests/unit.rs:95:5:\nsetting an empty hostname to a url with a username should fail\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_set_empty_hostname"
          ]
        },
        {
          "id": "url/src/quirks.rs:273:5:286:6:FnValue:()",
          "duration": 4.067236865,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 273,
              "column": 5
            },
            "end": {
              "line": 286,
              "column": 6
            }
          },
          "replacement": "()",
          "status": "Survived",
          "description": "Replace FnValue by ()",
          "killedBy": []
        },
        {
          "id": "url/src/quirks.rs:70:5:76:6:FnValue:String::new()",
          "duration": 1.31857417,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 70,
              "column": 5
            },
            "end": {
              "line": 76,
              "column": 6
            }
          },
          "replacement": "String::new()",
          "status": "Killed",
          "description": "Replace FnValue by String::new()",
          "statusReason": "thread 'test_domain_encoding_quirks' panicked at url/tests/unit.rs:774:9:\nassertion `left == right` failed\n  left: \"\"\n right: \"😅.🙂\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_domain_encoding_quirks"
          ]
        },
        {
          "id": "url/src/quirks.rs:244:5:262:6:FnValue:Ok(())",
          "duration": 4.924139366,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 244,
              "column": 5
            },
            "end": {
              "line": 262,
              "column": 6
            }
          },
          "replacement": "Ok(())",
          "status": "Survived",
          "description": "Replace FnValue by Ok(())",
          "killedBy": []
        },
        {
          "id": "url/src/quirks.rs:161:44:161:46:BinaryOperator:||",
          "duration": 4.072555400000001,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 161,
              "column": 44
            },
            "end": {
              "line": 161,
              "column": 46
            }
          },
          "replacement": "||",
          "status": "Survived",
          "description": "Replace BinaryOperator by ||",
          "killedBy": []
        },
        {
          "id": "url/src/quirks.rs:248:68:248:70:BinaryOperator:&&",
          "duration": 4.2850086009999995,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 248,
              "column": 68
            },
            "end": {
              "line": 248,
              "column": 70
            }
          },
          "replacement": "&&",
          "status": "Survived",
          "description": "Replace BinaryOperator by &&",
          "killedBy": []
        },
        {
          "id": "url/src/quirks.rs:98:40:98:41:BinaryOperator:*",
          "duration": 5.1889067749999995,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 98,
              "column": 40
            },
            "end": {
              "line": 98,
              "column": 41
            }
          },
          "replacement": "*",
          "status": "Survived",
          "description": "Replace BinaryOperator by *",
          "killedBy": []
        },
        {
          "id": "url/src/quirks.rs:202:5:232:6:FnValue:Ok(())",
          "duration": 1.230666761,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 202,
              "column": 5
            },
            "end": {
              "line": 232,
              "column": 6
            }
          },
          "replacement": "Ok(())",
          "status": "Killed",
          "description": "Replace FnValue by Ok(())",
          "statusReason": "thread 'test_set_empty_hostname' panicked at url/tests/unit.rs:95:5:\nsetting an empty hostname to a url with a username should fail\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_set_empty_hostname"
          ]
        },
        {
          "id": "url/src/quirks.rs:133:5:137:7:FnValue:Ok(())",
          "duration": 3.4821251240000004,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 133,
              "column": 5
            },
            "end": {
              "line": 137,
              "column": 7
            }
          },
          "replacement": "Ok(())",
          "status": "Survived",
          "description": "Replace FnValue by Ok(())",
          "killedBy": []
        },
        {
          "id": "url/src/quirks.rs:277:9:277:11:BinaryOperator:&&",
          "duration": 2.7729207750000002,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 277,
              "column": 9
            },
            "end": {
              "line": 277,
              "column": 11
            }
          },
          "replacement": "&&",
          "status": "Survived",
          "description": "Replace BinaryOperator by &&",
          "killedBy": []
        },
        {
          "id": "url/src/quirks.rs:217:51:217:53:BinaryOperator:!=",
          "duration": 1.357819731,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 217,
              "column": 51
            },
            "end": {
              "line": 217,
              "column": 53
            }
          },
          "replacement": "!=",
          "status": "Killed",
          "description": "Replace BinaryOperator by !=",
          "statusReason": "thread 'no_panic' panicked at url/tests/unit.rs:990:79:\ncalled `Result::unwrap()` on an `Err` value: ()\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "no_panic",
            "test_set_empty_hostname"
          ]
        },
        {
          "id": "url/src/quirks.rs:81:5:81:17:FnValue:\"xyzzy\"",
          "duration": 3.324311684,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 81,
              "column": 5
            },
            "end": {
              "line": 81,
              "column": 17
            }
          },
          "replacement": "\"xyzzy\"",
          "status": "Survived",
          "description": "Replace FnValue by \"xyzzy\"",
          "killedBy": []
        },
        {
          "id": "url/src/quirks.rs:248:42:248:44:BinaryOperator:!=",
          "duration": 3.383445276,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 248,
              "column": 42
            },
            "end": {
              "line": 248,
              "column": 44
            }
          },
          "replacement": "!=",
          "status": "Survived",
          "description": "Replace BinaryOperator by !=",
          "killedBy": []
        },
        {
          "id": "url/src/quirks.rs:70:5:76:6:FnValue:\"xyzzy\".into()",
          "duration": 2.022239685,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 70,
              "column": 5
            },
            "end": {
              "line": 76,
              "column": 6
            }
          },
          "replacement": "\"xyzzy\".into()",
          "status": "Killed",
          "description": "Replace FnValue by \"xyzzy\".into()",
          "statusReason": "thread 'test_domain_encoding_quirks' panicked at url/tests/unit.rs:774:9:\nassertion `left == right` failed\n  left: \"xyzzy\"\n right: \"\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_domain_encoding_quirks"
          ]
        },
        {
          "id": "url/src/quirks.rs:221:21:221:23:BinaryOperator:&&",
          "duration": 1.2183146360000001,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 221,
              "column": 21
            },
            "end": {
              "line": 221,
              "column": 23
            }
          },
          "replacement": "&&",
          "status": "Killed",
          "description": "Replace BinaryOperator by &&",
          "statusReason": "thread 'test_set_empty_hostname' panicked at url/tests/unit.rs:95:5:\nsetting an empty hostname to a url with a username should fail\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_set_empty_hostname"
          ]
        },
        {
          "id": "url/src/quirks.rs:62:5:65:6:FnValue:String::new()",
          "duration": 0.704885259,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 62,
              "column": 5
            },
            "end": {
              "line": 65,
              "column": 6
            }
          },
          "replacement": "String::new()",
          "status": "Killed",
          "description": "Replace FnValue by String::new()",
          "statusReason": "thread 'test_domain_encoding_quirks' panicked at url/tests/unit.rs:773:9:\nassertion `left == right` failed\n  left: \"\"\n right: \"xn--j28h.xn--938h\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_domain_encoding_quirks"
          ]
        },
        {
          "id": "url/src/quirks.rs:127:5:127:33:FnValue:\"\"",
          "duration": 3.008774586,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 127,
              "column": 5
            },
            "end": {
              "line": 127,
              "column": 33
            }
          },
          "replacement": "\"\"",
          "status": "Survived",
          "description": "Replace FnValue by \"\"",
          "killedBy": []
        },
        {
          "id": "url/src/quirks.rs:115:5:115:19:FnValue:\"\"",
          "duration": 5.026367944,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 115,
              "column": 5
            },
            "end": {
              "line": 115,
              "column": 19
            }
          },
          "replacement": "\"\"",
          "status": "Survived",
          "description": "Replace FnValue by \"\"",
          "killedBy": []
        },
        {
          "id": "url/src/quirks.rs:121:5:121:35:FnValue:Ok(())",
          "duration": 4.976673034,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 121,
              "column": 5
            },
            "end": {
              "line": 121,
              "column": 35
            }
          },
          "replacement": "Ok(())",
          "status": "Survived",
          "description": "Replace FnValue by Ok(())",
          "killedBy": []
        },
        {
          "id": "url/src/quirks.rs:150:5:190:11:FnValue:Ok(())",
          "duration": 5.086985058,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 150,
              "column": 5
            },
            "end": {
              "line": 190,
              "column": 11
            }
          },
          "replacement": "Ok(())",
          "status": "Survived",
          "description": "Replace FnValue by Ok(())",
          "killedBy": []
        },
        {
          "id": "url/src/quirks.rs:291:5:291:58:FnValue:\"xyzzy\"",
          "duration": 3.7302844410000002,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 291,
              "column": 5
            },
            "end": {
              "line": 291,
              "column": 58
            }
          },
          "replacement": "\"xyzzy\"",
          "status": "Survived",
          "description": "Replace FnValue by \"xyzzy\"",
          "killedBy": []
        },
        {
          "id": "url/src/quirks.rs:86:5:87:11:FnValue:Ok(())",
          "duration": 2.5763186300000003,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 86,
              "column": 5
            },
            "end": {
              "line": 87,
              "column": 11
            }
          },
          "replacement": "Ok(())",
          "status": "Killed",
          "description": "Replace FnValue by Ok(())",
          "statusReason": "thread 'test_set_href' panicked at url/tests/unit.rs:747:5:\nassertion failed: set_href(&mut url, \"mal//formed\").is_err()\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_set_href"
          ]
        },
        {
          "id": "url/src/quirks.rs:143:5:143:52:FnValue:\"\"",
          "duration": 4.132721802000001,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 143,
              "column": 5
            },
            "end": {
              "line": 143,
              "column": 52
            }
          },
          "replacement": "\"\"",
          "status": "Survived",
          "description": "Replace FnValue by \"\"",
          "killedBy": []
        },
        {
          "id": "url/src/quirks.rs:321:5:325:6:FnValue:\"xyzzy\"",
          "duration": 3.927283461,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 321,
              "column": 5
            },
            "end": {
              "line": 325,
              "column": 6
            }
          },
          "replacement": "\"xyzzy\"",
          "status": "Survived",
          "description": "Replace FnValue by \"xyzzy\"",
          "killedBy": []
        },
        {
          "id": "url/src/quirks.rs:305:5:305:39:FnValue:\"xyzzy\"",
          "duration": 4.834845529,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 305,
              "column": 5
            },
            "end": {
              "line": 305,
              "column": 39
            }
          },
          "replacement": "\"xyzzy\"",
          "status": "Survived",
          "description": "Replace FnValue by \"xyzzy\"",
          "killedBy": []
        },
        {
          "id": "url/src/quirks.rs:185:39:185:41:BinaryOperator:&&",
          "duration": 4.20685795,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 185,
              "column": 39
            },
            "end": {
              "line": 185,
              "column": 41
            }
          },
          "replacement": "&&",
          "status": "Survived",
          "description": "Replace BinaryOperator by &&",
          "killedBy": []
        },
        {
          "id": "url/src/quirks.rs:62:5:65:6:FnValue:\"xyzzy\".into()",
          "duration": 2.531186276,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 62,
              "column": 5
            },
            "end": {
              "line": 65,
              "column": 6
            }
          },
          "replacement": "\"xyzzy\".into()",
          "status": "Killed",
          "description": "Replace FnValue by \"xyzzy\".into()",
          "statusReason": "thread 'test_domain_encoding_quirks' panicked at url/tests/unit.rs:773:9:\nassertion `left == right` failed\n  left: \"xyzzy\"\n right: \"\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_domain_encoding_quirks"
          ]
        },
        {
          "id": "url/src/quirks.rs:115:5:115:19:FnValue:\"xyzzy\"",
          "duration": 3.9416629299999997,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 115,
              "column": 5
            },
            "end": {
              "line": 115,
              "column": 19
            }
          },
          "replacement": "\"xyzzy\"",
          "status": "Survived",
          "description": "Replace FnValue by \"xyzzy\"",
          "killedBy": []
        },
        {
          "id": "url/src/quirks.rs:185:76:185:78:BinaryOperator:&&",
          "duration": 3.929155664,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 185,
              "column": 76
            },
            "end": {
              "line": 185,
              "column": 78
            }
          },
          "replacement": "&&",
          "status": "Survived",
          "description": "Replace BinaryOperator by &&",
          "killedBy": []
        },
        {
          "id": "url/src/quirks.rs:184:13:184:15:BinaryOperator:!=",
          "duration": 4.116753450999999,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 184,
              "column": 13
            },
            "end": {
              "line": 184,
              "column": 15
            }
          },
          "replacement": "!=",
          "status": "Survived",
          "description": "Replace BinaryOperator by !=",
          "killedBy": []
        },
        {
          "id": "url/src/quirks.rs:208:20:208:22:BinaryOperator:!=",
          "duration": 2.324150248,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 208,
              "column": 20
            },
            "end": {
              "line": 208,
              "column": 22
            }
          },
          "replacement": "!=",
          "status": "Killed",
          "description": "Replace BinaryOperator by !=",
          "statusReason": "thread 'test_set_empty_hostname' panicked at url/tests/unit.rs:95:5:\nsetting an empty hostname to a url with a username should fail\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_set_empty_hostname"
          ]
        },
        {
          "id": "url/src/quirks.rs:305:5:305:39:FnValue:\"\"",
          "duration": 3.782425548,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 305,
              "column": 5
            },
            "end": {
              "line": 305,
              "column": 39
            }
          },
          "replacement": "\"\"",
          "status": "Survived",
          "description": "Replace FnValue by \"\"",
          "killedBy": []
        },
        {
          "id": "url/src/quirks.rs:321:16:321:18:BinaryOperator:!=",
          "duration": 3.329445475,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 321,
              "column": 16
            },
            "end": {
              "line": 321,
              "column": 18
            }
          },
          "replacement": "!=",
          "status": "Survived",
          "description": "Replace BinaryOperator by !=",
          "killedBy": []
        },
        {
          "id": "url/src/quirks.rs:98:40:98:41:BinaryOperator:-",
          "duration": 3.731977468,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 98,
              "column": 40
            },
            "end": {
              "line": 98,
              "column": 41
            }
          },
          "replacement": "-",
          "status": "Survived",
          "description": "Replace BinaryOperator by -",
          "killedBy": []
        },
        {
          "id": "url/src/quirks.rs:268:5:268:15:FnValue:\"xyzzy\"",
          "duration": 3.280972153,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 268,
              "column": 5
            },
            "end": {
              "line": 268,
              "column": 15
            }
          },
          "replacement": "\"xyzzy\"",
          "status": "Survived",
          "description": "Replace FnValue by \"xyzzy\"",
          "killedBy": []
        },
        {
          "id": "url/src/quirks.rs:291:5:291:58:FnValue:\"\"",
          "duration": 6.006909381,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 291,
              "column": 5
            },
            "end": {
              "line": 291,
              "column": 58
            }
          },
          "replacement": "\"\"",
          "status": "Survived",
          "description": "Replace FnValue by \"\"",
          "killedBy": []
        },
        {
          "id": "url/src/quirks.rs:208:40:208:42:BinaryOperator:||",
          "duration": 1.2180715279999998,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 208,
              "column": 40
            },
            "end": {
              "line": 208,
              "column": 42
            }
          },
          "replacement": "||",
          "status": "Killed",
          "description": "Replace BinaryOperator by ||",
          "statusReason": "thread 'test_set_empty_hostname' panicked at url/tests/unit.rs:95:5:\nsetting an empty hostname to a url with a username should fail\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_set_empty_hostname"
          ]
        },
        {
          "id": "url/src/quirks.rs:196:5:196:33:FnValue:\"\"",
          "duration": 2.462326301,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 196,
              "column": 5
            },
            "end": {
              "line": 196,
              "column": 33
            }
          },
          "replacement": "\"\"",
          "status": "Survived",
          "description": "Replace FnValue by \"\"",
          "killedBy": []
        },
        {
          "id": "url/src/quirks.rs:81:5:81:17:FnValue:\"\"",
          "duration": 3.212249033,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 81,
              "column": 5
            },
            "end": {
              "line": 81,
              "column": 17
            }
          },
          "replacement": "\"\"",
          "status": "Survived",
          "description": "Replace FnValue by \"\"",
          "killedBy": []
        }
      ],
      "source": "// Copyright 2016 The rust-url developers.\n//\n// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n// option. This file may not be copied, modified, or distributed\n// except according to those terms.\n\n//! Getters and setters for URL components implemented per https://url.spec.whatwg.org/#api\n//!\n//! Unless you need to be interoperable with web browsers,\n//! you probably want to use `Url` method instead.\n\nuse crate::parser::{default_port, Context, Input, Parser, SchemeType};\nuse crate::{Host, ParseError, Position, Url};\n\n/// Internal components / offsets of a URL.\n///\n/// https://user@pass:example.com:1234/foo/bar?baz#quux\n///      |      |    |          | ^^^^|       |   |\n///      |      |    |          | |   |       |   `----- fragment_start\n///      |      |    |          | |   |       `--------- query_start\n///      |      |    |          | |   `----------------- path_start\n///      |      |    |          | `--------------------- port\n///      |      |    |          `----------------------- host_end\n///      |      |    `---------------------------------- host_start\n///      |      `--------------------------------------- username_end\n///      `---------------------------------------------- scheme_end\n#[derive(Copy, Clone)]\n#[cfg(feature = \"expose_internals\")]\npub struct InternalComponents {\n    pub scheme_end: u32,\n    pub username_end: u32,\n    pub host_start: u32,\n    pub host_end: u32,\n    pub port: Option<u16>,\n    pub path_start: u32,\n    pub query_start: Option<u32>,\n    pub fragment_start: Option<u32>,\n}\n\n/// Internal component / parsed offsets of the URL.\n///\n/// This can be useful for implementing efficient serialization\n/// for the URL.\n#[cfg(feature = \"expose_internals\")]\npub fn internal_components(url: &Url) -> InternalComponents {\n    InternalComponents {\n        scheme_end: url.scheme_end,\n        username_end: url.username_end,\n        host_start: url.host_start,\n        host_end: url.host_end,\n        port: url.port,\n        path_start: url.path_start,\n        query_start: url.query_start,\n        fragment_start: url.fragment_start,\n    }\n}\n\n/// https://url.spec.whatwg.org/#dom-url-domaintoascii\npub fn domain_to_ascii(domain: &str) -> String {\n    match Host::parse(domain) {\n        Ok(Host::Domain(domain)) => domain,\n        _ => String::new(),\n    }\n}\n\n/// https://url.spec.whatwg.org/#dom-url-domaintounicode\npub fn domain_to_unicode(domain: &str) -> String {\n    match Host::parse(domain) {\n        Ok(Host::Domain(ref domain)) => {\n            let (unicode, _errors) = idna::domain_to_unicode(domain);\n            unicode\n        }\n        _ => String::new(),\n    }\n}\n\n/// Getter for https://url.spec.whatwg.org/#dom-url-href\npub fn href(url: &Url) -> &str {\n    url.as_str()\n}\n\n/// Setter for https://url.spec.whatwg.org/#dom-url-href\npub fn set_href(url: &mut Url, value: &str) -> Result<(), ParseError> {\n    *url = Url::parse(value)?;\n    Ok(())\n}\n\n/// Getter for https://url.spec.whatwg.org/#dom-url-origin\npub fn origin(url: &Url) -> String {\n    url.origin().ascii_serialization()\n}\n\n/// Getter for https://url.spec.whatwg.org/#dom-url-protocol\n#[inline]\npub fn protocol(url: &Url) -> &str {\n    &url.as_str()[..url.scheme().len() + \":\".len()]\n}\n\n/// Setter for https://url.spec.whatwg.org/#dom-url-protocol\n#[allow(clippy::result_unit_err)]\npub fn set_protocol(url: &mut Url, mut new_protocol: &str) -> Result<(), ()> {\n    // The scheme state in the spec ignores everything after the first `:`,\n    // but `set_scheme` errors if there is more.\n    if let Some(position) = new_protocol.find(':') {\n        new_protocol = &new_protocol[..position];\n    }\n    url.set_scheme(new_protocol)\n}\n\n/// Getter for https://url.spec.whatwg.org/#dom-url-username\n#[inline]\npub fn username(url: &Url) -> &str {\n    url.username()\n}\n\n/// Setter for https://url.spec.whatwg.org/#dom-url-username\n#[allow(clippy::result_unit_err)]\npub fn set_username(url: &mut Url, new_username: &str) -> Result<(), ()> {\n    url.set_username(new_username)\n}\n\n/// Getter for https://url.spec.whatwg.org/#dom-url-password\n#[inline]\npub fn password(url: &Url) -> &str {\n    url.password().unwrap_or(\"\")\n}\n\n/// Setter for https://url.spec.whatwg.org/#dom-url-password\n#[allow(clippy::result_unit_err)]\npub fn set_password(url: &mut Url, new_password: &str) -> Result<(), ()> {\n    url.set_password(if new_password.is_empty() {\n        None\n    } else {\n        Some(new_password)\n    })\n}\n\n/// Getter for https://url.spec.whatwg.org/#dom-url-host\n#[inline]\npub fn host(url: &Url) -> &str {\n    &url[Position::BeforeHost..Position::AfterPort]\n}\n\n/// Setter for https://url.spec.whatwg.org/#dom-url-host\n#[allow(clippy::result_unit_err)]\npub fn set_host(url: &mut Url, new_host: &str) -> Result<(), ()> {\n    // If context object’s url’s cannot-be-a-base-URL flag is set, then return.\n    if url.cannot_be_a_base() {\n        return Err(());\n    }\n    // Host parsing rules are strict,\n    // We don't want to trim the input\n    let input = Input::new_no_trim(new_host);\n    let host;\n    let opt_port;\n    {\n        let scheme = url.scheme();\n        let scheme_type = SchemeType::from(scheme);\n        if scheme_type == SchemeType::File && new_host.is_empty() {\n            url.set_host_internal(Host::Domain(String::new()), None);\n            return Ok(());\n        }\n\n        if let Ok((h, remaining)) = Parser::parse_host(input, scheme_type) {\n            host = h;\n            opt_port = if let Some(remaining) = remaining.split_prefix(':') {\n                if remaining.is_empty() {\n                    None\n                } else {\n                    Parser::parse_port(remaining, || default_port(scheme), Context::Setter)\n                        .ok()\n                        .map(|(port, _remaining)| port)\n                }\n            } else {\n                None\n            };\n        } else {\n            return Err(());\n        }\n    }\n    // Make sure we won't set an empty host to a url with a username or a port\n    if host == Host::Domain(\"\".to_string())\n        && (!username(url).is_empty() || matches!(opt_port, Some(Some(_))) || url.port().is_some())\n    {\n        return Err(());\n    }\n    url.set_host_internal(host, opt_port);\n    Ok(())\n}\n\n/// Getter for https://url.spec.whatwg.org/#dom-url-hostname\n#[inline]\npub fn hostname(url: &Url) -> &str {\n    url.host_str().unwrap_or(\"\")\n}\n\n/// Setter for https://url.spec.whatwg.org/#dom-url-hostname\n#[allow(clippy::result_unit_err)]\npub fn set_hostname(url: &mut Url, new_hostname: &str) -> Result<(), ()> {\n    if url.cannot_be_a_base() {\n        return Err(());\n    }\n    // Host parsing rules are strict we don't want to trim the input\n    let input = Input::new_no_trim(new_hostname);\n    let scheme_type = SchemeType::from(url.scheme());\n    if scheme_type == SchemeType::File && new_hostname.is_empty() {\n        url.set_host_internal(Host::Domain(String::new()), None);\n        return Ok(());\n    }\n\n    if let Ok((host, _remaining)) = Parser::parse_host(input, scheme_type) {\n        if let Host::Domain(h) = &host {\n            if h.is_empty() {\n                // Empty host on special not file url\n                if SchemeType::from(url.scheme()) == SchemeType::SpecialNotFile\n                    // Port with an empty host\n                    ||!port(url).is_empty()\n                    // Empty host that includes credentials\n                    || !url.username().is_empty()\n                    || !url.password().unwrap_or(\"\").is_empty()\n                {\n                    return Err(());\n                }\n            }\n        }\n        url.set_host_internal(host, None);\n        Ok(())\n    } else {\n        Err(())\n    }\n}\n\n/// Getter for https://url.spec.whatwg.org/#dom-url-port\n#[inline]\npub fn port(url: &Url) -> &str {\n    &url[Position::BeforePort..Position::AfterPort]\n}\n\n/// Setter for https://url.spec.whatwg.org/#dom-url-port\n#[allow(clippy::result_unit_err)]\npub fn set_port(url: &mut Url, new_port: &str) -> Result<(), ()> {\n    let result;\n    {\n        // has_host implies !cannot_be_a_base\n        let scheme = url.scheme();\n        if !url.has_host() || url.host() == Some(Host::Domain(\"\")) || scheme == \"file\" {\n            return Err(());\n        }\n        result = Parser::parse_port(\n            Input::new_no_trim(new_port),\n            || default_port(scheme),\n            Context::Setter,\n        )\n    }\n    if let Ok((new_port, _remaining)) = result {\n        url.set_port_internal(new_port);\n        Ok(())\n    } else {\n        Err(())\n    }\n}\n\n/// Getter for https://url.spec.whatwg.org/#dom-url-pathname\n#[inline]\npub fn pathname(url: &Url) -> &str {\n    url.path()\n}\n\n/// Setter for https://url.spec.whatwg.org/#dom-url-pathname\npub fn set_pathname(url: &mut Url, new_pathname: &str) {\n    if url.cannot_be_a_base() {\n        return;\n    }\n    if new_pathname.starts_with('/')\n        || (SchemeType::from(url.scheme()).is_special()\n            // \\ is a segment delimiter for 'special' URLs\"\n            && new_pathname.starts_with('\\\\'))\n    {\n        url.set_path(new_pathname)\n    } else {\n        let mut path_to_set = String::from(\"/\");\n        path_to_set.push_str(new_pathname);\n        url.set_path(&path_to_set)\n    }\n}\n\n/// Getter for https://url.spec.whatwg.org/#dom-url-search\npub fn search(url: &Url) -> &str {\n    trim(&url[Position::AfterPath..Position::AfterQuery])\n}\n\n/// Setter for https://url.spec.whatwg.org/#dom-url-search\npub fn set_search(url: &mut Url, new_search: &str) {\n    url.set_query(match new_search {\n        \"\" => None,\n        _ if new_search.starts_with('?') => Some(&new_search[1..]),\n        _ => Some(new_search),\n    })\n}\n\n/// Getter for https://url.spec.whatwg.org/#dom-url-hash\npub fn hash(url: &Url) -> &str {\n    trim(&url[Position::AfterQuery..])\n}\n\n/// Setter for https://url.spec.whatwg.org/#dom-url-hash\npub fn set_hash(url: &mut Url, new_hash: &str) {\n    url.set_fragment(match new_hash {\n        // If the given value is the empty string,\n        // then set context object’s url’s fragment to null and return.\n        \"\" => None,\n        // Let input be the given value with a single leading U+0023 (#) removed, if any.\n        _ if new_hash.starts_with('#') => Some(&new_hash[1..]),\n        _ => Some(new_hash),\n    })\n}\n\nfn trim(s: &str) -> &str {\n    if s.len() == 1 {\n        \"\"\n    } else {\n        s\n    }\n}\n"
    },
    "url/src/slicing.rs": {
      "language": "rust",
      "mutants": [
        {
          "id": "url/src/slicing.rs:145:48:145:49:BinaryOperator:*",
          "duration": 2.484458739,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 145,
              "column": 48
            },
            "end": {
              "line": 145,
              "column": 49
            }
          },
          "replacement": "*",
          "status": "Killed",
          "description": "Replace BinaryOperator by *",
          "statusReason": "thread 'test_slicing' panicked at url/tests/unit.rs:1073:9:\nassertion `left == right` failed\n  left: \":pass\"\n right: \"pass\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_slicing"
          ]
        },
        {
          "id": "url/src/slicing.rs:15:9:15:28:FnValue:\"xyzzy\"",
          "duration": 1.9809188570000003,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 15,
              "column": 9
            },
            "end": {
              "line": 15,
              "column": 28
            }
          },
          "replacement": "\"xyzzy\"",
          "status": "Killed",
          "description": "Replace FnValue by \"xyzzy\"",
          "statusReason": "thread 'test_slicing' panicked at url/tests/unit.rs:1067:9:\nassertion `left == right` failed\n  left: \"xyzzy\"\n right: \"https://user:pass@domain.com:9742/path/file.ext?key=val&key2=val2#fragment\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_slicing"
          ]
        },
        {
          "id": "url/src/slicing.rs:178:56:178:57:BinaryOperator:-",
          "duration": 1.827222022,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 178,
              "column": 56
            },
            "end": {
              "line": 178,
              "column": 57
            }
          },
          "replacement": "-",
          "status": "Killed",
          "description": "Replace BinaryOperator by -",
          "statusReason": "thread 'test_slicing' panicked at url/tests/unit.rs:1078:24:\nbegin <= end (29 <= 25) when slicing `https://user:pass@domain.com:9742/path/file.ext?key=val&key2=val2#fragment`\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_slicing"
          ]
        },
        {
          "id": "url/src/slicing.rs:209:32:209:33:BinaryOperator:-",
          "duration": 2.676937816,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 209,
              "column": 32
            },
            "end": {
              "line": 209,
              "column": 33
            }
          },
          "replacement": "-",
          "status": "Killed",
          "description": "Replace BinaryOperator by -",
          "statusReason": "thread 'test_slicing' panicked at url/tests/unit.rs:1081:9:\nassertion `left == right` failed\n  left: \"2#fragment\"\n right: \"fragment\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_slicing"
          ]
        },
        {
          "id": "url/src/slicing.rs:22:9:22:55:FnValue:\"xyzzy\"",
          "duration": 4.337946316,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 22,
              "column": 9
            },
            "end": {
              "line": 22,
              "column": 55
            }
          },
          "replacement": "\"xyzzy\"",
          "status": "Killed",
          "description": "Replace FnValue by \"xyzzy\"",
          "statusReason": "Test executable failed (exit status: 101).\n\nstderr:\nthread 'main' panicked at url/src/lib.rs:23:1:\nassertion failed: &issue_list_url[Position::BeforePath..] ==\n    \"/rust-lang/rust/issues?labels=E-easy&state=open\"\nstack backtrace:\n   0:     0x55adc0517156 - std::backtrace_rs::backtrace::libunwind::trace::h5aa1f3f50fd6005d\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/../../backtrace/src/backtrace/libunwind.rs:104:5\n   1:     0x55adc0517156 - std::backtrace_rs::backtrace::trace_unsynchronized::h39f759d0ceaa839b\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/../../backtrace/src/backtrace/mod.rs:66:5\n   2:     0x55adc0517156 - std::sys_common::backtrace::_print_fmt::hfd4aa038a1413f7f\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:68:5\n   3:     0x55adc0517156 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::ha47fba1de44cec55\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:44:22\n   4:     0x55adc0534a6c - core::fmt::rt::Argument::fmt::h375396e1292b08cb\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/fmt/rt.rs:142:9\n   5:     0x55adc0534a6c - core::fmt::write::h93e0b545aa9eb320\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/fmt/mod.rs:1120:17\n   6:     0x55adc051536f - std::io::Write::write_fmt::h97fad0674ecdf154\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/io/mod.rs:1854:15\n   7:     0x55adc0516f04 - std::sys_common::backtrace::_print::hb7626a1b4ea382df\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:47:5\n   8:     0x55adc0516f04 - std::sys_common::backtrace::print::h89f2abc5b98b82a2\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:34:9\n   9:     0x55adc05183fb - std::panicking::default_hook::{{closure}}::h73fe684137831048\n  10:     0x55adc0518149 - std::panicking::default_hook::h8dfe6e62b35915a0\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:292:9\n  11:     0x55adc051889d - std::panicking::rust_panic_with_hook::hc33e259baf535986\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:781:13\n  12:     0x55adc0518739 - std::panicking::begin_panic_handler::{{closure}}::hcfbf8e29c9418131\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:651:13\n  13:     0x55adc0517636 - std::sys_common::backtrace::__rust_end_short_backtrace::h99b80dfa4797f5b6\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:171:18\n  14:     0x55adc05184a4 - rust_begin_unwind\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:647:5\n  15:     0x55adc04b2cf5 - core::panicking::panic_fmt::h96700527d99a56a9\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/panicking.rs:72:14\n  16:     0x55adc04b2db3 - core::panicking::panic::h7546f881b5ccb4b7\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/panicking.rs:144:5\n  17:     0x55adc04b49ef - rust_out::main::_doctest_main_url_src_lib_rs_26_0::run::h038026c25667376f\n  18:     0x55adc04b41a9 - rust_out::main::_doctest_main_url_src_lib_rs_26_0::h2f2358d8eff8ca83\n  19:     0x55adc04b4196 - rust_out::main::h11d1a6ed4289a3df\n  20:     0x55adc04b3663 - core::ops::function::FnOnce::call_once::h903f19ac3af5d648\n  21:     0x55adc04b34e6 - std::sys_common::backtrace::__rust_begin_short_backtrace::ha11011b11b4aaa1f\n  22:     0x55adc04b3539 - std::rt::lang_start::{{closure}}::h196360a935ed97d8\n  23:     0x55adc0513673 - core::ops::function::impls::<impl core::ops::function::FnOnce<A> for &F>::call_once::hb12a069c52b9e638\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/ops/function.rs:284:13\n  24:     0x55adc0513673 - std::panicking::try::do_call::h34ba557680a1662c\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:554:40\n  25:     0x55adc0513673 - std::panicking::try::hb88778117e3deeb6\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:518:19\n  26:     0x55adc0513673 - std::panic::catch_unwind::hbd3c1fafc0d9693e\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panic.rs:142:14\n  27:     0x55adc0513673 - std::rt::lang_start_internal::{{closure}}::h0b81b8de0028b6f3\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/rt.rs:148:48\n  28:     0x55adc0513673 - std::panicking::try::do_call::hbbb521b5391ac872\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:554:40\n  29:     0x55adc0513673 - std::panicking::try::hf108a0b7deb842f7\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:518:19\n  30:     0x55adc0513673 - std::panic::catch_unwind::h6451f9c53324fd81\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panic.rs:142:14\n  31:     0x55adc0513673 - std::rt::lang_start_internal::hc6ad905f9af5ea03\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/rt.rs:148:20\n  32:     0x55adc04b3517 - std::rt::lang_start::h4d1167809e102347\n  33:     0x55adc04b4b25 - main\n  34:     0x7f2b99462cd0 - <unknown>\n  35:     0x7f2b99462d8a - __libc_start_main\n  36:     0x55adc04b3405 - _start\n  37:                0x0 - <unknown>\n\n",
          "killedBy": [
            "url/src/lib.rs - (line 26)"
          ]
        },
        {
          "id": "url/src/slicing.rs:195:32:195:33:BinaryOperator:*",
          "duration": 1.4583345620000001,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 195,
              "column": 32
            },
            "end": {
              "line": 195,
              "column": 33
            }
          },
          "replacement": "*",
          "status": "Killed",
          "description": "Replace BinaryOperator by *",
          "statusReason": "thread 'test_slicing' panicked at url/tests/unit.rs:1080:9:\nassertion `left == right` failed\n  left: \"?key=val&key2=val2\"\n right: \"key=val&key2=val2\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_slicing"
          ]
        },
        {
          "id": "url/src/slicing.rs:145:48:145:49:BinaryOperator:-",
          "duration": 1.962910955,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 145,
              "column": 48
            },
            "end": {
              "line": 145,
              "column": 49
            }
          },
          "replacement": "-",
          "status": "Killed",
          "description": "Replace BinaryOperator by -",
          "statusReason": "thread 'test_slicing' panicked at url/tests/unit.rs:1073:9:\nassertion `left == right` failed\n  left: \"r:pass\"\n right: \"pass\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_slicing"
          ]
        },
        {
          "id": "url/src/slicing.rs:29:9:29:53:FnValue:\"\"",
          "duration": 1.873757661,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 29,
              "column": 9
            },
            "end": {
              "line": 29,
              "column": 53
            }
          },
          "replacement": "\"\"",
          "status": "Killed",
          "description": "Replace FnValue by \"\"",
          "statusReason": "thread 'test_slicing' panicked at url/tests/unit.rs:1085:9:\nassertion `left == right` failed\n  left: \"\"\n right: \"https://user:pass@domain.com:9742/path/file.ext?key=val&key2=val2#fragment\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_slicing"
          ]
        },
        {
          "id": "url/src/slicing.rs:178:56:178:57:BinaryOperator:*",
          "duration": 1.842533394,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 178,
              "column": 56
            },
            "end": {
              "line": 178,
              "column": 57
            }
          },
          "replacement": "*",
          "status": "Killed",
          "description": "Replace BinaryOperator by *",
          "statusReason": "thread 'test_slicing' panicked at url/tests/unit.rs:1078:9:\nassertion `left == right` failed\n  left: \"974\"\n right: \"9742\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_slicing"
          ]
        },
        {
          "id": "url/src/slicing.rs:137:46:137:47:BinaryOperator:-",
          "duration": 2.187754346,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 137,
              "column": 46
            },
            "end": {
              "line": 137,
              "column": 47
            }
          },
          "replacement": "-",
          "status": "Killed",
          "description": "Replace BinaryOperator by -",
          "statusReason": "thread 'test_slicing' panicked at url/tests/unit.rs:1069:9:\nassertion `left == right` failed\n  left: \"b:\"\n right: \"\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_slicing"
          ]
        },
        {
          "id": "url/src/slicing.rs:36:9:36:76:FnValue:\"\"",
          "duration": 0.6554233420000001,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 36,
              "column": 9
            },
            "end": {
              "line": 36,
              "column": 76
            }
          },
          "replacement": "\"\"",
          "status": "Killed",
          "description": "Replace FnValue by \"\"",
          "statusReason": "thread 'test_slicing' panicked at url/tests/unit.rs:1068:9:\nassertion `left == right` failed\n  left: \"\"\n right: \"https\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_slicing"
          ]
        },
        {
          "id": "url/src/slicing.rs:169:44:169:45:BinaryOperator:*",
          "duration": 1.569640473,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 169,
              "column": 44
            },
            "end": {
              "line": 169,
              "column": 45
            }
          },
          "replacement": "*",
          "status": "Killed",
          "description": "Replace BinaryOperator by *",
          "statusReason": "thread 'test_slicing' panicked at url/tests/unit.rs:1078:9:\nassertion `left == right` failed\n  left: \":9742\"\n right: \"9742\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_slicing"
          ]
        },
        {
          "id": "url/src/slicing.rs:153:76:153:78:BinaryOperator:!=",
          "duration": 1.319682783,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 153,
              "column": 76
            },
            "end": {
              "line": 153,
              "column": 78
            }
          },
          "replacement": "!=",
          "status": "Killed",
          "description": "Replace BinaryOperator by !=",
          "statusReason": "thread 'test_slicing' panicked at url/src/slicing.rs:157:21:\nassertion failed: self.username_end == self.host_start\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_slicing"
          ]
        },
        {
          "id": "url/src/slicing.rs:153:41:153:43:BinaryOperator:||",
          "duration": 1.3239905730000001,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 153,
              "column": 41
            },
            "end": {
              "line": 153,
              "column": 43
            }
          },
          "replacement": "||",
          "status": "Killed",
          "description": "Replace BinaryOperator by ||",
          "statusReason": "thread 'test_slicing' panicked at url/src/slicing.rs:154:21:\nassertion failed: self.byte_at(self.host_start - \"@\".len() as u32) == b'@'\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_slicing"
          ]
        },
        {
          "id": "url/src/slicing.rs:133:46:133:47:BinaryOperator:-",
          "duration": 1.568889561,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 133,
              "column": 46
            },
            "end": {
              "line": 133,
              "column": 47
            }
          },
          "replacement": "-",
          "status": "Killed",
          "description": "Replace BinaryOperator by -",
          "statusReason": "thread 'test_slicing' panicked at url/tests/unit.rs:1069:9:\nassertion `left == right` failed\n  left: \"tps://user\"\n right: \"user\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_slicing"
          ]
        },
        {
          "id": "url/src/slicing.rs:155:46:155:47:BinaryOperator:+",
          "duration": 1.6394188660000002,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 155,
              "column": 46
            },
            "end": {
              "line": 155,
              "column": 47
            }
          },
          "replacement": "+",
          "status": "Killed",
          "description": "Replace BinaryOperator by +",
          "statusReason": "thread 'test_slicing' panicked at url/tests/unit.rs:1073:9:\nassertion `left == right` failed\n  left: \"pass@d\"\n right: \"pass\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_slicing"
          ]
        },
        {
          "id": "url/src/slicing.rs:195:32:195:33:BinaryOperator:-",
          "duration": 1.826550123,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 195,
              "column": 32
            },
            "end": {
              "line": 195,
              "column": 33
            }
          },
          "replacement": "-",
          "status": "Killed",
          "description": "Replace BinaryOperator by -",
          "statusReason": "thread 'test_slicing' panicked at url/tests/unit.rs:1080:9:\nassertion `left == right` failed\n  left: \"t?key=val&key2=val2\"\n right: \"key=val&key2=val2\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_slicing"
          ]
        },
        {
          "id": "url/src/slicing.rs:137:46:137:47:BinaryOperator:*",
          "duration": 1.918224146,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 137,
              "column": 46
            },
            "end": {
              "line": 137,
              "column": 47
            }
          },
          "replacement": "*",
          "status": "Killed",
          "description": "Replace BinaryOperator by *",
          "statusReason": "thread 'test_slicing' panicked at url/tests/unit.rs:1069:9:\nassertion `left == right` failed\n  left: \":\"\n right: \"\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_slicing"
          ]
        },
        {
          "id": "url/src/slicing.rs:144:41:144:43:BinaryOperator:||",
          "duration": 2.069128265,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 144,
              "column": 41
            },
            "end": {
              "line": 144,
              "column": 43
            }
          },
          "replacement": "||",
          "status": "Killed",
          "description": "Replace BinaryOperator by ||",
          "statusReason": "thread 'test_slicing' panicked at url/tests/unit.rs:1074:17:\nbegin <= end (9 <= 8) when slicing `https://domain.com:9742/path/file.ext#fragment`\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_slicing"
          ]
        },
        {
          "id": "url/src/slicing.rs:15:9:15:28:FnValue:\"\"",
          "duration": 1.966325079,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 15,
              "column": 9
            },
            "end": {
              "line": 15,
              "column": 28
            }
          },
          "replacement": "\"\"",
          "status": "Killed",
          "description": "Replace FnValue by \"\"",
          "statusReason": "thread 'test_slicing' panicked at url/tests/unit.rs:1067:9:\nassertion `left == right` failed\n  left: \"\"\n right: \"https://user:pass@domain.com:9742/path/file.ext?key=val&key2=val2#fragment\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_slicing"
          ]
        },
        {
          "id": "url/src/slicing.rs:126:9:215:10:FnValue:1",
          "duration": 2.035159198,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 126,
              "column": 9
            },
            "end": {
              "line": 215,
              "column": 10
            }
          },
          "replacement": "1",
          "status": "Killed",
          "description": "Replace FnValue by 1",
          "statusReason": "thread 'test_slicing' panicked at url/tests/unit.rs:1068:9:\nassertion `left == right` failed\n  left: \"\"\n right: \"https\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_slicing"
          ]
        },
        {
          "id": "url/src/slicing.rs:209:32:209:33:BinaryOperator:*",
          "duration": 2.3246316609999997,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 209,
              "column": 32
            },
            "end": {
              "line": 209,
              "column": 33
            }
          },
          "replacement": "*",
          "status": "Killed",
          "description": "Replace BinaryOperator by *",
          "statusReason": "thread 'test_slicing' panicked at url/tests/unit.rs:1081:9:\nassertion `left == right` failed\n  left: \"#fragment\"\n right: \"fragment\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_slicing"
          ]
        },
        {
          "id": "url/src/slicing.rs:42:5:48:6:FnValue:0",
          "duration": 1.8121978820000002,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 42,
              "column": 5
            },
            "end": {
              "line": 48,
              "column": 6
            }
          },
          "replacement": "0",
          "status": "Killed",
          "description": "Replace FnValue by 0",
          "statusReason": "thread 'slicing::test_count_digits' panicked at url/src/slicing.rs:47:5:\nassertion `left == right` failed\n  left: 0\n right: 1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "slicing::test_count_digits"
          ]
        },
        {
          "id": "url/src/slicing.rs:133:46:133:47:BinaryOperator:*",
          "duration": 2.985329496,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 133,
              "column": 46
            },
            "end": {
              "line": 133,
              "column": 47
            }
          },
          "replacement": "*",
          "status": "Killed",
          "description": "Replace BinaryOperator by *",
          "statusReason": "thread 'test_slicing' panicked at url/tests/unit.rs:1070:17:\nbegin <= end (15 <= 12) when slicing `https://user:pass@domain.com:9742/path/file.ext?key=val&key2=val2#fragment`\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_slicing"
          ]
        },
        {
          "id": "url/src/slicing.rs:144:76:144:78:BinaryOperator:!=",
          "duration": 3.252216869,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 144,
              "column": 76
            },
            "end": {
              "line": 144,
              "column": 78
            }
          },
          "replacement": "!=",
          "status": "Killed",
          "description": "Replace BinaryOperator by !=",
          "statusReason": "thread 'test_slicing' panicked at url/src/slicing.rs:147:21:\nassertion failed: self.username_end == self.host_start\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_slicing"
          ]
        },
        {
          "id": "url/src/slicing.rs:36:9:36:76:FnValue:\"xyzzy\"",
          "duration": 0.8106712859999999,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 36,
              "column": 9
            },
            "end": {
              "line": 36,
              "column": 76
            }
          },
          "replacement": "\"xyzzy\"",
          "status": "Killed",
          "description": "Replace FnValue by \"xyzzy\"",
          "statusReason": "thread 'no_panic' panicked at url/tests/unit.rs:990:79:\ncalled `Result::unwrap()` on an `Err` value: ()\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "no_panic",
            "test_slicing",
            "test_set_empty_hostname"
          ]
        },
        {
          "id": "url/src/slicing.rs:169:44:169:45:BinaryOperator:-",
          "duration": 1.9309222680000002,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 169,
              "column": 44
            },
            "end": {
              "line": 169,
              "column": 45
            }
          },
          "replacement": "-",
          "status": "Killed",
          "description": "Replace BinaryOperator by -",
          "statusReason": "thread 'test_slicing' panicked at url/tests/unit.rs:1078:9:\nassertion `left == right` failed\n  left: \"m:9742\"\n right: \"9742\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_slicing"
          ]
        },
        {
          "id": "url/src/slicing.rs:178:44:178:45:BinaryOperator:-",
          "duration": 1.542613364,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 178,
              "column": 44
            },
            "end": {
              "line": 178,
              "column": 45
            }
          },
          "replacement": "-",
          "status": "Killed",
          "description": "Replace BinaryOperator by -",
          "statusReason": "thread 'test_slicing' panicked at url/tests/unit.rs:1078:9:\nassertion `left == right` failed\n  left: \"97\"\n right: \"9742\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_slicing"
          ]
        },
        {
          "id": "url/src/slicing.rs:155:46:155:47:BinaryOperator:/",
          "duration": 1.561979245,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 155,
              "column": 46
            },
            "end": {
              "line": 155,
              "column": 47
            }
          },
          "replacement": "/",
          "status": "Killed",
          "description": "Replace BinaryOperator by /",
          "statusReason": "thread 'test_slicing' panicked at url/tests/unit.rs:1073:9:\nassertion `left == right` failed\n  left: \"pass@\"\n right: \"pass\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_slicing"
          ]
        },
        {
          "id": "url/src/slicing.rs:29:9:29:53:FnValue:\"xyzzy\"",
          "duration": 1.574037334,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 29,
              "column": 9
            },
            "end": {
              "line": 29,
              "column": 53
            }
          },
          "replacement": "\"xyzzy\"",
          "status": "Killed",
          "description": "Replace FnValue by \"xyzzy\"",
          "statusReason": "thread 'test_slicing' panicked at url/tests/unit.rs:1085:9:\nassertion `left == right` failed\n  left: \"xyzzy\"\n right: \"https://user:pass@domain.com:9742/path/file.ext?key=val&key2=val2#fragment\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_slicing"
          ]
        },
        {
          "id": "url/src/slicing.rs:178:44:178:45:BinaryOperator:*",
          "duration": 1.824625304,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 178,
              "column": 44
            },
            "end": {
              "line": 178,
              "column": 45
            }
          },
          "replacement": "*",
          "status": "Killed",
          "description": "Replace BinaryOperator by *",
          "statusReason": "thread 'test_slicing' panicked at url/tests/unit.rs:1078:9:\nassertion `left == right` failed\n  left: \"974\"\n right: \"9742\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_slicing"
          ]
        },
        {
          "id": "url/src/slicing.rs:42:5:48:6:FnValue:1",
          "duration": 1.66791412,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 42,
              "column": 5
            },
            "end": {
              "line": 48,
              "column": 6
            }
          },
          "replacement": "1",
          "status": "Killed",
          "description": "Replace FnValue by 1",
          "statusReason": "thread 'slicing::test_count_digits' panicked at url/src/slicing.rs:50:5:\nassertion `left == right` failed\n  left: 1\n right: 2\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "slicing::test_count_digits"
          ]
        },
        {
          "id": "url/src/slicing.rs:22:9:22:55:FnValue:\"\"",
          "duration": 4.0738778,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 22,
              "column": 9
            },
            "end": {
              "line": 22,
              "column": 55
            }
          },
          "replacement": "\"\"",
          "status": "Killed",
          "description": "Replace FnValue by \"\"",
          "statusReason": "Test executable failed (exit status: 101).\n\nstderr:\nthread 'main' panicked at url/src/lib.rs:23:1:\nassertion failed: &issue_list_url[Position::BeforePath..] ==\n    \"/rust-lang/rust/issues?labels=E-easy&state=open\"\nstack backtrace:\n   0:     0x55988a1c2156 - std::backtrace_rs::backtrace::libunwind::trace::h5aa1f3f50fd6005d\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/../../backtrace/src/backtrace/libunwind.rs:104:5\n   1:     0x55988a1c2156 - std::backtrace_rs::backtrace::trace_unsynchronized::h39f759d0ceaa839b\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/../../backtrace/src/backtrace/mod.rs:66:5\n   2:     0x55988a1c2156 - std::sys_common::backtrace::_print_fmt::hfd4aa038a1413f7f\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:68:5\n   3:     0x55988a1c2156 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::ha47fba1de44cec55\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:44:22\n   4:     0x55988a1dfa6c - core::fmt::rt::Argument::fmt::h375396e1292b08cb\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/fmt/rt.rs:142:9\n   5:     0x55988a1dfa6c - core::fmt::write::h93e0b545aa9eb320\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/fmt/mod.rs:1120:17\n   6:     0x55988a1c036f - std::io::Write::write_fmt::h97fad0674ecdf154\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/io/mod.rs:1854:15\n   7:     0x55988a1c1f04 - std::sys_common::backtrace::_print::hb7626a1b4ea382df\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:47:5\n   8:     0x55988a1c1f04 - std::sys_common::backtrace::print::h89f2abc5b98b82a2\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:34:9\n   9:     0x55988a1c33fb - std::panicking::default_hook::{{closure}}::h73fe684137831048\n  10:     0x55988a1c3149 - std::panicking::default_hook::h8dfe6e62b35915a0\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:292:9\n  11:     0x55988a1c389d - std::panicking::rust_panic_with_hook::hc33e259baf535986\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:781:13\n  12:     0x55988a1c3739 - std::panicking::begin_panic_handler::{{closure}}::hcfbf8e29c9418131\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:651:13\n  13:     0x55988a1c2636 - std::sys_common::backtrace::__rust_end_short_backtrace::h99b80dfa4797f5b6\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/sys_common/backtrace.rs:171:18\n  14:     0x55988a1c34a4 - rust_begin_unwind\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:647:5\n  15:     0x55988a15dcf5 - core::panicking::panic_fmt::h96700527d99a56a9\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/panicking.rs:72:14\n  16:     0x55988a15ddb3 - core::panicking::panic::h7546f881b5ccb4b7\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/panicking.rs:144:5\n  17:     0x55988a15f9ef - rust_out::main::_doctest_main_url_src_lib_rs_26_0::run::h038026c25667376f\n  18:     0x55988a15f1a9 - rust_out::main::_doctest_main_url_src_lib_rs_26_0::h2f2358d8eff8ca83\n  19:     0x55988a15f196 - rust_out::main::h11d1a6ed4289a3df\n  20:     0x55988a15e663 - core::ops::function::FnOnce::call_once::h903f19ac3af5d648\n  21:     0x55988a15e4e6 - std::sys_common::backtrace::__rust_begin_short_backtrace::ha11011b11b4aaa1f\n  22:     0x55988a15e539 - std::rt::lang_start::{{closure}}::h196360a935ed97d8\n  23:     0x55988a1be673 - core::ops::function::impls::<impl core::ops::function::FnOnce<A> for &F>::call_once::hb12a069c52b9e638\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/core/src/ops/function.rs:284:13\n  24:     0x55988a1be673 - std::panicking::try::do_call::h34ba557680a1662c\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:554:40\n  25:     0x55988a1be673 - std::panicking::try::hb88778117e3deeb6\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:518:19\n  26:     0x55988a1be673 - std::panic::catch_unwind::hbd3c1fafc0d9693e\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panic.rs:142:14\n  27:     0x55988a1be673 - std::rt::lang_start_internal::{{closure}}::h0b81b8de0028b6f3\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/rt.rs:148:48\n  28:     0x55988a1be673 - std::panicking::try::do_call::hbbb521b5391ac872\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:554:40\n  29:     0x55988a1be673 - std::panicking::try::hf108a0b7deb842f7\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panicking.rs:518:19\n  30:     0x55988a1be673 - std::panic::catch_unwind::h6451f9c53324fd81\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/panic.rs:142:14\n  31:     0x55988a1be673 - std::rt::lang_start_internal::hc6ad905f9af5ea03\n                               at /rustc/bccb9bbb418a30aeb332052e721beb6ebc6b1ce7/library/std/src/rt.rs:148:20\n  32:     0x55988a15e517 - std::rt::lang_start::h4d1167809e102347\n  33:     0x55988a15fb25 - main\n  34:     0x7f6daf3b9cd0 - <unknown>\n  35:     0x7f6daf3b9d8a - __libc_start_main\n  36:     0x55988a15e405 - _start\n  37:                0x0 - <unknown>\n\n",
          "killedBy": [
            "url/src/lib.rs - (line 26)"
          ]
        },
        {
          "id": "url/src/slicing.rs:126:9:215:10:FnValue:0",
          "duration": 1.667356585,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 126,
              "column": 9
            },
            "end": {
              "line": 215,
              "column": 10
            }
          },
          "replacement": "0",
          "status": "Killed",
          "description": "Replace FnValue by 0",
          "statusReason": "thread 'test_slicing' panicked at url/tests/unit.rs:1068:9:\nassertion `left == right` failed\n  left: \"\"\n right: \"https\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_slicing"
          ]
        }
      ],
      "source": "// Copyright 2016 The rust-url developers.\n//\n// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n// option. This file may not be copied, modified, or distributed\n// except according to those terms.\n\nuse crate::Url;\nuse std::ops::{Index, Range, RangeFrom, RangeFull, RangeTo};\n\nimpl Index<RangeFull> for Url {\n    type Output = str;\n    fn index(&self, _: RangeFull) -> &str {\n        &self.serialization\n    }\n}\n\nimpl Index<RangeFrom<Position>> for Url {\n    type Output = str;\n    fn index(&self, range: RangeFrom<Position>) -> &str {\n        &self.serialization[self.index(range.start)..]\n    }\n}\n\nimpl Index<RangeTo<Position>> for Url {\n    type Output = str;\n    fn index(&self, range: RangeTo<Position>) -> &str {\n        &self.serialization[..self.index(range.end)]\n    }\n}\n\nimpl Index<Range<Position>> for Url {\n    type Output = str;\n    fn index(&self, range: Range<Position>) -> &str {\n        &self.serialization[self.index(range.start)..self.index(range.end)]\n    }\n}\n\n// Counts how many base-10 digits are required to represent n in the given base\nfn count_digits(n: u16) -> usize {\n    match n {\n        0..=9 => 1,\n        10..=99 => 2,\n        100..=999 => 3,\n        1000..=9999 => 4,\n        10000..=65535 => 5,\n    }\n}\n\n#[test]\nfn test_count_digits() {\n    assert_eq!(count_digits(0), 1);\n    assert_eq!(count_digits(1), 1);\n    assert_eq!(count_digits(9), 1);\n    assert_eq!(count_digits(10), 2);\n    assert_eq!(count_digits(99), 2);\n    assert_eq!(count_digits(100), 3);\n    assert_eq!(count_digits(9999), 4);\n    assert_eq!(count_digits(65535), 5);\n}\n\n/// Indicates a position within a URL based on its components.\n///\n/// A range of positions can be used for slicing `Url`:\n///\n/// ```rust\n/// # use url::{Url, Position};\n/// # fn something(some_url: Url) {\n/// let serialization: &str = &some_url[..];\n/// let serialization_without_fragment: &str = &some_url[..Position::AfterQuery];\n/// let authority: &str = &some_url[Position::BeforeUsername..Position::AfterPort];\n/// let data_url_payload: &str = &some_url[Position::BeforePath..Position::AfterQuery];\n/// let scheme_relative: &str = &some_url[Position::BeforeUsername..];\n/// # }\n/// ```\n///\n/// In a pseudo-grammar (where `[`…`]?` makes a sub-sequence optional),\n/// URL components and delimiters that separate them are:\n///\n/// ```notrust\n/// url =\n///     scheme \":\"\n///     [ \"//\" [ username [ \":\" password ]? \"@\" ]? host [ \":\" port ]? ]?\n///     path [ \"?\" query ]? [ \"#\" fragment ]?\n/// ```\n///\n/// When a given component is not present,\n/// its \"before\" and \"after\" position are the same\n/// (so that `&some_url[BeforeFoo..AfterFoo]` is the empty string)\n/// and component ordering is preserved\n/// (so that a missing query \"is between\" a path and a fragment).\n///\n/// The end of a component and the start of the next are either the same or separate\n/// by a delimiter.\n/// (Note that the initial `/` of a path is considered part of the path here, not a delimiter.)\n/// For example, `&url[..BeforeFragment]` would include a `#` delimiter (if present in `url`),\n/// so `&url[..AfterQuery]` might be desired instead.\n///\n/// `BeforeScheme` and `AfterFragment` are always the start and end of the entire URL,\n/// so `&url[BeforeScheme..X]` is the same as `&url[..X]`\n/// and `&url[X..AfterFragment]` is the same as `&url[X..]`.\n#[derive(Copy, Clone, Debug)]\npub enum Position {\n    BeforeScheme,\n    AfterScheme,\n    BeforeUsername,\n    AfterUsername,\n    BeforePassword,\n    AfterPassword,\n    BeforeHost,\n    AfterHost,\n    BeforePort,\n    AfterPort,\n    BeforePath,\n    AfterPath,\n    BeforeQuery,\n    AfterQuery,\n    BeforeFragment,\n    AfterFragment,\n}\n\nimpl Url {\n    #[inline]\n    fn index(&self, position: Position) -> usize {\n        match position {\n            Position::BeforeScheme => 0,\n\n            Position::AfterScheme => self.scheme_end as usize,\n\n            Position::BeforeUsername => {\n                if self.has_authority() {\n                    self.scheme_end as usize + \"://\".len()\n                } else {\n                    debug_assert!(self.byte_at(self.scheme_end) == b':');\n                    debug_assert!(self.scheme_end + \":\".len() as u32 == self.username_end);\n                    self.scheme_end as usize + \":\".len()\n                }\n            }\n\n            Position::AfterUsername => self.username_end as usize,\n\n            Position::BeforePassword => {\n                if self.has_authority() && self.byte_at(self.username_end) == b':' {\n                    self.username_end as usize + \":\".len()\n                } else {\n                    debug_assert!(self.username_end == self.host_start);\n                    self.username_end as usize\n                }\n            }\n\n            Position::AfterPassword => {\n                if self.has_authority() && self.byte_at(self.username_end) == b':' {\n                    debug_assert!(self.byte_at(self.host_start - \"@\".len() as u32) == b'@');\n                    self.host_start as usize - \"@\".len()\n                } else {\n                    debug_assert!(self.username_end == self.host_start);\n                    self.host_start as usize\n                }\n            }\n\n            Position::BeforeHost => self.host_start as usize,\n\n            Position::AfterHost => self.host_end as usize,\n\n            Position::BeforePort => {\n                if self.port.is_some() {\n                    debug_assert!(self.byte_at(self.host_end) == b':');\n                    self.host_end as usize + \":\".len()\n                } else {\n                    self.host_end as usize\n                }\n            }\n\n            Position::AfterPort => {\n                if let Some(port) = self.port {\n                    debug_assert!(self.byte_at(self.host_end) == b':');\n                    self.host_end as usize + \":\".len() + count_digits(port)\n                } else {\n                    self.host_end as usize\n                }\n            }\n\n            Position::BeforePath => self.path_start as usize,\n\n            Position::AfterPath => match (self.query_start, self.fragment_start) {\n                (Some(q), _) => q as usize,\n                (None, Some(f)) => f as usize,\n                (None, None) => self.serialization.len(),\n            },\n\n            Position::BeforeQuery => match (self.query_start, self.fragment_start) {\n                (Some(q), _) => {\n                    debug_assert!(self.byte_at(q) == b'?');\n                    q as usize + \"?\".len()\n                }\n                (None, Some(f)) => f as usize,\n                (None, None) => self.serialization.len(),\n            },\n\n            Position::AfterQuery => match self.fragment_start {\n                None => self.serialization.len(),\n                Some(f) => f as usize,\n            },\n\n            Position::BeforeFragment => match self.fragment_start {\n                Some(f) => {\n                    debug_assert!(self.byte_at(f) == b'#');\n                    f as usize + \"#\".len()\n                }\n                None => self.serialization.len(),\n            },\n\n            Position::AfterFragment => self.serialization.len(),\n        }\n    }\n}\n"
    },
    "url/src/origin.rs": {
      "language": "rust",
      "mutants": [
        {
          "id": "url/src/origin.rs:76:9:85:10:FnValue:String::new()",
          "duration": 2.5331689550000003,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 76,
              "column": 9
            },
            "end": {
              "line": 85,
              "column": 10
            }
          },
          "replacement": "String::new()",
          "status": "Killed",
          "description": "Replace FnValue by String::new()",
          "statusReason": "thread 'test_origin_unicode_serialization' panicked at url/tests/unit.rs:618:9:\nassertion `left == right` failed\n  left: \"\"\n right: \"http://example.net\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_origin_unicode_serialization"
          ]
        },
        {
          "id": "url/src/origin.rs:79:41:79:43:BinaryOperator:!=",
          "duration": 1.821119852,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 79,
              "column": 41
            },
            "end": {
              "line": 79,
              "column": 43
            }
          },
          "replacement": "!=",
          "status": "Killed",
          "description": "Replace BinaryOperator by !=",
          "statusReason": "thread 'test_origin_unicode_serialization' panicked at url/tests/unit.rs:618:9:\nassertion `left == right` failed\n  left: \"http://example.net:80\"\n right: \"http://example.net\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_origin_unicode_serialization"
          ]
        },
        {
          "id": "url/src/origin.rs:76:9:85:10:FnValue:\"xyzzy\".into()",
          "duration": 3.089533978,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 76,
              "column": 9
            },
            "end": {
              "line": 85,
              "column": 10
            }
          },
          "replacement": "\"xyzzy\".into()",
          "status": "Killed",
          "description": "Replace FnValue by \"xyzzy\".into()",
          "statusReason": "thread 'test_origin_unicode_serialization' panicked at url/tests/unit.rs:618:9:\nassertion `left == right` failed\n  left: \"xyzzy\"\n right: \"http://example.net\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_origin_unicode_serialization"
          ]
        },
        {
          "id": "url/src/origin.rs:90:9:106:10:FnValue:\"xyzzy\".into()",
          "duration": 2.327778796,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 90,
              "column": 9
            },
            "end": {
              "line": 106,
              "column": 10
            }
          },
          "replacement": "\"xyzzy\".into()",
          "status": "Killed",
          "description": "Replace FnValue by \"xyzzy\".into()",
          "statusReason": "thread 'test_origin_unicode_serialization' panicked at url/tests/unit.rs:599:9:\nassertion `left == right` failed\n  left: \"xyzzy\"\n right: \"http://😅.com\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_origin_unicode_serialization"
          ]
        },
        {
          "id": "url/src/origin.rs:15:5:32:6:FnValue:Default::default()",
          "duration": 0.313646646,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 15,
              "column": 5
            },
            "end": {
              "line": 32,
              "column": 6
            }
          },
          "replacement": "Default::default()",
          "status": "CompileError",
          "description": "Replace FnValue by Default::default()",
          "killedBy": []
        },
        {
          "id": "url/src/origin.rs:100:41:100:43:BinaryOperator:!=",
          "duration": 0.915931049,
          "mutatorName": "BinaryOperator",
          "location": {
            "start": {
              "line": 100,
              "column": 41
            },
            "end": {
              "line": 100,
              "column": 43
            }
          },
          "replacement": "!=",
          "status": "Killed",
          "description": "Replace BinaryOperator by !=",
          "statusReason": "thread 'test_origin_unicode_serialization' panicked at url/tests/unit.rs:599:9:\nassertion `left == right` failed\n  left: \"http://😅.com:80\"\n right: \"http://😅.com\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_origin_unicode_serialization"
          ]
        },
        {
          "id": "url/src/origin.rs:71:9:71:43:FnValue:true",
          "duration": 1.886974844,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 71,
              "column": 9
            },
            "end": {
              "line": 71,
              "column": 43
            }
          },
          "replacement": "true",
          "status": "Killed",
          "description": "Replace FnValue by true",
          "statusReason": "thread 'test_origin_opaque' panicked at url/tests/unit.rs:585:5:\nassertion failed: !Origin::new_opaque().is_tuple()\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_origin_opaque"
          ]
        },
        {
          "id": "url/src/origin.rs:71:9:71:43:FnValue:false",
          "duration": 4.241788549,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 71,
              "column": 9
            },
            "end": {
              "line": 71,
              "column": 43
            }
          },
          "replacement": "false",
          "status": "Survived",
          "description": "Replace FnValue by false",
          "killedBy": []
        },
        {
          "id": "url/src/origin.rs:90:9:106:10:FnValue:String::new()",
          "duration": 2.034750552,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 90,
              "column": 9
            },
            "end": {
              "line": 106,
              "column": 10
            }
          },
          "replacement": "String::new()",
          "status": "Killed",
          "description": "Replace FnValue by String::new()",
          "statusReason": "thread 'test_origin_unicode_serialization' panicked at url/tests/unit.rs:599:9:\nassertion `left == right` failed\n  left: \"\"\n right: \"http://😅.com\"\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
          "killedBy": [
            "test_origin_unicode_serialization"
          ]
        },
        {
          "id": "url/src/origin.rs:64:9:65:77:FnValue:Default::default()",
          "duration": 0.914296909,
          "mutatorName": "FnValue",
          "location": {
            "start": {
              "line": 64,
              "column": 9
            },
            "end": {
              "line": 65,
              "column": 77
            }
          },
          "replacement": "Default::default()",
          "status": "CompileError",
          "description": "Replace FnValue by Default::default()",
          "killedBy": []
        }
      ],
      "source": "// Copyright 2016 The rust-url developers.\n//\n// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n// option. This file may not be copied, modified, or distributed\n// except according to those terms.\n\nuse crate::host::Host;\nuse crate::parser::default_port;\nuse crate::Url;\nuse std::sync::atomic::{AtomicUsize, Ordering};\n\npub fn url_origin(url: &Url) -> Origin {\n    let scheme = url.scheme();\n    match scheme {\n        \"blob\" => {\n            let result = Url::parse(url.path());\n            match result {\n                Ok(ref url) => url_origin(url),\n                Err(_) => Origin::new_opaque(),\n            }\n        }\n        \"ftp\" | \"http\" | \"https\" | \"ws\" | \"wss\" => Origin::Tuple(\n            scheme.to_owned(),\n            url.host().unwrap().to_owned(),\n            url.port_or_known_default().unwrap(),\n        ),\n        // TODO: Figure out what to do if the scheme is a file\n        \"file\" => Origin::new_opaque(),\n        _ => Origin::new_opaque(),\n    }\n}\n\n/// The origin of an URL\n///\n/// Two URLs with the same origin are considered\n/// to originate from the same entity and can therefore trust\n/// each other.\n///\n/// The origin is determined based on the scheme as follows:\n///\n/// - If the scheme is \"blob\" the origin is the origin of the\n///   URL contained in the path component. If parsing fails,\n///   it is an opaque origin.\n/// - If the scheme is \"ftp\", \"http\", \"https\", \"ws\", or \"wss\",\n///   then the origin is a tuple of the scheme, host, and port.\n/// - If the scheme is anything else, the origin is opaque, meaning\n///   the URL does not have the same origin as any other URL.\n///\n/// For more information see <https://url.spec.whatwg.org/#origin>\n#[derive(PartialEq, Eq, Hash, Clone, Debug)]\npub enum Origin {\n    /// A globally unique identifier\n    Opaque(OpaqueOrigin),\n\n    /// Consists of the URL's scheme, host and port\n    Tuple(String, Host<String>, u16),\n}\n\nimpl Origin {\n    /// Creates a new opaque origin that is only equal to itself.\n    pub fn new_opaque() -> Origin {\n        static COUNTER: AtomicUsize = AtomicUsize::new(0);\n        Origin::Opaque(OpaqueOrigin(COUNTER.fetch_add(1, Ordering::SeqCst)))\n    }\n\n    /// Return whether this origin is a (scheme, host, port) tuple\n    /// (as opposed to an opaque origin).\n    pub fn is_tuple(&self) -> bool {\n        matches!(*self, Origin::Tuple(..))\n    }\n\n    /// <https://html.spec.whatwg.org/multipage/#ascii-serialisation-of-an-origin>\n    pub fn ascii_serialization(&self) -> String {\n        match *self {\n            Origin::Opaque(_) => \"null\".to_owned(),\n            Origin::Tuple(ref scheme, ref host, port) => {\n                if default_port(scheme) == Some(port) {\n                    format!(\"{}://{}\", scheme, host)\n                } else {\n                    format!(\"{}://{}:{}\", scheme, host, port)\n                }\n            }\n        }\n    }\n\n    /// <https://html.spec.whatwg.org/multipage/#unicode-serialisation-of-an-origin>\n    pub fn unicode_serialization(&self) -> String {\n        match *self {\n            Origin::Opaque(_) => \"null\".to_owned(),\n            Origin::Tuple(ref scheme, ref host, port) => {\n                let host = match *host {\n                    Host::Domain(ref domain) => {\n                        let (domain, _errors) = idna::domain_to_unicode(domain);\n                        Host::Domain(domain)\n                    }\n                    _ => host.clone(),\n                };\n                if default_port(scheme) == Some(port) {\n                    format!(\"{}://{}\", scheme, host)\n                } else {\n                    format!(\"{}://{}:{}\", scheme, host, port)\n                }\n            }\n        }\n    }\n}\n\n/// Opaque identifier for URLs that have file or other schemes\n#[derive(Eq, PartialEq, Hash, Clone, Debug)]\npub struct OpaqueOrigin(usize);\n"
    }
  },
  "thresholds": {
    "low": 10,
    "high": 50
  },
  "framework": {
    "name": "cargo-mutants"
  },
  "projectRoot": "/home/max/dev/rust-url",
  "testFiles": {
    "slicing": {
      "tests": [
        {
          "id": "slicing::test_count_digits",
          "name": "slicing::test_count_digits"
        }
      ]
    },
    "- unknown module -": {
      "tests": [
        {
          "id": "append_empty_segment_then_mutate",
          "name": "append_empty_segment_then_mutate"
        },
        {
          "id": "append_trailing_slash",
          "name": "append_trailing_slash"
        },
        {
          "id": "extend_query_pairs_then_mutate",
          "name": "extend_query_pairs_then_mutate"
        },
        {
          "id": "form_urlencoded_encoding_override",
          "name": "form_urlencoded_encoding_override"
        },
        {
          "id": "from_str",
          "name": "from_str"
        },
        {
          "id": "host",
          "name": "host"
        },
        {
          "id": "host_serialization",
          "name": "host_serialization"
        },
        {
          "id": "issue_124",
          "name": "issue_124"
        },
        {
          "id": "issue_197",
          "name": "issue_197"
        },
        {
          "id": "issue_241",
          "name": "issue_241"
        },
        {
          "id": "issue_61",
          "name": "issue_61"
        },
        {
          "id": "issue_864",
          "name": "issue_864"
        },
        {
          "id": "new_directory_paths",
          "name": "new_directory_paths"
        },
        {
          "id": "new_file_paths",
          "name": "new_file_paths"
        },
        {
          "id": "new_path_bad_utf8",
          "name": "new_path_bad_utf8"
        },
        {
          "id": "new_path_windows_fun",
          "name": "new_path_windows_fun"
        },
        {
          "id": "no_panic",
          "name": "no_panic"
        },
        {
          "id": "parse_with_params",
          "name": "parse_with_params"
        },
        {
          "id": "path_backslash_fun",
          "name": "path_backslash_fun"
        },
        {
          "id": "pop_if_empty_in_bounds",
          "name": "pop_if_empty_in_bounds"
        },
        {
          "id": "size",
          "name": "size"
        },
        {
          "id": "test_authority",
          "name": "test_authority"
        },
        {
          "id": "test_domain",
          "name": "test_domain"
        },
        {
          "id": "test_domain_encoding_quirks",
          "name": "test_domain_encoding_quirks"
        },
        {
          "id": "test_equality",
          "name": "test_equality"
        },
        {
          "id": "test_file_with_drive",
          "name": "test_file_with_drive"
        },
        {
          "id": "test_file_with_drive_and_path",
          "name": "test_file_with_drive_and_path"
        },
        {
          "id": "test_form_serialize",
          "name": "test_form_serialize"
        },
        {
          "id": "test_form_urlencoded",
          "name": "test_form_urlencoded"
        },
        {
          "id": "test_fragment",
          "name": "test_fragment"
        },
        {
          "id": "test_has_authority",
          "name": "test_has_authority"
        },
        {
          "id": "test_idna",
          "name": "test_idna"
        },
        {
          "id": "test_leading_dots",
          "name": "test_leading_dots"
        },
        {
          "id": "test_make_relative",
          "name": "test_make_relative"
        },
        {
          "id": "test_no_base_url",
          "name": "test_no_base_url"
        },
        {
          "id": "test_non_special_path",
          "name": "test_non_special_path"
        },
        {
          "id": "test_non_special_path2",
          "name": "test_non_special_path2"
        },
        {
          "id": "test_non_special_path3",
          "name": "test_non_special_path3"
        },
        {
          "id": "test_null_host_with_leading_empty_path_segment",
          "name": "test_null_host_with_leading_empty_path_segment"
        },
        {
          "id": "test_options_reuse",
          "name": "test_options_reuse"
        },
        {
          "id": "test_origin_blob_equality",
          "name": "test_origin_blob_equality"
        },
        {
          "id": "test_origin_hash",
          "name": "test_origin_hash"
        },
        {
          "id": "test_origin_opaque",
          "name": "test_origin_opaque"
        },
        {
          "id": "test_origin_unicode_serialization",
          "name": "test_origin_unicode_serialization"
        },
        {
          "id": "test_query",
          "name": "test_query"
        },
        {
          "id": "test_relative",
          "name": "test_relative"
        },
        {
          "id": "test_relative_empty",
          "name": "test_relative_empty"
        },
        {
          "id": "test_serialization",
          "name": "test_serialization"
        },
        {
          "id": "test_set_empty_host",
          "name": "test_set_empty_host"
        },
        {
          "id": "test_set_empty_hostname",
          "name": "test_set_empty_hostname"
        },
        {
          "id": "test_set_empty_password",
          "name": "test_set_empty_password"
        },
        {
          "id": "test_set_empty_query",
          "name": "test_set_empty_query"
        },
        {
          "id": "test_set_empty_username_and_password",
          "name": "test_set_empty_username_and_password"
        },
        {
          "id": "test_set_host",
          "name": "test_set_host"
        },
        {
          "id": "test_set_href",
          "name": "test_set_href"
        },
        {
          "id": "test_set_ip_host",
          "name": "test_set_ip_host"
        },
        {
          "id": "test_set_scheme_to_file_with_host",
          "name": "test_set_scheme_to_file_with_host"
        },
        {
          "id": "test_slicing",
          "name": "test_slicing"
        },
        {
          "id": "test_socket_addrs",
          "name": "test_socket_addrs"
        },
        {
          "id": "test_strip_trailing_spaces_from_opaque_path",
          "name": "test_strip_trailing_spaces_from_opaque_path"
        },
        {
          "id": "test_syntax_violation_callback",
          "name": "test_syntax_violation_callback"
        },
        {
          "id": "test_syntax_violation_callback_lifetimes",
          "name": "test_syntax_violation_callback_lifetimes"
        },
        {
          "id": "test_syntax_violation_callback_types",
          "name": "test_syntax_violation_callback_types"
        },
        {
          "id": "test_url_from_file_path",
          "name": "test_url_from_file_path"
        },
        {
          "id": "test_windows_unc_path",
          "name": "test_windows_unc_path"
        }
      ]
    },
    "url/src/lib.rs": {
      "tests": [
        {
          "id": "url/src/lib.rs - (line 18)",
          "name": "url/src/lib.rs - (line 18)"
        },
        {
          "id": "url/src/lib.rs - (line 26)",
          "name": "url/src/lib.rs - (line 26)"
        },
        {
          "id": "url/src/lib.rs - (line 57)",
          "name": "url/src/lib.rs - (line 57)"
        },
        {
          "id": "url/src/lib.rs - (line 89)",
          "name": "url/src/lib.rs - (line 89)"
        },
        {
          "id": "url/src/lib.rs - (line 97)",
          "name": "url/src/lib.rs - (line 97)"
        },
        {
          "id": "url/src/lib.rs - ParseOptions<'a>::syntax_violation_callback (line 237)",
          "name": "url/src/lib.rs - ParseOptions<'a>::syntax_violation_callback (line 237)"
        },
        {
          "id": "url/src/lib.rs - Url::as_str (line 570)",
          "name": "url/src/lib.rs - Url::as_str (line 570)"
        },
        {
          "id": "url/src/lib.rs - Url::authority (line 904)",
          "name": "url/src/lib.rs - Url::authority (line 904)"
        },
        {
          "id": "url/src/lib.rs - Url::cannot_be_a_base (line 940)",
          "name": "url/src/lib.rs - Url::cannot_be_a_base (line 940)"
        },
        {
          "id": "url/src/lib.rs - Url::domain (line 1143)",
          "name": "url/src/lib.rs - Url::domain (line 1143)"
        },
        {
          "id": "url/src/lib.rs - Url::fragment (line 1441)",
          "name": "url/src/lib.rs - Url::fragment (line 1441)"
        },
        {
          "id": "url/src/lib.rs - Url::from_file_path (line 2426)",
          "name": "url/src/lib.rs - Url::from_file_path (line 2426)"
        },
        {
          "id": "url/src/lib.rs - Url::has_authority (line 868)",
          "name": "url/src/lib.rs - Url::has_authority (line 868)"
        },
        {
          "id": "url/src/lib.rs - Url::has_host (line 1035)",
          "name": "url/src/lib.rs - Url::has_host (line 1035)"
        },
        {
          "id": "url/src/lib.rs - Url::host (line 1108)",
          "name": "url/src/lib.rs - Url::host (line 1108)"
        },
        {
          "id": "url/src/lib.rs - Url::host_str (line 1069)",
          "name": "url/src/lib.rs - Url::host_str (line 1069)"
        },
        {
          "id": "url/src/lib.rs - Url::into_string (line 593)",
          "name": "url/src/lib.rs - Url::into_string (line 593)"
        },
        {
          "id": "url/src/lib.rs - Url::is_special (line 841)",
          "name": "url/src/lib.rs - Url::is_special (line 841)"
        },
        {
          "id": "url/src/lib.rs - Url::join (line 376)",
          "name": "url/src/lib.rs - Url::join (line 376)"
        },
        {
          "id": "url/src/lib.rs - Url::make_relative (line 411)",
          "name": "url/src/lib.rs - Url::make_relative (line 411)"
        },
        {
          "id": "url/src/lib.rs - Url::options (line 543)",
          "name": "url/src/lib.rs - Url::options (line 543)"
        },
        {
          "id": "url/src/lib.rs - Url::origin (line 750)",
          "name": "url/src/lib.rs - Url::origin (line 750)"
        },
        {
          "id": "url/src/lib.rs - Url::origin (line 767)",
          "name": "url/src/lib.rs - Url::origin (line 767)"
        },
        {
          "id": "url/src/lib.rs - Url::origin (line 784)",
          "name": "url/src/lib.rs - Url::origin (line 784)"
        },
        {
          "id": "url/src/lib.rs - Url::origin (line 801)",
          "name": "url/src/lib.rs - Url::origin (line 801)"
        },
        {
          "id": "url/src/lib.rs - Url::parse (line 276)",
          "name": "url/src/lib.rs - Url::parse (line 276)"
        },
        {
          "id": "url/src/lib.rs - Url::parse_with_params (line 304)",
          "name": "url/src/lib.rs - Url::parse_with_params (line 304)"
        },
        {
          "id": "url/src/lib.rs - Url::password (line 997)",
          "name": "url/src/lib.rs - Url::password (line 997)"
        },
        {
          "id": "url/src/lib.rs - Url::path (line 1290)",
          "name": "url/src/lib.rs - Url::path (line 1290)"
        },
        {
          "id": "url/src/lib.rs - Url::path_segments (line 1326)",
          "name": "url/src/lib.rs - Url::path_segments (line 1326)"
        },
        {
          "id": "url/src/lib.rs - Url::port (line 1174)",
          "name": "url/src/lib.rs - Url::port (line 1174)"
        },
        {
          "id": "url/src/lib.rs - Url::port_or_known_default (line 1206)",
          "name": "url/src/lib.rs - Url::port_or_known_default (line 1206)"
        },
        {
          "id": "url/src/lib.rs - Url::query (line 1362)",
          "name": "url/src/lib.rs - Url::query (line 1362)"
        },
        {
          "id": "url/src/lib.rs - Url::query_pairs (line 1401)",
          "name": "url/src/lib.rs - Url::query_pairs (line 1401)"
        },
        {
          "id": "url/src/lib.rs - Url::query_pairs_mut (line 1586)",
          "name": "url/src/lib.rs - Url::query_pairs_mut (line 1586)"
        },
        {
          "id": "url/src/lib.rs - Url::scheme (line 821)",
          "name": "url/src/lib.rs - Url::scheme (line 821)"
        },
        {
          "id": "url/src/lib.rs - Url::set_fragment (line 1475)",
          "name": "url/src/lib.rs - Url::set_fragment (line 1475)"
        },
        {
          "id": "url/src/lib.rs - Url::set_host (line 1852)",
          "name": "url/src/lib.rs - Url::set_host (line 1852)"
        },
        {
          "id": "url/src/lib.rs - Url::set_host (line 1868)",
          "name": "url/src/lib.rs - Url::set_host (line 1868)"
        },
        {
          "id": "url/src/lib.rs - Url::set_host (line 1884)",
          "name": "url/src/lib.rs - Url::set_host (line 1884)"
        },
        {
          "id": "url/src/lib.rs - Url::set_host (line 1900)",
          "name": "url/src/lib.rs - Url::set_host (line 1900)"
        },
        {
          "id": "url/src/lib.rs - Url::set_ip_host (line 2040)",
          "name": "url/src/lib.rs - Url::set_ip_host (line 2040)"
        },
        {
          "id": "url/src/lib.rs - Url::set_ip_host (line 2055)",
          "name": "url/src/lib.rs - Url::set_ip_host (line 2055)"
        },
        {
          "id": "url/src/lib.rs - Url::set_password (line 2089)",
          "name": "url/src/lib.rs - Url::set_password (line 2089)"
        },
        {
          "id": "url/src/lib.rs - Url::set_path (line 1648)",
          "name": "url/src/lib.rs - Url::set_path (line 1648)"
        },
        {
          "id": "url/src/lib.rs - Url::set_port (line 1740)",
          "name": "url/src/lib.rs - Url::set_port (line 1740)"
        },
        {
          "id": "url/src/lib.rs - Url::set_port (line 1759)",
          "name": "url/src/lib.rs - Url::set_port (line 1759)"
        },
        {
          "id": "url/src/lib.rs - Url::set_port (line 1775)",
          "name": "url/src/lib.rs - Url::set_port (line 1775)"
        },
        {
          "id": "url/src/lib.rs - Url::set_query (line 1534)",
          "name": "url/src/lib.rs - Url::set_query (line 1534)"
        },
        {
          "id": "url/src/lib.rs - Url::set_scheme (line 2275)",
          "name": "url/src/lib.rs - Url::set_scheme (line 2275)"
        },
        {
          "id": "url/src/lib.rs - Url::set_scheme (line 2290)",
          "name": "url/src/lib.rs - Url::set_scheme (line 2290)"
        },
        {
          "id": "url/src/lib.rs - Url::set_scheme (line 2306)",
          "name": "url/src/lib.rs - Url::set_scheme (line 2306)"
        },
        {
          "id": "url/src/lib.rs - Url::set_scheme (line 2322)",
          "name": "url/src/lib.rs - Url::set_scheme (line 2322)"
        },
        {
          "id": "url/src/lib.rs - Url::set_scheme (line 2337)",
          "name": "url/src/lib.rs - Url::set_scheme (line 2337)"
        },
        {
          "id": "url/src/lib.rs - Url::set_scheme (line 2352)",
          "name": "url/src/lib.rs - Url::set_scheme (line 2352)"
        },
        {
          "id": "url/src/lib.rs - Url::set_username (line 2175)",
          "name": "url/src/lib.rs - Url::set_username (line 2175)"
        },
        {
          "id": "url/src/lib.rs - Url::set_username (line 2190)",
          "name": "url/src/lib.rs - Url::set_username (line 2190)"
        },
        {
          "id": "url/src/lib.rs - Url::socket_addrs (line 1239)",
          "name": "url/src/lib.rs - Url::socket_addrs (line 1239)"
        },
        {
          "id": "url/src/lib.rs - Url::socket_addrs (line 1246)",
          "name": "url/src/lib.rs - Url::socket_addrs (line 1246)"
        },
        {
          "id": "url/src/lib.rs - Url::to_file_path (line 2586)",
          "name": "url/src/lib.rs - Url::to_file_path (line 2586)"
        },
        {
          "id": "url/src/lib.rs - Url::username (line 967)",
          "name": "url/src/lib.rs - Url::username (line 967)"
        }
      ]
    },
    "url/src/path_segments.rs": {
      "tests": [
        {
          "id": "url/src/path_segments.rs - path_segments::PathSegmentsMut (line 20)",
          "name": "url/src/path_segments.rs - path_segments::PathSegmentsMut (line 20)"
        },
        {
          "id": "url/src/path_segments.rs - path_segments::PathSegmentsMut<'a>::clear (line 79)",
          "name": "url/src/path_segments.rs - path_segments::PathSegmentsMut<'a>::clear (line 79)"
        },
        {
          "id": "url/src/path_segments.rs - path_segments::PathSegmentsMut<'a>::extend (line 182)",
          "name": "url/src/path_segments.rs - path_segments::PathSegmentsMut<'a>::extend (line 182)"
        },
        {
          "id": "url/src/path_segments.rs - path_segments::PathSegmentsMut<'a>::extend (line 202)",
          "name": "url/src/path_segments.rs - path_segments::PathSegmentsMut<'a>::extend (line 202)"
        },
        {
          "id": "url/src/path_segments.rs - path_segments::PathSegmentsMut<'a>::pop_if_empty (line 107)",
          "name": "url/src/path_segments.rs - path_segments::PathSegmentsMut<'a>::pop_if_empty (line 107)"
        }
      ]
    },
    "url/src/slicing.rs": {
      "tests": [
        {
          "id": "url/src/slicing.rs - slicing::Position (line 67)",
          "name": "url/src/slicing.rs - slicing::Position (line 67)"
        }
      ]
    }
  },
  "performance": {
    "initialRun": 6.012960743,
    "mutation": 0,
    "setup": 0
  }
}